

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Dec 17 10:41:09 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1
    44                           	psect	text35,global,reloc=2,class=CODE,delta=1
    45                           	psect	text36,global,reloc=2,class=CODE,delta=1
    46                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text39,global,reloc=2,class=CODE,delta=1
    49                           	psect	text40,global,reloc=2,class=CODE,delta=1
    50                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text42,global,reloc=2,class=CODE,delta=1
    52                           	psect	text43,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    57  0000                     
    58                           ; Version 2.20
    59                           ; Generated 12/02/2020 GMT
    60                           ; 
    61                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4520 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	smallconst
    94  000600                     __psmallconst:
    95                           	callstack 0
    96  000600  00                 	db	0
    97  000601                     _valor:
    98                           	callstack 0
    99  000601  3F                 	db	63
   100  000602  06                 	db	6
   101  000603  5B                 	db	91
   102  000604  4F                 	db	79
   103  000605  66                 	db	102
   104  000606  6D                 	db	109
   105  000607  7D                 	db	125
   106  000608  07                 	db	7
   107  000609  7F                 	db	127
   108  00060A  6F                 	db	111
   109  00060B  77                 	db	119
   110  00060C  7C                 	db	124
   111  00060D  39                 	db	57
   112  00060E  5E                 	db	94
   113  00060F  79                 	db	121
   114  000610  71                 	db	113
   115  000611  00                 	db	0
   116  000612                     __end_of_valor:
   117                           	callstack 0
   118  000612                     _charKey:
   119                           	callstack 0
   120  000612  55                 	db	85
   121  000613  4C                 	db	76
   122  000614  44                 	db	68
   123  000615  52                 	db	82
   124  000616  53                 	db	83
   125  000617  58                 	db	88
   126  000618  41                 	db	65
   127  000619  42                 	db	66
   128  00061A  59                 	db	89
   129  00061B  73                 	db	115
   130  00061C                     __end_of_charKey:
   131                           	callstack 0
   132  0000                     _T0CON	set	4053
   133  0000                     _TMR0L	set	4054
   134  0000                     _TMR0H	set	4055
   135  0000                     _INTCON	set	4082
   136  0000                     _SPBRG	set	4015
   137  0000                     _SPBRGH	set	4016
   138  0000                     _BAUDCON	set	4024
   139  0000                     _TXSTA	set	4012
   140  0000                     _RCREG	set	4014
   141  0000                     _RCSTA	set	4011
   142  0000                     _TXREG	set	4013
   143  0000                     _PIR1	set	3998
   144  0000                     _T2CON	set	4042
   145  0000                     _CCP2CON	set	4026
   146  0000                     _CCPR2L	set	4027
   147  0000                     _PR2	set	4043
   148  0000                     _TRISE	set	3990
   149  0000                     _TRISD	set	3989
   150  0000                     _TRISC	set	3988
   151  0000                     _TRISB	set	3987
   152  0000                     _TRISA	set	3986
   153  0000                     _PORTE	set	3972
   154  0000                     _PORTD	set	3971
   155  0000                     _PORTC	set	3970
   156  0000                     _PORTB	set	3969
   157  0000                     _PORTA	set	3968
   158  0000                     _ADRESL	set	4035
   159  0000                     _ADRESH	set	4036
   160  0000                     _ADCON2	set	4032
   161  0000                     _ADCON1	set	4033
   162  0000                     _ADCON0	set	4034
   163  00061C                     STR_4:
   164  00061C  41                 	db	65	;'A'
   165  00061D  56                 	db	86	;'V'
   166  00061E  45                 	db	69	;'E'
   167  00061F  4E                 	db	78	;'N'
   168  000620  49                 	db	73	;'I'
   169  000621  44                 	db	68	;'D'
   170  000622  41                 	db	65	;'A'
   171  000623  20                 	db	32
   172  000624  20                 	db	32
   173  000625  20                 	db	32
   174  000626  00                 	db	0
   175  000627                     STR_12:
   176  000627  41                 	db	65	;'A'
   177  000628  56                 	db	86	;'V'
   178  000629  45                 	db	69	;'E'
   179  00062A  4E                 	db	78	;'N'
   180  00062B  49                 	db	73	;'I'
   181  00062C  44                 	db	68	;'D'
   182  00062D  41                 	db	65	;'A'
   183  00062E  20                 	db	32
   184  00062F  20                 	db	32
   185  000630  00                 	db	0
   186  000631                     STR_6:
   187  000631  42                 	db	66	;'B'
   188  000632  52                 	db	82	;'R'
   189  000633  2D                 	db	45
   190  000634  30                 	db	48	;'0'
   191  000635  34                 	db	52	;'4'
   192  000636  30                 	db	48	;'0'
   193  000637  20                 	db	32
   194  000638  20                 	db	32
   195  000639  00                 	db	0
   196  00063A                     STR_8:
   197  00063A  4D                 	db	77	;'M'
   198  00063B  47                 	db	71	;'G'
   199  00063C  2D                 	db	45
   200  00063D  33                 	db	51	;'3'
   201  00063E  30                 	db	48	;'0'
   202  00063F  31                 	db	49	;'1'
   203  000640  20                 	db	32
   204  000641  20                 	db	32
   205  000642  00                 	db	0
   206  000643                     STR_2:
   207  000643  52                 	db	82	;'R'
   208  000644  55                 	db	85	;'U'
   209  000645  41                 	db	65	;'A'
   210  000646  20                 	db	32
   211  000647  58                 	db	88	;'X'
   212  000648  56                 	db	86	;'V'
   213  000649  20                 	db	32
   214  00064A  20                 	db	32
   215  00064B  00                 	db	0
   216  00064C                     STR_18:
   217  00064C  2D                 	db	45
   218  00064D  52                 	db	82	;'R'
   219  00064E  61                 	db	97	;'a'
   220  00064F  64                 	db	100	;'d'
   221  000650  61                 	db	97	;'a'
   222  000651  72                 	db	114	;'r'
   223  000652  2D                 	db	45
   224  000653  20                 	db	32
   225  000654  00                 	db	0
   226  000655                     STR_7:
   227  000655  4C                 	db	76	;'L'
   228  000656  3A                 	db	58	;':'
   229  000657  20                 	db	32
   230  000658  31                 	db	49	;'1'
   231  000659  30                 	db	48	;'0'
   232  00065A  30                 	db	48	;'0'
   233  00065B  20                 	db	32
   234  00065C  00                 	db	0
   235  00065D                     STR_9:
   236  00065D  4C                 	db	76	;'L'
   237  00065E  3A                 	db	58	;':'
   238  00065F  20                 	db	32
   239  000660  31                 	db	49	;'1'
   240  000661  31                 	db	49	;'1'
   241  000662  30                 	db	48	;'0'
   242  000663  20                 	db	32
   243  000664  00                 	db	0
   244  000665                     STR_3:
   245  000665  4C                 	db	76	;'L'
   246  000666  3A                 	db	58	;':'
   247  000667  20                 	db	32
   248  000668  36                 	db	54	;'6'
   249  000669  30                 	db	48	;'0'
   250  00066A  20                 	db	32
   251  00066B  00                 	db	0
   252  00066C                     STR_5:
   253  00066C  4C                 	db	76	;'L'
   254  00066D  3A                 	db	58	;':'
   255  00066E  20                 	db	32
   256  00066F  38                 	db	56	;'8'
   257  000670  30                 	db	48	;'0'
   258  000671  20                 	db	32
   259  000672  00                 	db	0
   260  000673                     STR_15:
   261  000673  4C                 	db	76	;'L'
   262  000674  3A                 	db	58	;':'
   263  000675  20                 	db	32
   264  000676  31                 	db	49	;'1'
   265  000677  30                 	db	48	;'0'
   266  000678  30                 	db	48	;'0'
   267  000679  00                 	db	0
   268  00067A                     STR_17:
   269  00067A  4C                 	db	76	;'L'
   270  00067B  3A                 	db	58	;':'
   271  00067C  20                 	db	32
   272  00067D  31                 	db	49	;'1'
   273  00067E  31                 	db	49	;'1'
   274  00067F  30                 	db	48	;'0'
   275  000680  00                 	db	0
   276  000681                     STR_11:
   277  000681  4C                 	db	76	;'L'
   278  000682  3A                 	db	58	;':'
   279  000683  20                 	db	32
   280  000684  30                 	db	48	;'0'
   281  000685  36                 	db	54	;'6'
   282  000686  30                 	db	48	;'0'
   283  000687  00                 	db	0
   284  000688                     STR_13:
   285  000688  4C                 	db	76	;'L'
   286  000689  3A                 	db	58	;':'
   287  00068A  20                 	db	32
   288  00068B  30                 	db	48	;'0'
   289  00068C  38                 	db	56	;'8'
   290  00068D  30                 	db	48	;'0'
   291  00068E  00                 	db	0
   292  00068F                     STR_1:
   293  00068F  56                 	db	86	;'V'
   294  000690  3A                 	db	58	;':'
   295  000691  00                 	db	0
   296  000692  00                 	db	0	; dummy byte at the end
   297  0000                     
   298                           ; #config settings
   299                           
   300                           	psect	cinit
   301  00231E                     __pcinit:
   302                           	callstack 0
   303  00231E                     start_initialization:
   304                           	callstack 0
   305  00231E                     __initialization:
   306                           	callstack 0
   307                           
   308                           ; Clear objects allocated to COMRAM (28 bytes)
   309  00231E  EE00  F02E         	lfsr	0,__pbssCOMRAM
   310  002322  0E1C               	movlw	28
   311  002324                     clear_0:
   312  002324  6AEE               	clrf	postinc0,c
   313  002326  06E8               	decf	wreg,f,c
   314  002328  E1FD               	bnz	clear_0
   315  00232A                     end_of_initialization:
   316                           	callstack 0
   317  00232A                     __end_of__initialization:
   318                           	callstack 0
   319  00232A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   320  00232C  6EF8               	movwf	tblptru,c
   321  00232E  0100               	movlb	0
   322  002330  EFC3  F00C         	goto	_main	;jump to C main() function
   323                           
   324                           	psect	bssCOMRAM
   325  00002E                     __pbssCOMRAM:
   326                           	callstack 0
   327  00002E                     _velocidade:
   328                           	callstack 0
   329  00002E                     	ds	4
   330  000032                     _limite:
   331                           	callstack 0
   332  000032                     	ds	4
   333  000036                     _multa:
   334                           	callstack 0
   335  000036                     	ds	2
   336  000038                     kpDebounce@oldRead:
   337                           	callstack 0
   338  000038                     	ds	2
   339  00003A                     kpDebounce@newRead:
   340                           	callstack 0
   341  00003A                     	ds	2
   342  00003C                     _keys:
   343                           	callstack 0
   344  00003C                     	ds	2
   345  00003E                     _op:
   346                           	callstack 0
   347  00003E                     	ds	1
   348  00003F                     _v3:
   349                           	callstack 0
   350  00003F                     	ds	1
   351  000040                     _v2:
   352                           	callstack 0
   353  000040                     	ds	1
   354  000041                     _v1:
   355                           	callstack 0
   356  000041                     	ds	1
   357  000042                     _v0:
   358                           	callstack 0
   359  000042                     	ds	1
   360  000043                     _display:
   361                           	callstack 0
   362  000043                     	ds	1
   363  000044                     kpDebounce@tempo:
   364                           	callstack 0
   365  000044                     	ds	1
   366  000045                     _started:
   367                           	callstack 0
   368  000045                     	ds	1
   369  000046                     _pot:
   370                           	callstack 0
   371  000046                     	ds	4
   372                           
   373                           	psect	cstackCOMRAM
   374  000001                     __pcstackCOMRAM:
   375                           	callstack 0
   376  000001                     ??_kpReadKey:
   377  000001                     ?_digitalRead:
   378                           	callstack 0
   379  000001                     ?_adcRead:
   380                           	callstack 0
   381  000001                     ?_kpRead:
   382                           	callstack 0
   383  000001                     ?___lwdiv:
   384                           	callstack 0
   385  000001                     ?___lmul:
   386                           	callstack 0
   387  000001                     serialSend@c:
   388                           	callstack 0
   389  000001                     serialRead@resp:
   390                           	callstack 0
   391  000001                     ssdDigit@pos:
   392                           	callstack 0
   393  000001                     adcRead@channel:
   394                           	callstack 0
   395  000001                     digitalWrite@pin:
   396                           	callstack 0
   397  000001                     digitalRead@pin:
   398                           	callstack 0
   399  000001                     pinMode@pin:
   400                           	callstack 0
   401  000001                     delayMicro@a:
   402                           	callstack 0
   403  000001                     delayMili@a:
   404                           	callstack 0
   405  000001                     timerReset@tempo:
   406                           	callstack 0
   407  000001                     ___lwdiv@dividend:
   408                           	callstack 0
   409  000001                     ___lmul@multiplier:
   410                           	callstack 0
   411                           
   412                           ; 4 bytes @ 0x0
   413  000001                     	ds	1
   414  000002                     ssdDigit@val:
   415                           	callstack 0
   416                           
   417                           ; 1 bytes @ 0x1
   418  000002                     	ds	1
   419  000003                     ??_digitalRead:
   420  000003                     ??_delayMili:
   421  000003                     adcRead@ADvalor:
   422                           	callstack 0
   423  000003                     digitalWrite@value:
   424                           	callstack 0
   425  000003                     pinMode@type:
   426                           	callstack 0
   427  000003                     timerReset@ciclos:
   428                           	callstack 0
   429  000003                     ___lwdiv@divisor:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x2
   433  000003                     	ds	1
   434  000004                     kpReadKey@i:
   435                           	callstack 0
   436  000004                     delayMili@i:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x3
   440  000004                     	ds	1
   441  000005                     ??_pinMode:
   442  000005                     ??_digitalWrite:
   443  000005                     ___lwdiv@quotient:
   444                           	callstack 0
   445  000005                     ___lmul@multiplicand:
   446                           	callstack 0
   447                           
   448                           ; 4 bytes @ 0x4
   449  000005                     	ds	2
   450  000007                     ___lwdiv@counter:
   451                           	callstack 0
   452  000007                     soWrite@value:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x6
   456  000007                     	ds	1
   457  000008                     ?___lwmod:
   458                           	callstack 0
   459  000008                     ___lwmod@dividend:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x7
   463  000008                     	ds	1
   464  000009                     soWrite@i:
   465                           	callstack 0
   466  000009                     ___lmul@product:
   467                           	callstack 0
   468                           
   469                           ; 4 bytes @ 0x8
   470  000009                     	ds	1
   471  00000A                     ??_kpDebounce:
   472  00000A                     ??_ssdUpdate:
   473  00000A                     pushNibble@rs:
   474                           	callstack 0
   475  00000A                     pushByte@rs:
   476                           	callstack 0
   477  00000A                     ___lwmod@divisor:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x9
   481  00000A                     	ds	2
   482  00000C                     ??_pushByte:
   483  00000C                     pushNibble@value:
   484                           	callstack 0
   485  00000C                     ___lwmod@counter:
   486                           	callstack 0
   487                           
   488                           ; 1 bytes @ 0xB
   489  00000C                     	ds	1
   490  00000D                     ?___lldiv:
   491                           	callstack 0
   492  00000D                     pushByte@value:
   493                           	callstack 0
   494  00000D                     kpDebounce@i:
   495                           	callstack 0
   496  00000D                     mostraDisplay@v0:
   497                           	callstack 0
   498  00000D                     ___lldiv@dividend:
   499                           	callstack 0
   500                           
   501                           ; 4 bytes @ 0xC
   502  00000D                     	ds	1
   503  00000E                     lcdCommand@value:
   504                           	callstack 0
   505  00000E                     lcdChar@value:
   506                           	callstack 0
   507                           
   508                           ; 1 bytes @ 0xD
   509  00000E                     	ds	1
   510  00000F                     lcdPosition@line:
   511                           	callstack 0
   512  00000F                     lcdString@msg:
   513                           	callstack 0
   514  00000F                     mostraDisplay@v1:
   515                           	callstack 0
   516                           
   517                           ; 2 bytes @ 0xE
   518  00000F                     	ds	2
   519  000011                     ??_lcdString:
   520  000011                     lcdPosition@col:
   521                           	callstack 0
   522  000011                     mostraDisplay@v2:
   523                           	callstack 0
   524  000011                     ___lldiv@divisor:
   525                           	callstack 0
   526                           
   527                           ; 4 bytes @ 0x10
   528  000011                     	ds	2
   529  000013                     lcdString@i:
   530                           	callstack 0
   531  000013                     mostraDisplay@v3:
   532                           	callstack 0
   533                           
   534                           ; 2 bytes @ 0x12
   535  000013                     	ds	2
   536  000015                     ___lldiv@quotient:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x14
   540  000015                     	ds	4
   541  000019                     ___lldiv@counter:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x18
   545  000019                     	ds	1
   546  00001A                     ??_leTeclado:
   547  00001A                     ?___llmod:
   548                           	callstack 0
   549  00001A                     ___llmod@dividend:
   550                           	callstack 0
   551                           
   552                           ; 4 bytes @ 0x19
   553  00001A                     	ds	2
   554  00001C                     leTeclado@tecla:
   555                           	callstack 0
   556                           
   557                           ; 1 bytes @ 0x1B
   558  00001C                     	ds	2
   559  00001E                     ___llmod@divisor:
   560                           	callstack 0
   561                           
   562                           ; 4 bytes @ 0x1D
   563  00001E                     	ds	4
   564  000022                     ___llmod@counter:
   565                           	callstack 0
   566                           
   567                           ; 1 bytes @ 0x21
   568  000022                     	ds	1
   569  000023                     ??_serialcom:
   570  000023                     levelocidade@valantigo:
   571                           	callstack 0
   572                           
   573                           ; 4 bytes @ 0x22
   574  000023                     	ds	2
   575  000025                     _serialcom$1385:
   576                           	callstack 0
   577                           
   578                           ; 4 bytes @ 0x24
   579  000025                     	ds	2
   580  000027                     _levelocidade$1384:
   581                           	callstack 0
   582                           
   583                           ; 4 bytes @ 0x26
   584  000027                     	ds	4
   585  00002B                     ??_main:
   586                           
   587                           ; 1 bytes @ 0x2A
   588  00002B                     	ds	2
   589  00002D                     main@slot:
   590                           	callstack 0
   591                           
   592                           ; 1 bytes @ 0x2C
   593  00002D                     	ds	1
   594                           
   595 ;;
   596 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   597 ;;
   598 ;; *************** function _main *****************
   599 ;; Defined at:
   600 ;;		line 165 in file "main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  slot            1   44[COMRAM] unsigned char 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   614 ;;      Params:         0       0       0       0       0       0       0
   615 ;;      Locals:         1       0       0       0       0       0       0
   616 ;;      Temps:          2       0       0       0       0       0       0
   617 ;;      Totals:         3       0       0       0       0       0       0
   618 ;;Total ram usage:        3 bytes
   619 ;; Hardware stack levels required when called: 7
   620 ;; This function calls:
   621 ;;		_adcInit
   622 ;;		_calcula
   623 ;;		_kpInit
   624 ;;		_lcdInit
   625 ;;		_lcdString
   626 ;;		_leTeclado
   627 ;;		_levelocidade
   628 ;;		_serialInit
   629 ;;		_serialcom
   630 ;;		_ssdInit
   631 ;;		_ssdUpdate
   632 ;;		_timerInit
   633 ;;		_timerReset
   634 ;;		_timerWait
   635 ;; This function is called by:
   636 ;;		Startup code after reset
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text0
   641  001986                     __ptext0:
   642                           	callstack 0
   643  001986                     _main:
   644                           	callstack 24
   645  001986                     
   646                           ;main.c: 166:     char slot;;main.c: 167:     lcdInit();
   647  001986  EC20  F00D         	call	_lcdInit	;wreg free
   648                           
   649                           ;main.c: 168:     kpInit();
   650  00198A  ECBA  F010         	call	_kpInit	;wreg free
   651                           
   652                           ;main.c: 169:     ssdInit();
   653  00198E  EC94  F00F         	call	_ssdInit	;wreg free
   654                           
   655                           ;main.c: 170:     timerInit();
   656  001992  ECB2  F011         	call	_timerInit	;wreg free
   657                           
   658                           ;main.c: 171:     serialInit();
   659  001996  EC82  F011         	call	_serialInit	;wreg free
   660                           
   661                           ;main.c: 172:     adcInit();
   662  00199A  EC39  F010         	call	_adcInit	;wreg free
   663  00199E                     
   664                           ;main.c: 173:     lcdString("-Radar- ");
   665  00199E  0E4C               	movlw	low STR_18
   666  0019A0  6E0F               	movwf	lcdString@msg^0,c
   667  0019A2  0E06               	movlw	high STR_18
   668  0019A4  6E10               	movwf	(lcdString@msg+1)^0,c
   669  0019A6  ECBF  F00F         	call	_lcdString	;wreg free
   670  0019AA                     l2955:
   671                           
   672                           ;main.c: 175:         timerReset(6000);
   673  0019AA  0E17               	movlw	23
   674  0019AC  6E02               	movwf	(timerReset@tempo+1)^0,c
   675  0019AE  0E70               	movlw	112
   676  0019B0  6E01               	movwf	timerReset@tempo^0,c
   677  0019B2  EC53  F011         	call	_timerReset	;wreg free
   678                           
   679                           ;main.c: 176:         switch (slot) {
   680  0019B6  EFFD  F00C         	goto	l2979
   681  0019BA                     l2957:
   682                           
   683                           ;main.c: 178:                 leTeclado();
   684  0019BA  EC96  F005         	call	_leTeclado	;wreg free
   685                           
   686                           ;main.c: 179:                 ssdUpdate();
   687  0019BE  EC52  F00A         	call	_ssdUpdate	;wreg free
   688  0019C2                     
   689                           ;main.c: 180:                 slot = 1;
   690  0019C2  0E01               	movlw	1
   691  0019C4  6E2D               	movwf	main@slot^0,c
   692                           
   693                           ;main.c: 181:                 break;
   694  0019C6  EF1A  F00D         	goto	l2981
   695  0019CA                     l2961:
   696                           
   697                           ;main.c: 183:                 serialcom();
   698  0019CA  EC4A  F003         	call	_serialcom	;wreg free
   699  0019CE                     
   700                           ;main.c: 184:                 slot = 2;
   701  0019CE  0E02               	movlw	2
   702  0019D0  6E2D               	movwf	main@slot^0,c
   703                           
   704                           ;main.c: 185:                 break;
   705  0019D2  EF1A  F00D         	goto	l2981
   706  0019D6                     l2965:
   707                           
   708                           ;main.c: 187:                 levelocidade();
   709  0019D6  EC32  F009         	call	_levelocidade	;wreg free
   710  0019DA                     
   711                           ;main.c: 188:                 slot = 3;
   712  0019DA  0E03               	movlw	3
   713  0019DC  6E2D               	movwf	main@slot^0,c
   714                           
   715                           ;main.c: 189:                 break;
   716  0019DE  EF1A  F00D         	goto	l2981
   717  0019E2                     l2969:
   718                           
   719                           ;main.c: 191:                 calcula();
   720  0019E2  ECCC  F00D         	call	_calcula	;wreg free
   721  0019E6                     
   722                           ;main.c: 192:                 ssdUpdate();
   723  0019E6  EC52  F00A         	call	_ssdUpdate	;wreg free
   724  0019EA                     
   725                           ;main.c: 193:                 slot = 4;
   726  0019EA  0E04               	movlw	4
   727  0019EC  6E2D               	movwf	main@slot^0,c
   728                           
   729                           ;main.c: 194:                 break;
   730  0019EE  EF1A  F00D         	goto	l2981
   731  0019F2                     l2975:
   732                           
   733                           ;main.c: 196:                 slot = 0;
   734  0019F2  0E00               	movlw	0
   735  0019F4  6E2D               	movwf	main@slot^0,c
   736                           
   737                           ;main.c: 197:                 break;
   738  0019F6  EF1A  F00D         	goto	l2981
   739  0019FA                     l2979:
   740  0019FA  502D               	movf	main@slot^0,w,c
   741  0019FC  6E2B               	movwf	??_main^0,c
   742  0019FE  6A2C               	clrf	(??_main+1)^0,c
   743                           
   744                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   745                           ; Switch size 1, requested type "simple"
   746                           ; Number of cases is 1, Range of values is 0 to 0
   747                           ; switch strategies available:
   748                           ; Name         Instructions Cycles
   749                           ; simple_byte            4     3 (average)
   750                           ;	Chosen strategy is simple_byte
   751  001A00  502C               	movf	(??_main+1)^0,w,c
   752  001A02  0A00               	xorlw	0	; case 0
   753  001A04  B4D8               	btfsc	status,2,c
   754  001A06  EF07  F00D         	goto	l3003
   755  001A0A  EFF9  F00C         	goto	l2975
   756  001A0E                     l3003:
   757                           
   758                           ; Switch size 1, requested type "simple"
   759                           ; Number of cases is 4, Range of values is 0 to 3
   760                           ; switch strategies available:
   761                           ; Name         Instructions Cycles
   762                           ; simple_byte           13     7 (average)
   763                           ;	Chosen strategy is simple_byte
   764  001A0E  502B               	movf	??_main^0,w,c
   765  001A10  0A00               	xorlw	0	; case 0
   766  001A12  B4D8               	btfsc	status,2,c
   767  001A14  EFDD  F00C         	goto	l2957
   768  001A18  0A01               	xorlw	1	; case 1
   769  001A1A  B4D8               	btfsc	status,2,c
   770  001A1C  EFE5  F00C         	goto	l2961
   771  001A20  0A03               	xorlw	3	; case 2
   772  001A22  B4D8               	btfsc	status,2,c
   773  001A24  EFEB  F00C         	goto	l2965
   774  001A28  0A01               	xorlw	1	; case 3
   775  001A2A  B4D8               	btfsc	status,2,c
   776  001A2C  EFF1  F00C         	goto	l2969
   777  001A30  EFF9  F00C         	goto	l2975
   778  001A34                     l2981:
   779                           
   780                           ;main.c: 200:         timerWait();
   781  001A34  ECA5  F011         	call	_timerWait	;wreg free
   782                           
   783                           ;main.c: 201:     }
   784  001A38  EFD5  F00C         	goto	l2955
   785  001A3C  EF00  F000         	goto	start
   786  001A40                     __end_of_main:
   787                           	callstack 0
   788                           
   789 ;; *************** function _timerWait *****************
   790 ;; Defined at:
   791 ;;		line 31 in file "timer.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		None
   800 ;; Tracked objects:
   801 ;;		On entry : 0/0
   802 ;;		On exit  : 0/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   805 ;;      Params:         0       0       0       0       0       0       0
   806 ;;      Locals:         0       0       0       0       0       0       0
   807 ;;      Temps:          0       0       0       0       0       0       0
   808 ;;      Totals:         0       0       0       0       0       0       0
   809 ;;Total ram usage:        0 bytes
   810 ;; Hardware stack levels used: 1
   811 ;; This function calls:
   812 ;;		Nothing
   813 ;; This function is called by:
   814 ;;		_main
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           	psect	text1
   819  00234A                     __ptext1:
   820                           	callstack 0
   821  00234A                     _timerWait:
   822                           	callstack 30
   823  00234A                     l440:
   824  00234A  A4F2               	btfss	242,2,c	;volatile
   825  00234C  EFAA  F011         	goto	u1011
   826  002350  EFAC  F011         	goto	u1010
   827  002354                     u1011:
   828  002354  EFA5  F011         	goto	l440
   829  002358                     u1010:
   830  002358  0012               	return		;funcret
   831  00235A                     __end_of_timerWait:
   832                           	callstack 0
   833                           
   834 ;; *************** function _timerReset *****************
   835 ;; Defined at:
   836 ;;		line 37 in file "timer.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;  tempo           2    0[COMRAM] unsigned int 
   839 ;; Auto vars:     Size  Location     Type
   840 ;;  ciclos          2    2[COMRAM] unsigned int 
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, status,2, status,0
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   850 ;;      Params:         2       0       0       0       0       0       0
   851 ;;      Locals:         2       0       0       0       0       0       0
   852 ;;      Temps:          0       0       0       0       0       0       0
   853 ;;      Totals:         4       0       0       0       0       0       0
   854 ;;Total ram usage:        4 bytes
   855 ;; Hardware stack levels used: 1
   856 ;; This function calls:
   857 ;;		Nothing
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text2
   864  0022A6                     __ptext2:
   865                           	callstack 0
   866  0022A6                     _timerReset:
   867                           	callstack 30
   868  0022A6                     
   869                           ;timer.c: 37: void timerReset(unsigned int tempo);timer.c: 38: {;timer.c: 39:     unsign
      +                          ed int ciclos;;timer.c: 42:     ciclos = tempo * 2;
   870  0022A6  90D8               	bcf	status,0,c
   871  0022A8  3401               	rlcf	timerReset@tempo^0,w,c
   872  0022AA  6E03               	movwf	timerReset@ciclos^0,c
   873  0022AC  3402               	rlcf	(timerReset@tempo+1)^0,w,c
   874  0022AE  6E04               	movwf	(timerReset@ciclos+1)^0,c
   875  0022B0                     
   876                           ;timer.c: 44:  ciclos = 65535 - ciclos;
   877  0022B0  1E03               	comf	timerReset@ciclos^0,f,c
   878  0022B2  1E04               	comf	(timerReset@ciclos+1)^0,f,c
   879  0022B4                     
   880                           ;timer.c: 47:     ciclos -=50;
   881  0022B4  0E32               	movlw	50
   882  0022B6  5E03               	subwf	timerReset@ciclos^0,f,c
   883  0022B8  0E00               	movlw	0
   884  0022BA  5A04               	subwfb	(timerReset@ciclos+1)^0,f,c
   885  0022BC                     
   886                           ;timer.c: 49:  TMR0H = (ciclos >> 8);
   887  0022BC  5004               	movf	(timerReset@ciclos+1)^0,w,c
   888  0022BE  6ED7               	movwf	215,c	;volatile
   889  0022C0                     
   890                           ;timer.c: 50:  TMR0L = (ciclos & 0x00FF);
   891  0022C0  C003  FFD6         	movff	timerReset@ciclos,4054	;volatile
   892  0022C4                     
   893                           ;timer.c: 52:  ((INTCON) &= ~(1<<(2)));
   894  0022C4  94F2               	bcf	242,2,c	;volatile
   895  0022C6  0012               	return		;funcret
   896  0022C8                     __end_of_timerReset:
   897                           	callstack 0
   898                           
   899 ;; *************** function _timerInit *****************
   900 ;; Defined at:
   901 ;;		line 55 in file "timer.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;		None
   904 ;; Auto vars:     Size  Location     Type
   905 ;;		None
   906 ;; Return value:  Size  Location     Type
   907 ;;                  1    wreg      void 
   908 ;; Registers used:
   909 ;;		wreg, status,2, status,0
   910 ;; Tracked objects:
   911 ;;		On entry : 0/0
   912 ;;		On exit  : 0/0
   913 ;;		Unchanged: 0/0
   914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   915 ;;      Params:         0       0       0       0       0       0       0
   916 ;;      Locals:         0       0       0       0       0       0       0
   917 ;;      Temps:          0       0       0       0       0       0       0
   918 ;;      Totals:         0       0       0       0       0       0       0
   919 ;;Total ram usage:        0 bytes
   920 ;; Hardware stack levels used: 1
   921 ;; This function calls:
   922 ;;		Nothing
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text3
   929  002364                     __ptext3:
   930                           	callstack 0
   931  002364                     _timerInit:
   932                           	callstack 30
   933  002364                     
   934                           ;timer.c: 57:  T0CON = 0b00001000;
   935  002364  0E08               	movlw	8
   936  002366  6ED5               	movwf	213,c	;volatile
   937  002368                     
   938                           ;timer.c: 58:  ((T0CON) |= (1<<(7)));
   939  002368  8ED5               	bsf	213,7,c	;volatile
   940  00236A  0012               	return		;funcret
   941  00236C                     __end_of_timerInit:
   942                           	callstack 0
   943                           
   944 ;; *************** function _ssdUpdate *****************
   945 ;; Defined at:
   946 ;;		line 50 in file "ssd.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;		None
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   960 ;;      Params:         0       0       0       0       0       0       0
   961 ;;      Locals:         0       0       0       0       0       0       0
   962 ;;      Temps:          2       0       0       0       0       0       0
   963 ;;      Totals:         2       0       0       0       0       0       0
   964 ;;Total ram usage:        2 bytes
   965 ;; Hardware stack levels used: 1
   966 ;; Hardware stack levels required when called: 3
   967 ;; This function calls:
   968 ;;		_digitalWrite
   969 ;;		_soWrite
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text4
   976  0014A4                     __ptext4:
   977                           	callstack 0
   978  0014A4                     _ssdUpdate:
   979                           	callstack 27
   980  0014A4                     
   981                           ;ssd.c: 54:     digitalWrite(PIN_D0,0);
   982  0014A4  0E00               	movlw	0
   983  0014A6  6E02               	movwf	(digitalWrite@pin+1)^0,c
   984  0014A8  0E18               	movlw	24
   985  0014AA  6E01               	movwf	digitalWrite@pin^0,c
   986  0014AC  0E00               	movlw	0
   987  0014AE  6E04               	movwf	(digitalWrite@value+1)^0,c
   988  0014B0  0E00               	movlw	0
   989  0014B2  6E03               	movwf	digitalWrite@value^0,c
   990  0014B4  ECE4  F006         	call	_digitalWrite	;wreg free
   991                           
   992                           ;ssd.c: 55:     digitalWrite(PIN_D1,0);
   993  0014B8  0E00               	movlw	0
   994  0014BA  6E02               	movwf	(digitalWrite@pin+1)^0,c
   995  0014BC  0E19               	movlw	25
   996  0014BE  6E01               	movwf	digitalWrite@pin^0,c
   997  0014C0  0E00               	movlw	0
   998  0014C2  6E04               	movwf	(digitalWrite@value+1)^0,c
   999  0014C4  0E00               	movlw	0
  1000  0014C6  6E03               	movwf	digitalWrite@value^0,c
  1001  0014C8  ECE4  F006         	call	_digitalWrite	;wreg free
  1002                           
  1003                           ;ssd.c: 56:     digitalWrite(PIN_D2,0);
  1004  0014CC  0E00               	movlw	0
  1005  0014CE  6E02               	movwf	(digitalWrite@pin+1)^0,c
  1006  0014D0  0E1A               	movlw	26
  1007  0014D2  6E01               	movwf	digitalWrite@pin^0,c
  1008  0014D4  0E00               	movlw	0
  1009  0014D6  6E04               	movwf	(digitalWrite@value+1)^0,c
  1010  0014D8  0E00               	movlw	0
  1011  0014DA  6E03               	movwf	digitalWrite@value^0,c
  1012  0014DC  ECE4  F006         	call	_digitalWrite	;wreg free
  1013                           
  1014                           ;ssd.c: 57:     digitalWrite(PIN_D3,0);
  1015  0014E0  0E00               	movlw	0
  1016  0014E2  6E02               	movwf	(digitalWrite@pin+1)^0,c
  1017  0014E4  0E1B               	movlw	27
  1018  0014E6  6E01               	movwf	digitalWrite@pin^0,c
  1019  0014E8  0E00               	movlw	0
  1020  0014EA  6E04               	movwf	(digitalWrite@value+1)^0,c
  1021  0014EC  0E00               	movlw	0
  1022  0014EE  6E03               	movwf	digitalWrite@value^0,c
  1023  0014F0  ECE4  F006         	call	_digitalWrite	;wreg free
  1024                           
  1025                           ;ssd.c: 60:     soWrite(0x00);
  1026  0014F4  0E00               	movlw	0
  1027  0014F6  6E08               	movwf	(soWrite@value+1)^0,c
  1028  0014F8  0E00               	movlw	0
  1029  0014FA  6E07               	movwf	soWrite@value^0,c
  1030  0014FC  EC12  F010         	call	_soWrite	;wreg free
  1031                           
  1032                           ;ssd.c: 62:     switch (display)
  1033  001500  EFEA  F00A         	goto	l2649
  1034  001504                     l2621:
  1035                           
  1036                           ;ssd.c: 65:             soWrite(valor[v0]);
  1037  001504  0E01               	movlw	low _valor
  1038  001506  2442               	addwf	_v0^0,w,c
  1039  001508  6EF6               	movwf	tblptrl,c
  1040  00150A  6AF7               	clrf	tblptrh,c
  1041  00150C  0E06               	movlw	high _valor
  1042  00150E  22F7               	addwfc	tblptrh,f,c
  1043  001510                     	if	0	;There are less than 3 active tblptr bytes
  1044  001510                     	endif
  1045  001510  0008               	tblrd		*
  1046  001512  50F5               	movf	tablat,w,c
  1047  001514  6E07               	movwf	soWrite@value^0,c
  1048  001516  6A08               	clrf	(soWrite@value+1)^0,c
  1049  001518  EC12  F010         	call	_soWrite	;wreg free
  1050  00151C                     
  1051                           ;ssd.c: 66:             digitalWrite(PIN_D0,1);
  1052  00151C  0E00               	movlw	0
  1053  00151E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  1054  001520  0E18               	movlw	24
  1055  001522  6E01               	movwf	digitalWrite@pin^0,c
  1056  001524  0E00               	movlw	0
  1057  001526  6E04               	movwf	(digitalWrite@value+1)^0,c
  1058  001528  0E01               	movlw	1
  1059  00152A  6E03               	movwf	digitalWrite@value^0,c
  1060  00152C  ECE4  F006         	call	_digitalWrite	;wreg free
  1061  001530                     
  1062                           ;ssd.c: 67:             display = 1;
  1063  001530  0E01               	movlw	1
  1064  001532  6E43               	movwf	_display^0,c
  1065                           
  1066                           ;ssd.c: 68:             break;
  1067  001534  EF07  F00B         	goto	l423
  1068  001538                     l2627:
  1069                           
  1070                           ;ssd.c: 71:             soWrite(valor[v1]);
  1071  001538  0E01               	movlw	low _valor
  1072  00153A  2441               	addwf	_v1^0,w,c
  1073  00153C  6EF6               	movwf	tblptrl,c
  1074  00153E  6AF7               	clrf	tblptrh,c
  1075  001540  0E06               	movlw	high _valor
  1076  001542  22F7               	addwfc	tblptrh,f,c
  1077  001544                     	if	0	;There are less than 3 active tblptr bytes
  1078  001544                     	endif
  1079  001544  0008               	tblrd		*
  1080  001546  50F5               	movf	tablat,w,c
  1081  001548  6E07               	movwf	soWrite@value^0,c
  1082  00154A  6A08               	clrf	(soWrite@value+1)^0,c
  1083  00154C  EC12  F010         	call	_soWrite	;wreg free
  1084  001550                     
  1085                           ;ssd.c: 72:             digitalWrite(PIN_D1,1);
  1086  001550  0E00               	movlw	0
  1087  001552  6E02               	movwf	(digitalWrite@pin+1)^0,c
  1088  001554  0E19               	movlw	25
  1089  001556  6E01               	movwf	digitalWrite@pin^0,c
  1090  001558  0E00               	movlw	0
  1091  00155A  6E04               	movwf	(digitalWrite@value+1)^0,c
  1092  00155C  0E01               	movlw	1
  1093  00155E  6E03               	movwf	digitalWrite@value^0,c
  1094  001560  ECE4  F006         	call	_digitalWrite	;wreg free
  1095  001564                     
  1096                           ;ssd.c: 73:             display = 2;
  1097  001564  0E02               	movlw	2
  1098  001566  6E43               	movwf	_display^0,c
  1099                           
  1100                           ;ssd.c: 74:             break;
  1101  001568  EF07  F00B         	goto	l423
  1102  00156C                     l2633:
  1103                           
  1104                           ;ssd.c: 77:             soWrite(valor[v2]);
  1105  00156C  0E01               	movlw	low _valor
  1106  00156E  2440               	addwf	_v2^0,w,c
  1107  001570  6EF6               	movwf	tblptrl,c
  1108  001572  6AF7               	clrf	tblptrh,c
  1109  001574  0E06               	movlw	high _valor
  1110  001576  22F7               	addwfc	tblptrh,f,c
  1111  001578                     	if	0	;There are less than 3 active tblptr bytes
  1112  001578                     	endif
  1113  001578  0008               	tblrd		*
  1114  00157A  50F5               	movf	tablat,w,c
  1115  00157C  6E07               	movwf	soWrite@value^0,c
  1116  00157E  6A08               	clrf	(soWrite@value+1)^0,c
  1117  001580  EC12  F010         	call	_soWrite	;wreg free
  1118  001584                     
  1119                           ;ssd.c: 78:             digitalWrite(PIN_D2,1);
  1120  001584  0E00               	movlw	0
  1121  001586  6E02               	movwf	(digitalWrite@pin+1)^0,c
  1122  001588  0E1A               	movlw	26
  1123  00158A  6E01               	movwf	digitalWrite@pin^0,c
  1124  00158C  0E00               	movlw	0
  1125  00158E  6E04               	movwf	(digitalWrite@value+1)^0,c
  1126  001590  0E01               	movlw	1
  1127  001592  6E03               	movwf	digitalWrite@value^0,c
  1128  001594  ECE4  F006         	call	_digitalWrite	;wreg free
  1129  001598                     
  1130                           ;ssd.c: 79:             display = 3;
  1131  001598  0E03               	movlw	3
  1132  00159A  6E43               	movwf	_display^0,c
  1133                           
  1134                           ;ssd.c: 80:             break;
  1135  00159C  EF07  F00B         	goto	l423
  1136  0015A0                     l2639:
  1137                           
  1138                           ;ssd.c: 83:             soWrite(valor[v3]);
  1139  0015A0  0E01               	movlw	low _valor
  1140  0015A2  243F               	addwf	_v3^0,w,c
  1141  0015A4  6EF6               	movwf	tblptrl,c
  1142  0015A6  6AF7               	clrf	tblptrh,c
  1143  0015A8  0E06               	movlw	high _valor
  1144  0015AA  22F7               	addwfc	tblptrh,f,c
  1145  0015AC                     	if	0	;There are less than 3 active tblptr bytes
  1146  0015AC                     	endif
  1147  0015AC  0008               	tblrd		*
  1148  0015AE  50F5               	movf	tablat,w,c
  1149  0015B0  6E07               	movwf	soWrite@value^0,c
  1150  0015B2  6A08               	clrf	(soWrite@value+1)^0,c
  1151  0015B4  EC12  F010         	call	_soWrite	;wreg free
  1152  0015B8                     
  1153                           ;ssd.c: 84:             digitalWrite(PIN_D3,1);
  1154  0015B8  0E00               	movlw	0
  1155  0015BA  6E02               	movwf	(digitalWrite@pin+1)^0,c
  1156  0015BC  0E1B               	movlw	27
  1157  0015BE  6E01               	movwf	digitalWrite@pin^0,c
  1158  0015C0  0E00               	movlw	0
  1159  0015C2  6E04               	movwf	(digitalWrite@value+1)^0,c
  1160  0015C4  0E01               	movlw	1
  1161  0015C6  6E03               	movwf	digitalWrite@value^0,c
  1162  0015C8  ECE4  F006         	call	_digitalWrite	;wreg free
  1163  0015CC                     l2643:
  1164                           
  1165                           ;ssd.c: 85:             display = 0;
  1166  0015CC  0E00               	movlw	0
  1167  0015CE  6E43               	movwf	_display^0,c
  1168                           
  1169                           ;ssd.c: 86:             break;
  1170  0015D0  EF07  F00B         	goto	l423
  1171  0015D4                     l2649:
  1172  0015D4  5043               	movf	_display^0,w,c
  1173  0015D6  6E0A               	movwf	??_ssdUpdate^0,c
  1174  0015D8  6A0B               	clrf	(??_ssdUpdate+1)^0,c
  1175                           
  1176                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1177                           ; Switch size 1, requested type "simple"
  1178                           ; Number of cases is 1, Range of values is 0 to 0
  1179                           ; switch strategies available:
  1180                           ; Name         Instructions Cycles
  1181                           ; simple_byte            4     3 (average)
  1182                           ;	Chosen strategy is simple_byte
  1183  0015DA  500B               	movf	(??_ssdUpdate+1)^0,w,c
  1184  0015DC  0A00               	xorlw	0	; case 0
  1185  0015DE  B4D8               	btfsc	status,2,c
  1186  0015E0  EFF4  F00A         	goto	l3005
  1187  0015E4  EFE6  F00A         	goto	l2643
  1188  0015E8                     l3005:
  1189                           
  1190                           ; Switch size 1, requested type "simple"
  1191                           ; Number of cases is 4, Range of values is 0 to 3
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte           13     7 (average)
  1195                           ;	Chosen strategy is simple_byte
  1196  0015E8  500A               	movf	??_ssdUpdate^0,w,c
  1197  0015EA  0A00               	xorlw	0	; case 0
  1198  0015EC  B4D8               	btfsc	status,2,c
  1199  0015EE  EF82  F00A         	goto	l2621
  1200  0015F2  0A01               	xorlw	1	; case 1
  1201  0015F4  B4D8               	btfsc	status,2,c
  1202  0015F6  EF9C  F00A         	goto	l2627
  1203  0015FA  0A03               	xorlw	3	; case 2
  1204  0015FC  B4D8               	btfsc	status,2,c
  1205  0015FE  EFB6  F00A         	goto	l2633
  1206  001602  0A01               	xorlw	1	; case 3
  1207  001604  B4D8               	btfsc	status,2,c
  1208  001606  EFD0  F00A         	goto	l2639
  1209  00160A  EFE6  F00A         	goto	l2643
  1210  00160E                     l423:
  1211  00160E  0012               	return		;funcret
  1212  001610                     __end_of_ssdUpdate:
  1213                           	callstack 0
  1214                           
  1215 ;; *************** function _ssdInit *****************
  1216 ;; Defined at:
  1217 ;;		line 94 in file "ssd.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;		None
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1231 ;;      Params:         0       0       0       0       0       0       0
  1232 ;;      Locals:         0       0       0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0
  1234 ;;      Totals:         0       0       0       0       0       0       0
  1235 ;;Total ram usage:        0 bytes
  1236 ;; Hardware stack levels used: 1
  1237 ;; Hardware stack levels required when called: 2
  1238 ;; This function calls:
  1239 ;;		_pinMode
  1240 ;;		_soInit
  1241 ;; This function is called by:
  1242 ;;		_main
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text5
  1247  001F28                     __ptext5:
  1248                           	callstack 0
  1249  001F28                     _ssdInit:
  1250                           	callstack 28
  1251  001F28                     
  1252                           ;ssd.c: 96:     pinMode(PIN_D0, 0);
  1253  001F28  0E00               	movlw	0
  1254  001F2A  6E02               	movwf	(pinMode@pin+1)^0,c
  1255  001F2C  0E18               	movlw	24
  1256  001F2E  6E01               	movwf	pinMode@pin^0,c
  1257  001F30  0E00               	movlw	0
  1258  001F32  6E04               	movwf	(pinMode@type+1)^0,c
  1259  001F34  0E00               	movlw	0
  1260  001F36  6E03               	movwf	pinMode@type^0,c
  1261  001F38  EC0B  F008         	call	_pinMode	;wreg free
  1262                           
  1263                           ;ssd.c: 97:     pinMode(PIN_D1, 0);
  1264  001F3C  0E00               	movlw	0
  1265  001F3E  6E02               	movwf	(pinMode@pin+1)^0,c
  1266  001F40  0E19               	movlw	25
  1267  001F42  6E01               	movwf	pinMode@pin^0,c
  1268  001F44  0E00               	movlw	0
  1269  001F46  6E04               	movwf	(pinMode@type+1)^0,c
  1270  001F48  0E00               	movlw	0
  1271  001F4A  6E03               	movwf	pinMode@type^0,c
  1272  001F4C  EC0B  F008         	call	_pinMode	;wreg free
  1273                           
  1274                           ;ssd.c: 98:     pinMode(PIN_D2, 0);
  1275  001F50  0E00               	movlw	0
  1276  001F52  6E02               	movwf	(pinMode@pin+1)^0,c
  1277  001F54  0E1A               	movlw	26
  1278  001F56  6E01               	movwf	pinMode@pin^0,c
  1279  001F58  0E00               	movlw	0
  1280  001F5A  6E04               	movwf	(pinMode@type+1)^0,c
  1281  001F5C  0E00               	movlw	0
  1282  001F5E  6E03               	movwf	pinMode@type^0,c
  1283  001F60  EC0B  F008         	call	_pinMode	;wreg free
  1284                           
  1285                           ;ssd.c: 99:     pinMode(PIN_D3, 0);
  1286  001F64  0E00               	movlw	0
  1287  001F66  6E02               	movwf	(pinMode@pin+1)^0,c
  1288  001F68  0E1B               	movlw	27
  1289  001F6A  6E01               	movwf	pinMode@pin^0,c
  1290  001F6C  0E00               	movlw	0
  1291  001F6E  6E04               	movwf	(pinMode@type+1)^0,c
  1292  001F70  0E00               	movlw	0
  1293  001F72  6E03               	movwf	pinMode@type^0,c
  1294  001F74  EC0B  F008         	call	_pinMode	;wreg free
  1295                           
  1296                           ;ssd.c: 102:     soInit();
  1297  001F78  EC7E  F010         	call	_soInit	;wreg free
  1298  001F7C  0012               	return		;funcret
  1299  001F7E                     __end_of_ssdInit:
  1300                           	callstack 0
  1301                           
  1302 ;; *************** function _serialcom *****************
  1303 ;; Defined at:
  1304 ;;		line 103 in file "main.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  2  522[None  ] int 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1318 ;;      Params:         0       0       0       0       0       0       0
  1319 ;;      Locals:         4       0       0       0       0       0       0
  1320 ;;      Temps:          2       0       0       0       0       0       0
  1321 ;;      Totals:         6       0       0       0       0       0       0
  1322 ;;Total ram usage:        6 bytes
  1323 ;; Hardware stack levels used: 1
  1324 ;; Hardware stack levels required when called: 6
  1325 ;; This function calls:
  1326 ;;		___lldiv
  1327 ;;		___llmod
  1328 ;;		___lmul
  1329 ;;		_adcRead
  1330 ;;		_lcdCommand
  1331 ;;		_lcdString
  1332 ;;		_serialRead
  1333 ;;		_serialSend
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text6
  1340  000694                     __ptext6:
  1341                           	callstack 0
  1342  000694                     _serialcom:
  1343                           	callstack 24
  1344  000694                     
  1345                           ;main.c: 104:     op = serialRead();
  1346  000694  ECEB  F010         	call	_serialRead	;wreg free
  1347  000698  6E3E               	movwf	_op^0,c
  1348  00069A                     
  1349                           ;main.c: 105:     if (op != 0) {
  1350  00069A  503E               	movf	_op^0,w,c
  1351  00069C  B4D8               	btfsc	status,2,c
  1352  00069E  EF53  F003         	goto	u2271
  1353  0006A2  EF55  F003         	goto	u2270
  1354  0006A6                     u2271:
  1355  0006A6  EF8C  F004         	goto	l2795
  1356  0006AA                     u2270:
  1357  0006AA  EF6F  F004         	goto	l2793
  1358  0006AE                     l2749:
  1359                           
  1360                           ;main.c: 109:                 lcdCommand(0x80);
  1361  0006AE  0E80               	movlw	128
  1362  0006B0  EC73  F011         	call	_lcdCommand
  1363  0006B4                     
  1364                           ;main.c: 110:                 lcdString("RUA XV  ");
  1365  0006B4  0E43               	movlw	low STR_2
  1366  0006B6  6E0F               	movwf	lcdString@msg^0,c
  1367  0006B8  0E06               	movlw	high STR_2
  1368  0006BA  6E10               	movwf	(lcdString@msg+1)^0,c
  1369  0006BC  ECBF  F00F         	call	_lcdString	;wreg free
  1370  0006C0                     
  1371                           ;main.c: 111:                 lcdCommand(0xC0);
  1372  0006C0  0EC0               	movlw	192
  1373  0006C2  EC73  F011         	call	_lcdCommand
  1374  0006C6                     
  1375                           ;main.c: 112:                 lcdString("L: 060");
  1376  0006C6  0E81               	movlw	low STR_11
  1377  0006C8  6E0F               	movwf	lcdString@msg^0,c
  1378  0006CA  0E06               	movlw	high STR_11
  1379  0006CC  6E10               	movwf	(lcdString@msg+1)^0,c
  1380  0006CE  ECBF  F00F         	call	_lcdString	;wreg free
  1381  0006D2                     
  1382                           ;main.c: 113:                 limite = 60;
  1383  0006D2  0E3C               	movlw	60
  1384  0006D4  6E32               	movwf	_limite^0,c
  1385  0006D6  0E00               	movlw	0
  1386  0006D8  6E33               	movwf	(_limite+1)^0,c
  1387  0006DA  0E00               	movlw	0
  1388  0006DC  6E34               	movwf	(_limite+2)^0,c
  1389  0006DE  0E00               	movlw	0
  1390  0006E0  6E35               	movwf	(_limite+3)^0,c
  1391  0006E2                     
  1392                           ;main.c: 114:                 multa = 100 + ((pot * 10) / 100);
  1393  0006E2  C046  F001         	movff	_pot,___lmul@multiplier
  1394  0006E6  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  1395  0006EA  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  1396  0006EE  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  1397  0006F2  0E0A               	movlw	10
  1398  0006F4  6E05               	movwf	___lmul@multiplicand^0,c
  1399  0006F6  0E00               	movlw	0
  1400  0006F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1401  0006FA  0E00               	movlw	0
  1402  0006FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1403  0006FE  0E00               	movlw	0
  1404  000700  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1405  000702  ECD4  F00E         	call	___lmul	;wreg free
  1406  000706  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1407  00070A  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1408  00070E  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1409  000712  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1410  000716  0E64               	movlw	100
  1411  000718  6E11               	movwf	___lldiv@divisor^0,c
  1412  00071A  0E00               	movlw	0
  1413  00071C  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1414  00071E  0E00               	movlw	0
  1415  000720  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1416  000722  0E00               	movlw	0
  1417  000724  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1418  000726  EC7A  F00D         	call	___lldiv	;wreg free
  1419  00072A  0E64               	movlw	100
  1420  00072C  240D               	addwf	?___lldiv^0,w,c
  1421  00072E  6E36               	movwf	_multa^0,c
  1422  000730  0E00               	movlw	0
  1423  000732  200E               	addwfc	(?___lldiv+1)^0,w,c
  1424  000734  6E37               	movwf	(_multa+1)^0,c
  1425                           
  1426                           ;main.c: 115:                 break;
  1427  000736  EF8C  F004         	goto	l2795
  1428  00073A                     l2761:
  1429                           
  1430                           ;main.c: 117:                 lcdCommand(0x80);
  1431  00073A  0E80               	movlw	128
  1432  00073C  EC73  F011         	call	_lcdCommand
  1433  000740                     
  1434                           ;main.c: 118:                 lcdString("AVENIDA  ");
  1435  000740  0E27               	movlw	low STR_12
  1436  000742  6E0F               	movwf	lcdString@msg^0,c
  1437  000744  0E06               	movlw	high STR_12
  1438  000746  6E10               	movwf	(lcdString@msg+1)^0,c
  1439  000748  ECBF  F00F         	call	_lcdString	;wreg free
  1440  00074C                     
  1441                           ;main.c: 119:                 lcdCommand(0xC0);
  1442  00074C  0EC0               	movlw	192
  1443  00074E  EC73  F011         	call	_lcdCommand
  1444                           
  1445                           ;main.c: 120:                 lcdString("L: 080");
  1446  000752  0E88               	movlw	low STR_13
  1447  000754  6E0F               	movwf	lcdString@msg^0,c
  1448  000756  0E06               	movlw	high STR_13
  1449  000758  6E10               	movwf	(lcdString@msg+1)^0,c
  1450  00075A  ECBF  F00F         	call	_lcdString	;wreg free
  1451  00075E                     
  1452                           ;main.c: 121:                 limite = 80;
  1453  00075E  0E50               	movlw	80
  1454  000760  6E32               	movwf	_limite^0,c
  1455  000762  0E00               	movlw	0
  1456  000764  6E33               	movwf	(_limite+1)^0,c
  1457  000766  0E00               	movlw	0
  1458  000768  6E34               	movwf	(_limite+2)^0,c
  1459  00076A  0E00               	movlw	0
  1460  00076C  6E35               	movwf	(_limite+3)^0,c
  1461  00076E                     
  1462                           ;main.c: 122:                 multa = 200 + ((pot * 20) / 100);
  1463  00076E  C046  F001         	movff	_pot,___lmul@multiplier
  1464  000772  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  1465  000776  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  1466  00077A  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  1467  00077E  0E14               	movlw	20
  1468  000780  6E05               	movwf	___lmul@multiplicand^0,c
  1469  000782  0E00               	movlw	0
  1470  000784  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1471  000786  0E00               	movlw	0
  1472  000788  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1473  00078A  0E00               	movlw	0
  1474  00078C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1475  00078E  ECD4  F00E         	call	___lmul	;wreg free
  1476  000792  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1477  000796  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1478  00079A  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1479  00079E  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1480  0007A2  0E64               	movlw	100
  1481  0007A4  6E11               	movwf	___lldiv@divisor^0,c
  1482  0007A6  0E00               	movlw	0
  1483  0007A8  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1484  0007AA  0E00               	movlw	0
  1485  0007AC  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1486  0007AE  0E00               	movlw	0
  1487  0007B0  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1488  0007B2  EC7A  F00D         	call	___lldiv	;wreg free
  1489  0007B6  0EC8               	movlw	200
  1490  0007B8  240D               	addwf	?___lldiv^0,w,c
  1491  0007BA  6E36               	movwf	_multa^0,c
  1492  0007BC  0E00               	movlw	0
  1493  0007BE  200E               	addwfc	(?___lldiv+1)^0,w,c
  1494  0007C0  6E37               	movwf	(_multa+1)^0,c
  1495                           
  1496                           ;main.c: 123:                 break;
  1497  0007C2  EF8C  F004         	goto	l2795
  1498  0007C6                     l2771:
  1499                           
  1500                           ;main.c: 125:                 lcdCommand(0x80);
  1501  0007C6  0E80               	movlw	128
  1502  0007C8  EC73  F011         	call	_lcdCommand
  1503  0007CC                     
  1504                           ;main.c: 126:                 lcdString("BR-040  ");
  1505  0007CC  0E31               	movlw	low STR_6
  1506  0007CE  6E0F               	movwf	lcdString@msg^0,c
  1507  0007D0  0E06               	movlw	high STR_6
  1508  0007D2  6E10               	movwf	(lcdString@msg+1)^0,c
  1509  0007D4  ECBF  F00F         	call	_lcdString	;wreg free
  1510  0007D8                     
  1511                           ;main.c: 127:                 lcdCommand(0xC0);
  1512  0007D8  0EC0               	movlw	192
  1513  0007DA  EC73  F011         	call	_lcdCommand
  1514                           
  1515                           ;main.c: 128:                 lcdString("L: 100");
  1516  0007DE  0E73               	movlw	low STR_15
  1517  0007E0  6E0F               	movwf	lcdString@msg^0,c
  1518  0007E2  0E06               	movlw	high STR_15
  1519  0007E4  6E10               	movwf	(lcdString@msg+1)^0,c
  1520  0007E6  ECBF  F00F         	call	_lcdString	;wreg free
  1521  0007EA                     
  1522                           ;main.c: 129:                 limite = 100;
  1523  0007EA  0E64               	movlw	100
  1524  0007EC  6E32               	movwf	_limite^0,c
  1525  0007EE  0E00               	movlw	0
  1526  0007F0  6E33               	movwf	(_limite+1)^0,c
  1527  0007F2  0E00               	movlw	0
  1528  0007F4  6E34               	movwf	(_limite+2)^0,c
  1529  0007F6  0E00               	movlw	0
  1530  0007F8  6E35               	movwf	(_limite+3)^0,c
  1531  0007FA                     
  1532                           ;main.c: 130:                 multa = 300 + ((pot * 30) / 100);
  1533  0007FA  C046  F001         	movff	_pot,___lmul@multiplier
  1534  0007FE  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  1535  000802  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  1536  000806  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  1537  00080A  0E1E               	movlw	30
  1538  00080C  6E05               	movwf	___lmul@multiplicand^0,c
  1539  00080E  0E00               	movlw	0
  1540  000810  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1541  000812  0E00               	movlw	0
  1542  000814  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1543  000816  0E00               	movlw	0
  1544  000818  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1545  00081A  ECD4  F00E         	call	___lmul	;wreg free
  1546  00081E  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1547  000822  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1548  000826  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1549  00082A  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1550  00082E  0E64               	movlw	100
  1551  000830  6E11               	movwf	___lldiv@divisor^0,c
  1552  000832  0E00               	movlw	0
  1553  000834  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1554  000836  0E00               	movlw	0
  1555  000838  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1556  00083A  0E00               	movlw	0
  1557  00083C  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1558  00083E  EC7A  F00D         	call	___lldiv	;wreg free
  1559  000842  0E2C               	movlw	44
  1560  000844  240D               	addwf	?___lldiv^0,w,c
  1561  000846  6E36               	movwf	_multa^0,c
  1562  000848  0E01               	movlw	1
  1563  00084A  200E               	addwfc	(?___lldiv+1)^0,w,c
  1564  00084C  6E37               	movwf	(_multa+1)^0,c
  1565                           
  1566                           ;main.c: 131:                 break;
  1567  00084E  EF8C  F004         	goto	l2795
  1568  000852                     l2781:
  1569                           
  1570                           ;main.c: 133:                 lcdCommand(0x80);
  1571  000852  0E80               	movlw	128
  1572  000854  EC73  F011         	call	_lcdCommand
  1573  000858                     
  1574                           ;main.c: 134:                 lcdString("MG-301  ");
  1575  000858  0E3A               	movlw	low STR_8
  1576  00085A  6E0F               	movwf	lcdString@msg^0,c
  1577  00085C  0E06               	movlw	high STR_8
  1578  00085E  6E10               	movwf	(lcdString@msg+1)^0,c
  1579  000860  ECBF  F00F         	call	_lcdString	;wreg free
  1580  000864                     
  1581                           ;main.c: 135:                 lcdCommand(0xC0);
  1582  000864  0EC0               	movlw	192
  1583  000866  EC73  F011         	call	_lcdCommand
  1584                           
  1585                           ;main.c: 136:                 lcdString("L: 110");
  1586  00086A  0E7A               	movlw	low STR_17
  1587  00086C  6E0F               	movwf	lcdString@msg^0,c
  1588  00086E  0E06               	movlw	high STR_17
  1589  000870  6E10               	movwf	(lcdString@msg+1)^0,c
  1590  000872  ECBF  F00F         	call	_lcdString	;wreg free
  1591  000876                     
  1592                           ;main.c: 137:                 limite = 110;
  1593  000876  0E6E               	movlw	110
  1594  000878  6E32               	movwf	_limite^0,c
  1595  00087A  0E00               	movlw	0
  1596  00087C  6E33               	movwf	(_limite+1)^0,c
  1597  00087E  0E00               	movlw	0
  1598  000880  6E34               	movwf	(_limite+2)^0,c
  1599  000882  0E00               	movlw	0
  1600  000884  6E35               	movwf	(_limite+3)^0,c
  1601  000886                     
  1602                           ;main.c: 138:                 multa = 400 + ((pot * 40) / 100);
  1603  000886  C046  F001         	movff	_pot,___lmul@multiplier
  1604  00088A  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  1605  00088E  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  1606  000892  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  1607  000896  0E28               	movlw	40
  1608  000898  6E05               	movwf	___lmul@multiplicand^0,c
  1609  00089A  0E00               	movlw	0
  1610  00089C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1611  00089E  0E00               	movlw	0
  1612  0008A0  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1613  0008A2  0E00               	movlw	0
  1614  0008A4  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1615  0008A6  ECD4  F00E         	call	___lmul	;wreg free
  1616  0008AA  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1617  0008AE  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1618  0008B2  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1619  0008B6  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1620  0008BA  0E64               	movlw	100
  1621  0008BC  6E11               	movwf	___lldiv@divisor^0,c
  1622  0008BE  0E00               	movlw	0
  1623  0008C0  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1624  0008C2  0E00               	movlw	0
  1625  0008C4  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1626  0008C6  0E00               	movlw	0
  1627  0008C8  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1628  0008CA  EC7A  F00D         	call	___lldiv	;wreg free
  1629  0008CE  0E90               	movlw	144
  1630  0008D0  240D               	addwf	?___lldiv^0,w,c
  1631  0008D2  6E36               	movwf	_multa^0,c
  1632  0008D4  0E01               	movlw	1
  1633  0008D6  200E               	addwfc	(?___lldiv+1)^0,w,c
  1634  0008D8  6E37               	movwf	(_multa+1)^0,c
  1635                           
  1636                           ;main.c: 139:                 break;
  1637  0008DA  EF8C  F004         	goto	l2795
  1638  0008DE                     l2793:
  1639  0008DE  503E               	movf	_op^0,w,c
  1640  0008E0  6E23               	movwf	??_serialcom^0,c
  1641  0008E2  6A24               	clrf	(??_serialcom+1)^0,c
  1642                           
  1643                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1644                           ; Switch size 1, requested type "simple"
  1645                           ; Number of cases is 1, Range of values is 0 to 0
  1646                           ; switch strategies available:
  1647                           ; Name         Instructions Cycles
  1648                           ; simple_byte            4     3 (average)
  1649                           ;	Chosen strategy is simple_byte
  1650  0008E4  5024               	movf	(??_serialcom+1)^0,w,c
  1651  0008E6  0A00               	xorlw	0	; case 0
  1652  0008E8  B4D8               	btfsc	status,2,c
  1653  0008EA  EF79  F004         	goto	l3007
  1654  0008EE  EF8C  F004         	goto	l2795
  1655  0008F2                     l3007:
  1656                           
  1657                           ; Switch size 1, requested type "simple"
  1658                           ; Number of cases is 4, Range of values is 68 to 85
  1659                           ; switch strategies available:
  1660                           ; Name         Instructions Cycles
  1661                           ; simple_byte           13     7 (average)
  1662                           ;	Chosen strategy is simple_byte
  1663  0008F2  5023               	movf	??_serialcom^0,w,c
  1664  0008F4  0A44               	xorlw	68	; case 68
  1665  0008F6  B4D8               	btfsc	status,2,c
  1666  0008F8  EFE3  F003         	goto	l2771
  1667  0008FC  0A08               	xorlw	8	; case 76
  1668  0008FE  B4D8               	btfsc	status,2,c
  1669  000900  EF9D  F003         	goto	l2761
  1670  000904  0A1E               	xorlw	30	; case 82
  1671  000906  B4D8               	btfsc	status,2,c
  1672  000908  EF29  F004         	goto	l2781
  1673  00090C  0A07               	xorlw	7	; case 85
  1674  00090E  B4D8               	btfsc	status,2,c
  1675  000910  EF57  F003         	goto	l2749
  1676  000914  EF8C  F004         	goto	l2795
  1677  000918                     l2795:
  1678                           
  1679                           ;main.c: 144:     pot = adcRead(0);
  1680  000918  0E00               	movlw	0
  1681  00091A  6E02               	movwf	(adcRead@channel+1)^0,c
  1682  00091C  0E00               	movlw	0
  1683  00091E  6E01               	movwf	adcRead@channel^0,c
  1684  000920  ECEA  F00F         	call	_adcRead	;wreg free
  1685  000924  C001  F046         	movff	?_adcRead,_pot
  1686  000928  C002  F047         	movff	?_adcRead+1,_pot+1
  1687  00092C  0E00               	movlw	0
  1688  00092E  BE47               	btfsc	(_pot+1)^0,7,c
  1689  000930  0EFF               	movlw	-1
  1690  000932  6E48               	movwf	(_pot+2)^0,c
  1691  000934  6E49               	movwf	(_pot+3)^0,c
  1692  000936                     
  1693                           ;main.c: 145:     serialSend('V');
  1694  000936  0E56               	movlw	86
  1695  000938  EC9A  F011         	call	_serialSend
  1696  00093C                     
  1697                           ;main.c: 146:     serialSend(':');
  1698  00093C  0E3A               	movlw	58
  1699  00093E  EC9A  F011         	call	_serialSend
  1700  000942                     
  1701                           ;main.c: 147:     serialSend(' ');
  1702  000942  0E20               	movlw	32
  1703  000944  EC9A  F011         	call	_serialSend
  1704  000948                     
  1705                           ;main.c: 148:     serialSend((((200 * pot) / 1023) + 20) / 100 % 10 + 48);
  1706  000948  0EFF               	movlw	255
  1707  00094A  6E11               	movwf	___lldiv@divisor^0,c
  1708  00094C  0E03               	movlw	3
  1709  00094E  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1710  000950  0E00               	movlw	0
  1711  000952  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1712  000954  0E00               	movlw	0
  1713  000956  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1714  000958  C046  F001         	movff	_pot,___lmul@multiplier
  1715  00095C  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  1716  000960  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  1717  000964  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  1718  000968  0EC8               	movlw	200
  1719  00096A  6E05               	movwf	___lmul@multiplicand^0,c
  1720  00096C  0E00               	movlw	0
  1721  00096E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1722  000970  0E00               	movlw	0
  1723  000972  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1724  000974  0E00               	movlw	0
  1725  000976  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1726  000978  ECD4  F00E         	call	___lmul	;wreg free
  1727  00097C  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1728  000980  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1729  000984  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1730  000988  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1731  00098C  EC7A  F00D         	call	___lldiv	;wreg free
  1732  000990  0E14               	movlw	20
  1733  000992  240D               	addwf	?___lldiv^0,w,c
  1734  000994  6E25               	movwf	_serialcom$1385^0,c
  1735  000996  0E00               	movlw	0
  1736  000998  200E               	addwfc	(?___lldiv+1)^0,w,c
  1737  00099A  6E26               	movwf	(_serialcom$1385+1)^0,c
  1738  00099C  0E00               	movlw	0
  1739  00099E  200F               	addwfc	(?___lldiv+2)^0,w,c
  1740  0009A0  6E27               	movwf	(_serialcom$1385+2)^0,c
  1741  0009A2  0E00               	movlw	0
  1742  0009A4  2010               	addwfc	(?___lldiv+3)^0,w,c
  1743  0009A6  6E28               	movwf	(_serialcom$1385+3)^0,c
  1744  0009A8                     
  1745                           ;main.c: 148:     serialSend((((200 * pot) / 1023) + 20) / 100 % 10 + 48);
  1746  0009A8  0E64               	movlw	100
  1747  0009AA  6E11               	movwf	___lldiv@divisor^0,c
  1748  0009AC  0E00               	movlw	0
  1749  0009AE  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1750  0009B0  0E00               	movlw	0
  1751  0009B2  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1752  0009B4  0E00               	movlw	0
  1753  0009B6  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1754  0009B8  C025  F00D         	movff	_serialcom$1385,___lldiv@dividend
  1755  0009BC  C026  F00E         	movff	_serialcom$1385+1,___lldiv@dividend+1
  1756  0009C0  C027  F00F         	movff	_serialcom$1385+2,___lldiv@dividend+2
  1757  0009C4  C028  F010         	movff	_serialcom$1385+3,___lldiv@dividend+3
  1758  0009C8  EC7A  F00D         	call	___lldiv	;wreg free
  1759  0009CC  C00D  F01A         	movff	?___lldiv,___llmod@dividend
  1760  0009D0  C00E  F01B         	movff	?___lldiv+1,___llmod@dividend+1
  1761  0009D4  C00F  F01C         	movff	?___lldiv+2,___llmod@dividend+2
  1762  0009D8  C010  F01D         	movff	?___lldiv+3,___llmod@dividend+3
  1763  0009DC  0E0A               	movlw	10
  1764  0009DE  6E1E               	movwf	___llmod@divisor^0,c
  1765  0009E0  0E00               	movlw	0
  1766  0009E2  6E1F               	movwf	(___llmod@divisor+1)^0,c
  1767  0009E4  0E00               	movlw	0
  1768  0009E6  6E20               	movwf	(___llmod@divisor+2)^0,c
  1769  0009E8  0E00               	movlw	0
  1770  0009EA  6E21               	movwf	(___llmod@divisor+3)^0,c
  1771  0009EC  EC1A  F00E         	call	___llmod	;wreg free
  1772  0009F0  501A               	movf	?___llmod^0,w,c
  1773  0009F2  0F30               	addlw	48
  1774  0009F4  EC9A  F011         	call	_serialSend
  1775  0009F8                     
  1776                           ;main.c: 149:     serialSend((((200 * pot) / 1023) + 20) / 10 % 10 + 48);
  1777  0009F8  0EFF               	movlw	255
  1778  0009FA  6E11               	movwf	___lldiv@divisor^0,c
  1779  0009FC  0E03               	movlw	3
  1780  0009FE  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1781  000A00  0E00               	movlw	0
  1782  000A02  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1783  000A04  0E00               	movlw	0
  1784  000A06  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1785  000A08  C046  F001         	movff	_pot,___lmul@multiplier
  1786  000A0C  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  1787  000A10  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  1788  000A14  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  1789  000A18  0EC8               	movlw	200
  1790  000A1A  6E05               	movwf	___lmul@multiplicand^0,c
  1791  000A1C  0E00               	movlw	0
  1792  000A1E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1793  000A20  0E00               	movlw	0
  1794  000A22  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1795  000A24  0E00               	movlw	0
  1796  000A26  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1797  000A28  ECD4  F00E         	call	___lmul	;wreg free
  1798  000A2C  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1799  000A30  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1800  000A34  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1801  000A38  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1802  000A3C  EC7A  F00D         	call	___lldiv	;wreg free
  1803  000A40  0E14               	movlw	20
  1804  000A42  240D               	addwf	?___lldiv^0,w,c
  1805  000A44  6E25               	movwf	_serialcom$1385^0,c
  1806  000A46  0E00               	movlw	0
  1807  000A48  200E               	addwfc	(?___lldiv+1)^0,w,c
  1808  000A4A  6E26               	movwf	(_serialcom$1385+1)^0,c
  1809  000A4C  0E00               	movlw	0
  1810  000A4E  200F               	addwfc	(?___lldiv+2)^0,w,c
  1811  000A50  6E27               	movwf	(_serialcom$1385+2)^0,c
  1812  000A52  0E00               	movlw	0
  1813  000A54  2010               	addwfc	(?___lldiv+3)^0,w,c
  1814  000A56  6E28               	movwf	(_serialcom$1385+3)^0,c
  1815  000A58                     
  1816                           ;main.c: 149:     serialSend((((200 * pot) / 1023) + 20) / 10 % 10 + 48);
  1817  000A58  0E0A               	movlw	10
  1818  000A5A  6E11               	movwf	___lldiv@divisor^0,c
  1819  000A5C  0E00               	movlw	0
  1820  000A5E  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1821  000A60  0E00               	movlw	0
  1822  000A62  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1823  000A64  0E00               	movlw	0
  1824  000A66  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1825  000A68  C025  F00D         	movff	_serialcom$1385,___lldiv@dividend
  1826  000A6C  C026  F00E         	movff	_serialcom$1385+1,___lldiv@dividend+1
  1827  000A70  C027  F00F         	movff	_serialcom$1385+2,___lldiv@dividend+2
  1828  000A74  C028  F010         	movff	_serialcom$1385+3,___lldiv@dividend+3
  1829  000A78  EC7A  F00D         	call	___lldiv	;wreg free
  1830  000A7C  C00D  F01A         	movff	?___lldiv,___llmod@dividend
  1831  000A80  C00E  F01B         	movff	?___lldiv+1,___llmod@dividend+1
  1832  000A84  C00F  F01C         	movff	?___lldiv+2,___llmod@dividend+2
  1833  000A88  C010  F01D         	movff	?___lldiv+3,___llmod@dividend+3
  1834  000A8C  0E0A               	movlw	10
  1835  000A8E  6E1E               	movwf	___llmod@divisor^0,c
  1836  000A90  0E00               	movlw	0
  1837  000A92  6E1F               	movwf	(___llmod@divisor+1)^0,c
  1838  000A94  0E00               	movlw	0
  1839  000A96  6E20               	movwf	(___llmod@divisor+2)^0,c
  1840  000A98  0E00               	movlw	0
  1841  000A9A  6E21               	movwf	(___llmod@divisor+3)^0,c
  1842  000A9C  EC1A  F00E         	call	___llmod	;wreg free
  1843  000AA0  501A               	movf	?___llmod^0,w,c
  1844  000AA2  0F30               	addlw	48
  1845  000AA4  EC9A  F011         	call	_serialSend
  1846  000AA8                     
  1847                           ;main.c: 150:     serialSend((((200 * pot) / 1023) + 20) / 1 % 10 + 48);
  1848  000AA8  0EFF               	movlw	255
  1849  000AAA  6E11               	movwf	___lldiv@divisor^0,c
  1850  000AAC  0E03               	movlw	3
  1851  000AAE  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1852  000AB0  0E00               	movlw	0
  1853  000AB2  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1854  000AB4  0E00               	movlw	0
  1855  000AB6  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1856  000AB8  C046  F001         	movff	_pot,___lmul@multiplier
  1857  000ABC  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  1858  000AC0  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  1859  000AC4  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  1860  000AC8  0EC8               	movlw	200
  1861  000ACA  6E05               	movwf	___lmul@multiplicand^0,c
  1862  000ACC  0E00               	movlw	0
  1863  000ACE  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1864  000AD0  0E00               	movlw	0
  1865  000AD2  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1866  000AD4  0E00               	movlw	0
  1867  000AD6  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1868  000AD8  ECD4  F00E         	call	___lmul	;wreg free
  1869  000ADC  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1870  000AE0  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1871  000AE4  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1872  000AE8  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1873  000AEC  EC7A  F00D         	call	___lldiv	;wreg free
  1874  000AF0  0E14               	movlw	20
  1875  000AF2  240D               	addwf	?___lldiv^0,w,c
  1876  000AF4  6E1A               	movwf	___llmod@dividend^0,c
  1877  000AF6  0E00               	movlw	0
  1878  000AF8  200E               	addwfc	(?___lldiv+1)^0,w,c
  1879  000AFA  6E1B               	movwf	(___llmod@dividend+1)^0,c
  1880  000AFC  0E00               	movlw	0
  1881  000AFE  200F               	addwfc	(?___lldiv+2)^0,w,c
  1882  000B00  6E1C               	movwf	(___llmod@dividend+2)^0,c
  1883  000B02  0E00               	movlw	0
  1884  000B04  2010               	addwfc	(?___lldiv+3)^0,w,c
  1885  000B06  6E1D               	movwf	(___llmod@dividend+3)^0,c
  1886  000B08  0E0A               	movlw	10
  1887  000B0A  6E1E               	movwf	___llmod@divisor^0,c
  1888  000B0C  0E00               	movlw	0
  1889  000B0E  6E1F               	movwf	(___llmod@divisor+1)^0,c
  1890  000B10  0E00               	movlw	0
  1891  000B12  6E20               	movwf	(___llmod@divisor+2)^0,c
  1892  000B14  0E00               	movlw	0
  1893  000B16  6E21               	movwf	(___llmod@divisor+3)^0,c
  1894  000B18  EC1A  F00E         	call	___llmod	;wreg free
  1895  000B1C  501A               	movf	?___llmod^0,w,c
  1896  000B1E  0F30               	addlw	48
  1897  000B20  EC9A  F011         	call	_serialSend
  1898                           
  1899                           ;main.c: 151:     serialSend('\n');
  1900  000B24  0E0A               	movlw	10
  1901  000B26  EC9A  F011         	call	_serialSend
  1902  000B2A  0012               	return		;funcret
  1903  000B2C                     __end_of_serialcom:
  1904                           	callstack 0
  1905                           
  1906 ;; *************** function _serialSend *****************
  1907 ;; Defined at:
  1908 ;;		line 25 in file "serial.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;  c               1    wreg     unsigned char 
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;  c               1    0[COMRAM] unsigned char 
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1922 ;;      Params:         0       0       0       0       0       0       0
  1923 ;;      Locals:         1       0       0       0       0       0       0
  1924 ;;      Temps:          0       0       0       0       0       0       0
  1925 ;;      Totals:         1       0       0       0       0       0       0
  1926 ;;Total ram usage:        1 bytes
  1927 ;; Hardware stack levels used: 1
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_serialcom
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text7
  1936  002334                     __ptext7:
  1937                           	callstack 0
  1938  002334                     _serialSend:
  1939                           	callstack 29
  1940                           
  1941                           ;incstack = 0
  1942                           ;serialSend@c stored from wreg
  1943  002334  6E01               	movwf	serialSend@c^0,c
  1944  002336                     l357:
  1945  002336  A89E               	btfss	158,4,c	;volatile
  1946  002338  EFA0  F011         	goto	u2071
  1947  00233C  EFA2  F011         	goto	u2070
  1948  002340                     u2071:
  1949  002340  EF9B  F011         	goto	l357
  1950  002344                     u2070:
  1951  002344                     
  1952                           ;serial.c: 27:     TXREG = c;
  1953  002344  C001  FFAD         	movff	serialSend@c,4013	;volatile
  1954  002348  0012               	return		;funcret
  1955  00234A                     __end_of_serialSend:
  1956                           	callstack 0
  1957                           
  1958 ;; *************** function _serialRead *****************
  1959 ;; Defined at:
  1960 ;;		line 30 in file "serial.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;  resp            1    0[COMRAM] unsigned char 
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      unsigned char 
  1967 ;; Registers used:
  1968 ;;		wreg, status,2, status,0
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1974 ;;      Params:         0       0       0       0       0       0       0
  1975 ;;      Locals:         1       0       0       0       0       0       0
  1976 ;;      Temps:          0       0       0       0       0       0       0
  1977 ;;      Totals:         1       0       0       0       0       0       0
  1978 ;;Total ram usage:        1 bytes
  1979 ;; Hardware stack levels used: 1
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_serialcom
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text8
  1988  0021D6                     __ptext8:
  1989                           	callstack 0
  1990  0021D6                     _serialRead:
  1991                           	callstack 29
  1992  0021D6                     
  1993                           ;serial.c: 31:     char resp = 0;
  1994  0021D6  0E00               	movlw	0
  1995  0021D8  6E01               	movwf	serialRead@resp^0,c
  1996  0021DA                     
  1997                           ;serial.c: 33:     if (((RCSTA) & (1<<(1))))
  1998  0021DA  A2AB               	btfss	171,1,c	;volatile
  1999  0021DC  EFF2  F010         	goto	u2081
  2000  0021E0  EFF4  F010         	goto	u2080
  2001  0021E4                     u2081:
  2002  0021E4  EFF6  F010         	goto	l2461
  2003  0021E8                     u2080:
  2004  0021E8                     
  2005                           ;serial.c: 34:     {;serial.c: 35:         ((RCSTA) &= ~(1<<(4)));
  2006  0021E8  98AB               	bcf	171,4,c	;volatile
  2007                           
  2008                           ;serial.c: 36:         ((RCSTA) |= (1<<(4)));
  2009  0021EA  88AB               	bsf	171,4,c	;volatile
  2010  0021EC                     l2461:
  2011                           
  2012                           ;serial.c: 39:     if (((PIR1) & (1<<(5))))
  2013  0021EC  AA9E               	btfss	158,5,c	;volatile
  2014  0021EE  EFFB  F010         	goto	u2091
  2015  0021F2  EFFD  F010         	goto	u2090
  2016  0021F6                     u2091:
  2017  0021F6  EFFF  F010         	goto	l2465
  2018  0021FA                     u2090:
  2019  0021FA                     
  2020                           ;serial.c: 40:     {;serial.c: 41:         resp = RCREG;
  2021  0021FA  CFAE F001          	movff	4014,serialRead@resp	;volatile
  2022  0021FE                     l2465:
  2023                           
  2024                           ;serial.c: 43:     return resp;
  2025  0021FE  5001               	movf	serialRead@resp^0,w,c
  2026  002200  0012               	return		;funcret
  2027  002202                     __end_of_serialRead:
  2028                           	callstack 0
  2029                           
  2030 ;; *************** function _serialInit *****************
  2031 ;; Defined at:
  2032 ;;		line 48 in file "serial.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;		None
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;		None
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2046 ;;      Params:         0       0       0       0       0       0       0
  2047 ;;      Locals:         0       0       0       0       0       0       0
  2048 ;;      Temps:          0       0       0       0       0       0       0
  2049 ;;      Totals:         0       0       0       0       0       0       0
  2050 ;;Total ram usage:        0 bytes
  2051 ;; Hardware stack levels used: 1
  2052 ;; This function calls:
  2053 ;;		Nothing
  2054 ;; This function is called by:
  2055 ;;		_main
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text9
  2060  002304                     __ptext9:
  2061                           	callstack 0
  2062  002304                     _serialInit:
  2063                           	callstack 30
  2064  002304                     
  2065                           ;serial.c: 49:     TXSTA = 0b00101100;
  2066  002304  0E2C               	movlw	44
  2067  002306  6EAC               	movwf	172,c	;volatile
  2068                           
  2069                           ;serial.c: 50:     RCSTA = 0b10010000;
  2070  002308  0E90               	movlw	144
  2071  00230A  6EAB               	movwf	171,c	;volatile
  2072                           
  2073                           ;serial.c: 51:     BAUDCON = 0b00001000;
  2074  00230C  0E08               	movlw	8
  2075  00230E  6EB8               	movwf	184,c	;volatile
  2076                           
  2077                           ;serial.c: 52:     SPBRGH = 0;
  2078  002310  0E00               	movlw	0
  2079  002312  6EB0               	movwf	176,c	;volatile
  2080                           
  2081                           ;serial.c: 53:     SPBRG = 34;
  2082  002314  0E22               	movlw	34
  2083  002316  6EAF               	movwf	175,c	;volatile
  2084  002318                     
  2085                           ;serial.c: 54:     ((TRISC) |= (1<<(6)));
  2086  002318  8C94               	bsf	148,6,c	;volatile
  2087  00231A                     
  2088                           ;serial.c: 55:     ((TRISC) |= (1<<(7)));
  2089  00231A  8E94               	bsf	148,7,c	;volatile
  2090  00231C  0012               	return		;funcret
  2091  00231E                     __end_of_serialInit:
  2092                           	callstack 0
  2093                           
  2094 ;; *************** function _levelocidade *****************
  2095 ;; Defined at:
  2096 ;;		line 27 in file "main.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  valantigo       4   34[COMRAM] unsigned long 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2110 ;;      Params:         0       0       0       0       0       0       0
  2111 ;;      Locals:         8       0       0       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0       0       0
  2113 ;;      Totals:         8       0       0       0       0       0       0
  2114 ;;Total ram usage:        8 bytes
  2115 ;; Hardware stack levels used: 1
  2116 ;; Hardware stack levels required when called: 6
  2117 ;; This function calls:
  2118 ;;		___lldiv
  2119 ;;		___llmod
  2120 ;;		___lmul
  2121 ;;		_adcRead
  2122 ;;		_lcdChar
  2123 ;;		_lcdPosition
  2124 ;;		_lcdString
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text10
  2131  001264                     __ptext10:
  2132                           	callstack 0
  2133  001264                     _levelocidade:
  2134                           	callstack 24
  2135  001264                     
  2136                           ;main.c: 28:     unsigned long int valantigo;;main.c: 29:     pot = adcRead(0);
  2137  001264  0E00               	movlw	0
  2138  001266  6E02               	movwf	(adcRead@channel+1)^0,c
  2139  001268  0E00               	movlw	0
  2140  00126A  6E01               	movwf	adcRead@channel^0,c
  2141  00126C  ECEA  F00F         	call	_adcRead	;wreg free
  2142  001270  C001  F046         	movff	?_adcRead,_pot
  2143  001274  C002  F047         	movff	?_adcRead+1,_pot+1
  2144  001278  0E00               	movlw	0
  2145  00127A  BE47               	btfsc	(_pot+1)^0,7,c
  2146  00127C  0EFF               	movlw	-1
  2147  00127E  6E48               	movwf	(_pot+2)^0,c
  2148  001280  6E49               	movwf	(_pot+3)^0,c
  2149  001282                     
  2150                           ;main.c: 30:     if (valantigo != pot) {
  2151  001282  5046               	movf	_pot^0,w,c
  2152  001284  1823               	xorwf	levelocidade@valantigo^0,w,c
  2153  001286  E10F               	bnz	u2250
  2154  001288  5047               	movf	(_pot+1)^0,w,c
  2155  00128A  1824               	xorwf	(levelocidade@valantigo+1)^0,w,c
  2156  00128C  E10C               	bnz	u2250
  2157  00128E  5048               	movf	(_pot+2)^0,w,c
  2158  001290  1825               	xorwf	(levelocidade@valantigo+2)^0,w,c
  2159  001292  E109               	bnz	u2250
  2160  001294  5049               	movf	(_pot+3)^0,w,c
  2161  001296  1826               	xorwf	(levelocidade@valantigo+3)^0,w,c
  2162  001298  B4D8               	btfsc	status,2,c
  2163  00129A  EF51  F009         	goto	u2251
  2164  00129E  EF53  F009         	goto	u2250
  2165  0012A2                     u2251:
  2166  0012A2  EF51  F00A         	goto	l2687
  2167  0012A6                     u2250:
  2168  0012A6                     
  2169                           ;main.c: 31:         lcdPosition(1, 7);
  2170  0012A6  0E00               	movlw	0
  2171  0012A8  6E10               	movwf	(lcdPosition@line+1)^0,c
  2172  0012AA  0E01               	movlw	1
  2173  0012AC  6E0F               	movwf	lcdPosition@line^0,c
  2174  0012AE  0E00               	movlw	0
  2175  0012B0  6E12               	movwf	(lcdPosition@col+1)^0,c
  2176  0012B2  0E07               	movlw	7
  2177  0012B4  6E11               	movwf	lcdPosition@col^0,c
  2178  0012B6  EC9D  F010         	call	_lcdPosition	;wreg free
  2179  0012BA                     
  2180                           ;main.c: 32:         lcdString("V:");
  2181  0012BA  0E8F               	movlw	low STR_1
  2182  0012BC  6E0F               	movwf	lcdString@msg^0,c
  2183  0012BE  0E06               	movlw	high STR_1
  2184  0012C0  6E10               	movwf	(lcdString@msg+1)^0,c
  2185  0012C2  ECBF  F00F         	call	_lcdString	;wreg free
  2186  0012C6                     
  2187                           ;main.c: 33:         lcdChar((((200 * pot) / 1023) + 20) / 100 % 10 + 48);
  2188  0012C6  0EFF               	movlw	255
  2189  0012C8  6E11               	movwf	___lldiv@divisor^0,c
  2190  0012CA  0E03               	movlw	3
  2191  0012CC  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2192  0012CE  0E00               	movlw	0
  2193  0012D0  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2194  0012D2  0E00               	movlw	0
  2195  0012D4  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2196  0012D6  C046  F001         	movff	_pot,___lmul@multiplier
  2197  0012DA  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  2198  0012DE  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  2199  0012E2  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  2200  0012E6  0EC8               	movlw	200
  2201  0012E8  6E05               	movwf	___lmul@multiplicand^0,c
  2202  0012EA  0E00               	movlw	0
  2203  0012EC  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2204  0012EE  0E00               	movlw	0
  2205  0012F0  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2206  0012F2  0E00               	movlw	0
  2207  0012F4  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2208  0012F6  ECD4  F00E         	call	___lmul	;wreg free
  2209  0012FA  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2210  0012FE  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2211  001302  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2212  001306  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2213  00130A  EC7A  F00D         	call	___lldiv	;wreg free
  2214  00130E  0E14               	movlw	20
  2215  001310  240D               	addwf	?___lldiv^0,w,c
  2216  001312  6E27               	movwf	_levelocidade$1384^0,c
  2217  001314  0E00               	movlw	0
  2218  001316  200E               	addwfc	(?___lldiv+1)^0,w,c
  2219  001318  6E28               	movwf	(_levelocidade$1384+1)^0,c
  2220  00131A  0E00               	movlw	0
  2221  00131C  200F               	addwfc	(?___lldiv+2)^0,w,c
  2222  00131E  6E29               	movwf	(_levelocidade$1384+2)^0,c
  2223  001320  0E00               	movlw	0
  2224  001322  2010               	addwfc	(?___lldiv+3)^0,w,c
  2225  001324  6E2A               	movwf	(_levelocidade$1384+3)^0,c
  2226  001326                     
  2227                           ;main.c: 33:         lcdChar((((200 * pot) / 1023) + 20) / 100 % 10 + 48);
  2228  001326  0E64               	movlw	100
  2229  001328  6E11               	movwf	___lldiv@divisor^0,c
  2230  00132A  0E00               	movlw	0
  2231  00132C  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2232  00132E  0E00               	movlw	0
  2233  001330  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2234  001332  0E00               	movlw	0
  2235  001334  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2236  001336  C027  F00D         	movff	_levelocidade$1384,___lldiv@dividend
  2237  00133A  C028  F00E         	movff	_levelocidade$1384+1,___lldiv@dividend+1
  2238  00133E  C029  F00F         	movff	_levelocidade$1384+2,___lldiv@dividend+2
  2239  001342  C02A  F010         	movff	_levelocidade$1384+3,___lldiv@dividend+3
  2240  001346  EC7A  F00D         	call	___lldiv	;wreg free
  2241  00134A  C00D  F01A         	movff	?___lldiv,___llmod@dividend
  2242  00134E  C00E  F01B         	movff	?___lldiv+1,___llmod@dividend+1
  2243  001352  C00F  F01C         	movff	?___lldiv+2,___llmod@dividend+2
  2244  001356  C010  F01D         	movff	?___lldiv+3,___llmod@dividend+3
  2245  00135A  0E0A               	movlw	10
  2246  00135C  6E1E               	movwf	___llmod@divisor^0,c
  2247  00135E  0E00               	movlw	0
  2248  001360  6E1F               	movwf	(___llmod@divisor+1)^0,c
  2249  001362  0E00               	movlw	0
  2250  001364  6E20               	movwf	(___llmod@divisor+2)^0,c
  2251  001366  0E00               	movlw	0
  2252  001368  6E21               	movwf	(___llmod@divisor+3)^0,c
  2253  00136A  EC1A  F00E         	call	___llmod	;wreg free
  2254  00136E  501A               	movf	?___llmod^0,w,c
  2255  001370  0F30               	addlw	48
  2256  001372  EC64  F011         	call	_lcdChar
  2257  001376                     
  2258                           ;main.c: 34:         lcdChar((((200 * pot) / 1023) + 20) / 10 % 10 + 48);
  2259  001376  0EFF               	movlw	255
  2260  001378  6E11               	movwf	___lldiv@divisor^0,c
  2261  00137A  0E03               	movlw	3
  2262  00137C  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2263  00137E  0E00               	movlw	0
  2264  001380  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2265  001382  0E00               	movlw	0
  2266  001384  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2267  001386  C046  F001         	movff	_pot,___lmul@multiplier
  2268  00138A  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  2269  00138E  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  2270  001392  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  2271  001396  0EC8               	movlw	200
  2272  001398  6E05               	movwf	___lmul@multiplicand^0,c
  2273  00139A  0E00               	movlw	0
  2274  00139C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2275  00139E  0E00               	movlw	0
  2276  0013A0  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2277  0013A2  0E00               	movlw	0
  2278  0013A4  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2279  0013A6  ECD4  F00E         	call	___lmul	;wreg free
  2280  0013AA  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2281  0013AE  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2282  0013B2  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2283  0013B6  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2284  0013BA  EC7A  F00D         	call	___lldiv	;wreg free
  2285  0013BE  0E14               	movlw	20
  2286  0013C0  240D               	addwf	?___lldiv^0,w,c
  2287  0013C2  6E27               	movwf	_levelocidade$1384^0,c
  2288  0013C4  0E00               	movlw	0
  2289  0013C6  200E               	addwfc	(?___lldiv+1)^0,w,c
  2290  0013C8  6E28               	movwf	(_levelocidade$1384+1)^0,c
  2291  0013CA  0E00               	movlw	0
  2292  0013CC  200F               	addwfc	(?___lldiv+2)^0,w,c
  2293  0013CE  6E29               	movwf	(_levelocidade$1384+2)^0,c
  2294  0013D0  0E00               	movlw	0
  2295  0013D2  2010               	addwfc	(?___lldiv+3)^0,w,c
  2296  0013D4  6E2A               	movwf	(_levelocidade$1384+3)^0,c
  2297  0013D6                     
  2298                           ;main.c: 34:         lcdChar((((200 * pot) / 1023) + 20) / 10 % 10 + 48);
  2299  0013D6  0E0A               	movlw	10
  2300  0013D8  6E11               	movwf	___lldiv@divisor^0,c
  2301  0013DA  0E00               	movlw	0
  2302  0013DC  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2303  0013DE  0E00               	movlw	0
  2304  0013E0  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2305  0013E2  0E00               	movlw	0
  2306  0013E4  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2307  0013E6  C027  F00D         	movff	_levelocidade$1384,___lldiv@dividend
  2308  0013EA  C028  F00E         	movff	_levelocidade$1384+1,___lldiv@dividend+1
  2309  0013EE  C029  F00F         	movff	_levelocidade$1384+2,___lldiv@dividend+2
  2310  0013F2  C02A  F010         	movff	_levelocidade$1384+3,___lldiv@dividend+3
  2311  0013F6  EC7A  F00D         	call	___lldiv	;wreg free
  2312  0013FA  C00D  F01A         	movff	?___lldiv,___llmod@dividend
  2313  0013FE  C00E  F01B         	movff	?___lldiv+1,___llmod@dividend+1
  2314  001402  C00F  F01C         	movff	?___lldiv+2,___llmod@dividend+2
  2315  001406  C010  F01D         	movff	?___lldiv+3,___llmod@dividend+3
  2316  00140A  0E0A               	movlw	10
  2317  00140C  6E1E               	movwf	___llmod@divisor^0,c
  2318  00140E  0E00               	movlw	0
  2319  001410  6E1F               	movwf	(___llmod@divisor+1)^0,c
  2320  001412  0E00               	movlw	0
  2321  001414  6E20               	movwf	(___llmod@divisor+2)^0,c
  2322  001416  0E00               	movlw	0
  2323  001418  6E21               	movwf	(___llmod@divisor+3)^0,c
  2324  00141A  EC1A  F00E         	call	___llmod	;wreg free
  2325  00141E  501A               	movf	?___llmod^0,w,c
  2326  001420  0F30               	addlw	48
  2327  001422  EC64  F011         	call	_lcdChar
  2328  001426                     
  2329                           ;main.c: 35:         lcdChar((((200 * pot) / 1023) + 20) % 10 + 48);
  2330  001426  0EFF               	movlw	255
  2331  001428  6E11               	movwf	___lldiv@divisor^0,c
  2332  00142A  0E03               	movlw	3
  2333  00142C  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2334  00142E  0E00               	movlw	0
  2335  001430  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2336  001432  0E00               	movlw	0
  2337  001434  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2338  001436  C046  F001         	movff	_pot,___lmul@multiplier
  2339  00143A  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  2340  00143E  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  2341  001442  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  2342  001446  0EC8               	movlw	200
  2343  001448  6E05               	movwf	___lmul@multiplicand^0,c
  2344  00144A  0E00               	movlw	0
  2345  00144C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2346  00144E  0E00               	movlw	0
  2347  001450  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2348  001452  0E00               	movlw	0
  2349  001454  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2350  001456  ECD4  F00E         	call	___lmul	;wreg free
  2351  00145A  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2352  00145E  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2353  001462  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2354  001466  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2355  00146A  EC7A  F00D         	call	___lldiv	;wreg free
  2356  00146E  0E14               	movlw	20
  2357  001470  240D               	addwf	?___lldiv^0,w,c
  2358  001472  6E1A               	movwf	___llmod@dividend^0,c
  2359  001474  0E00               	movlw	0
  2360  001476  200E               	addwfc	(?___lldiv+1)^0,w,c
  2361  001478  6E1B               	movwf	(___llmod@dividend+1)^0,c
  2362  00147A  0E00               	movlw	0
  2363  00147C  200F               	addwfc	(?___lldiv+2)^0,w,c
  2364  00147E  6E1C               	movwf	(___llmod@dividend+2)^0,c
  2365  001480  0E00               	movlw	0
  2366  001482  2010               	addwfc	(?___lldiv+3)^0,w,c
  2367  001484  6E1D               	movwf	(___llmod@dividend+3)^0,c
  2368  001486  0E0A               	movlw	10
  2369  001488  6E1E               	movwf	___llmod@divisor^0,c
  2370  00148A  0E00               	movlw	0
  2371  00148C  6E1F               	movwf	(___llmod@divisor+1)^0,c
  2372  00148E  0E00               	movlw	0
  2373  001490  6E20               	movwf	(___llmod@divisor+2)^0,c
  2374  001492  0E00               	movlw	0
  2375  001494  6E21               	movwf	(___llmod@divisor+3)^0,c
  2376  001496  EC1A  F00E         	call	___llmod	;wreg free
  2377  00149A  501A               	movf	?___llmod^0,w,c
  2378  00149C  0F30               	addlw	48
  2379  00149E  EC64  F011         	call	_lcdChar
  2380  0014A2                     l2687:
  2381  0014A2  0012               	return		;funcret
  2382  0014A4                     __end_of_levelocidade:
  2383                           	callstack 0
  2384                           
  2385 ;; *************** function _lcdPosition *****************
  2386 ;; Defined at:
  2387 ;;		line 44 in file "lcd.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  line            2   14[COMRAM] int 
  2390 ;;  col             2   16[COMRAM] int 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      void 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2402 ;;      Params:         4       0       0       0       0       0       0
  2403 ;;      Locals:         0       0       0       0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0       0
  2405 ;;      Totals:         4       0       0       0       0       0       0
  2406 ;;Total ram usage:        4 bytes
  2407 ;; Hardware stack levels used: 1
  2408 ;; Hardware stack levels required when called: 5
  2409 ;; This function calls:
  2410 ;;		_lcdCommand
  2411 ;; This function is called by:
  2412 ;;		_levelocidade
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text11
  2417  00213A                     __ptext11:
  2418                           	callstack 0
  2419  00213A                     _lcdPosition:
  2420                           	callstack 24
  2421  00213A                     
  2422                           ;lcd.c: 45:  if (line == 0) {
  2423  00213A  500F               	movf	lcdPosition@line^0,w,c
  2424  00213C  1010               	iorwf	(lcdPosition@line+1)^0,w,c
  2425  00213E  A4D8               	btfss	status,2,c
  2426  002140  EFA4  F010         	goto	u2041
  2427  002144  EFA6  F010         	goto	u2040
  2428  002148                     u2041:
  2429  002148  EFAB  F010         	goto	l2439
  2430  00214C                     u2040:
  2431  00214C                     
  2432                           ;lcd.c: 46:   lcdCommand(0x80 + (col % 16));
  2433  00214C  5011               	movf	lcdPosition@col^0,w,c
  2434  00214E  0B0F               	andlw	15
  2435  002150  0F80               	addlw	128
  2436  002152  EC73  F011         	call	_lcdCommand
  2437  002156                     l2439:
  2438                           
  2439                           ;lcd.c: 48:  if (line == 1) {
  2440  002156  040F               	decf	lcdPosition@line^0,w,c
  2441  002158  1010               	iorwf	(lcdPosition@line+1)^0,w,c
  2442  00215A  A4D8               	btfss	status,2,c
  2443  00215C  EFB2  F010         	goto	u2051
  2444  002160  EFB4  F010         	goto	u2050
  2445  002164                     u2051:
  2446  002164  EFB9  F010         	goto	l271
  2447  002168                     u2050:
  2448  002168                     
  2449                           ;lcd.c: 49:   lcdCommand(0xC0 + (col % 16));
  2450  002168  5011               	movf	lcdPosition@col^0,w,c
  2451  00216A  0B0F               	andlw	15
  2452  00216C  0FC0               	addlw	192
  2453  00216E  EC73  F011         	call	_lcdCommand
  2454  002172                     l271:
  2455  002172  0012               	return		;funcret
  2456  002174                     __end_of_lcdPosition:
  2457                           	callstack 0
  2458                           
  2459 ;; *************** function _adcRead *****************
  2460 ;; Defined at:
  2461 ;;		line 38 in file "adc.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  channel         2    0[COMRAM] unsigned int 
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  ADvalor         2    2[COMRAM] unsigned int 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  2    0[COMRAM] int 
  2468 ;; Registers used:
  2469 ;;		wreg, status,2, status,0
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2475 ;;      Params:         2       0       0       0       0       0       0
  2476 ;;      Locals:         2       0       0       0       0       0       0
  2477 ;;      Temps:          0       0       0       0       0       0       0
  2478 ;;      Totals:         4       0       0       0       0       0       0
  2479 ;;Total ram usage:        4 bytes
  2480 ;; Hardware stack levels used: 1
  2481 ;; This function calls:
  2482 ;;		Nothing
  2483 ;; This function is called by:
  2484 ;;		_levelocidade
  2485 ;;		_serialcom
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text12
  2490  001FD4                     __ptext12:
  2491                           	callstack 0
  2492  001FD4                     _adcRead:
  2493                           	callstack 29
  2494  001FD4                     
  2495                           ;adc.c: 39:     unsigned int ADvalor;;adc.c: 40:     ADCON0 &= 0b11000011;
  2496  001FD4  0EC3               	movlw	195
  2497  001FD6  16C2               	andwf	194,f,c	;volatile
  2498                           
  2499                           ;adc.c: 41:     if (channel < 3) {
  2500  001FD8  5002               	movf	(adcRead@channel+1)^0,w,c
  2501  001FDA  E107               	bnz	u1901
  2502  001FDC  0E03               	movlw	3
  2503  001FDE  5C01               	subwf	adcRead@channel^0,w,c
  2504  001FE0  B0D8               	btfsc	status,0,c
  2505  001FE2  EFF5  F00F         	goto	u1901
  2506  001FE6  EFF7  F00F         	goto	u1900
  2507  001FEA                     u1901:
  2508  001FEA  EFFB  F00F         	goto	l2379
  2509  001FEE                     u1900:
  2510  001FEE                     
  2511                           ;adc.c: 42:         ADCON0 |= channel << 2;
  2512  001FEE  4401               	rlncf	adcRead@channel^0,w,c	;volatile
  2513  001FF0  46E8               	rlncf	wreg,f,c
  2514  001FF2  0BFC               	andlw	252
  2515  001FF4  12C2               	iorwf	194,f,c	;volatile
  2516  001FF6                     l2379:
  2517                           
  2518                           ;adc.c: 45:     ADCON0 |= 0b00000010;
  2519  001FF6  82C2               	bsf	194,1,c	;volatile
  2520  001FF8                     l19:
  2521  001FF8  B2C2               	btfsc	194,1,c	;volatile
  2522  001FFA  EF01  F010         	goto	u1911
  2523  001FFE  EF03  F010         	goto	u1910
  2524  002002                     u1911:
  2525  002002  EFFC  F00F         	goto	l19
  2526  002006                     u1910:
  2527  002006                     
  2528                           ;adc.c: 49:     ADvalor = ADRESH;
  2529  002006  CFC4 F003          	movff	4036,adcRead@ADvalor	;volatile
  2530  00200A  6A04               	clrf	(adcRead@ADvalor+1)^0,c
  2531  00200C                     
  2532                           ;adc.c: 50:     ADvalor <<= 8;
  2533  00200C  5003               	movf	adcRead@ADvalor^0,w,c
  2534  00200E  6E04               	movwf	(adcRead@ADvalor+1)^0,c
  2535  002010  6A03               	clrf	adcRead@ADvalor^0,c
  2536  002012                     
  2537                           ;adc.c: 51:     ADvalor += ADRESL;
  2538  002012  50C3               	movf	195,w,c	;volatile
  2539  002014  2603               	addwf	adcRead@ADvalor^0,f,c
  2540  002016  0E00               	movlw	0
  2541  002018  2204               	addwfc	(adcRead@ADvalor+1)^0,f,c
  2542  00201A                     
  2543                           ;adc.c: 52:     return ADvalor;
  2544  00201A  C003  F001         	movff	adcRead@ADvalor,?_adcRead
  2545  00201E  C004  F002         	movff	adcRead@ADvalor+1,?_adcRead+1
  2546  002022  0012               	return		;funcret
  2547  002024                     __end_of_adcRead:
  2548                           	callstack 0
  2549                           
  2550 ;; *************** function ___llmod *****************
  2551 ;; Defined at:
  2552 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\llmod.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;  dividend        4   25[COMRAM] unsigned long 
  2555 ;;  divisor         4   29[COMRAM] unsigned long 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  counter         1   33[COMRAM] unsigned char 
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  4   25[COMRAM] unsigned long 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2, status,0
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2567 ;;      Params:         8       0       0       0       0       0       0
  2568 ;;      Locals:         1       0       0       0       0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0
  2570 ;;      Totals:         9       0       0       0       0       0       0
  2571 ;;Total ram usage:        9 bytes
  2572 ;; Hardware stack levels used: 1
  2573 ;; This function calls:
  2574 ;;		Nothing
  2575 ;; This function is called by:
  2576 ;;		_levelocidade
  2577 ;;		_serialcom
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text13
  2582  001C34                     __ptext13:
  2583                           	callstack 0
  2584  001C34                     ___llmod:
  2585                           	callstack 29
  2586  001C34  501E               	movf	___llmod@divisor^0,w,c
  2587  001C36  101F               	iorwf	(___llmod@divisor+1)^0,w,c
  2588  001C38  1020               	iorwf	(___llmod@divisor+2)^0,w,c
  2589  001C3A  1021               	iorwf	(___llmod@divisor+3)^0,w,c
  2590  001C3C  B4D8               	btfsc	status,2,c
  2591  001C3E  EF23  F00E         	goto	u2151
  2592  001C42  EF25  F00E         	goto	u2150
  2593  001C46                     u2151:
  2594  001C46  EF55  F00E         	goto	l984
  2595  001C4A                     u2150:
  2596  001C4A  0E01               	movlw	1
  2597  001C4C  6E22               	movwf	___llmod@counter^0,c
  2598  001C4E  EF2F  F00E         	goto	l2511
  2599  001C52                     l2509:
  2600  001C52  90D8               	bcf	status,0,c
  2601  001C54  361E               	rlcf	___llmod@divisor^0,f,c
  2602  001C56  361F               	rlcf	(___llmod@divisor+1)^0,f,c
  2603  001C58  3620               	rlcf	(___llmod@divisor+2)^0,f,c
  2604  001C5A  3621               	rlcf	(___llmod@divisor+3)^0,f,c
  2605  001C5C  2A22               	incf	___llmod@counter^0,f,c
  2606  001C5E                     l2511:
  2607  001C5E  AE21               	btfss	(___llmod@divisor+3)^0,7,c
  2608  001C60  EF34  F00E         	goto	u2161
  2609  001C64  EF36  F00E         	goto	u2160
  2610  001C68                     u2161:
  2611  001C68  EF29  F00E         	goto	l2509
  2612  001C6C                     u2160:
  2613  001C6C                     l2513:
  2614  001C6C  501E               	movf	___llmod@divisor^0,w,c
  2615  001C6E  5C1A               	subwf	___llmod@dividend^0,w,c
  2616  001C70  501F               	movf	(___llmod@divisor+1)^0,w,c
  2617  001C72  581B               	subwfb	(___llmod@dividend+1)^0,w,c
  2618  001C74  5020               	movf	(___llmod@divisor+2)^0,w,c
  2619  001C76  581C               	subwfb	(___llmod@dividend+2)^0,w,c
  2620  001C78  5021               	movf	(___llmod@divisor+3)^0,w,c
  2621  001C7A  581D               	subwfb	(___llmod@dividend+3)^0,w,c
  2622  001C7C  A0D8               	btfss	status,0,c
  2623  001C7E  EF43  F00E         	goto	u2171
  2624  001C82  EF45  F00E         	goto	u2170
  2625  001C86                     u2171:
  2626  001C86  EF4D  F00E         	goto	l2517
  2627  001C8A                     u2170:
  2628  001C8A  501E               	movf	___llmod@divisor^0,w,c
  2629  001C8C  5E1A               	subwf	___llmod@dividend^0,f,c
  2630  001C8E  501F               	movf	(___llmod@divisor+1)^0,w,c
  2631  001C90  5A1B               	subwfb	(___llmod@dividend+1)^0,f,c
  2632  001C92  5020               	movf	(___llmod@divisor+2)^0,w,c
  2633  001C94  5A1C               	subwfb	(___llmod@dividend+2)^0,f,c
  2634  001C96  5021               	movf	(___llmod@divisor+3)^0,w,c
  2635  001C98  5A1D               	subwfb	(___llmod@dividend+3)^0,f,c
  2636  001C9A                     l2517:
  2637  001C9A  90D8               	bcf	status,0,c
  2638  001C9C  3221               	rrcf	(___llmod@divisor+3)^0,f,c
  2639  001C9E  3220               	rrcf	(___llmod@divisor+2)^0,f,c
  2640  001CA0  321F               	rrcf	(___llmod@divisor+1)^0,f,c
  2641  001CA2  321E               	rrcf	___llmod@divisor^0,f,c
  2642  001CA4  2E22               	decfsz	___llmod@counter^0,f,c
  2643  001CA6  EF36  F00E         	goto	l2513
  2644  001CAA                     l984:
  2645  001CAA  C01A  F01A         	movff	___llmod@dividend,?___llmod
  2646  001CAE  C01B  F01B         	movff	___llmod@dividend+1,?___llmod+1
  2647  001CB2  C01C  F01C         	movff	___llmod@dividend+2,?___llmod+2
  2648  001CB6  C01D  F01D         	movff	___llmod@dividend+3,?___llmod+3
  2649  001CBA  0012               	return		;funcret
  2650  001CBC                     __end_of___llmod:
  2651                           	callstack 0
  2652                           
  2653 ;; *************** function _leTeclado *****************
  2654 ;; Defined at:
  2655 ;;		line 59 in file "main.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  tecla           1   27[COMRAM] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2669 ;;      Params:         0       0       0       0       0       0       0
  2670 ;;      Locals:         1       0       0       0       0       0       0
  2671 ;;      Temps:          2       0       0       0       0       0       0
  2672 ;;      Totals:         3       0       0       0       0       0       0
  2673 ;;Total ram usage:        3 bytes
  2674 ;; Hardware stack levels used: 1
  2675 ;; Hardware stack levels required when called: 6
  2676 ;; This function calls:
  2677 ;;		___lldiv
  2678 ;;		___lmul
  2679 ;;		_kpDebounce
  2680 ;;		_kpRead
  2681 ;;		_kpReadKey
  2682 ;;		_lcdCommand
  2683 ;;		_lcdString
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text14
  2690  000B2C                     __ptext14:
  2691                           	callstack 0
  2692  000B2C                     _leTeclado:
  2693                           	callstack 24
  2694  000B2C                     
  2695                           ;main.c: 60:     unsigned char tecla;;main.c: 61:     kpDebounce();
  2696  000B2C  ECBD  F00B         	call	_kpDebounce	;wreg free
  2697                           
  2698                           ;main.c: 62:     if (kpRead() != tecla) {
  2699  000B30  501C               	movf	leTeclado@tecla^0,w,c
  2700  000B32  6E1A               	movwf	??_leTeclado^0,c
  2701  000B34  6A1B               	clrf	(??_leTeclado+1)^0,c
  2702  000B36  ECAD  F011         	call	_kpRead	;wreg free
  2703  000B3A  501A               	movf	??_leTeclado^0,w,c
  2704  000B3C  1801               	xorwf	?_kpRead^0,w,c
  2705  000B3E  E109               	bnz	u2260
  2706  000B40  501B               	movf	(??_leTeclado+1)^0,w,c
  2707  000B42  1802               	xorwf	(?_kpRead+1)^0,w,c
  2708  000B44  B4D8               	btfsc	status,2,c
  2709  000B46  EFA7  F005         	goto	u2261
  2710  000B4A  EFA9  F005         	goto	u2260
  2711  000B4E                     u2261:
  2712  000B4E  EFE3  F006         	goto	l520
  2713  000B52                     u2260:
  2714  000B52  ECAD  F011         	call	_kpRead	;wreg free
  2715                           
  2716                           ;main.c: 64:         switch (kpReadKey()) {
  2717  000B56  EFC5  F006         	goto	l2735
  2718  000B5A                     l2693:
  2719                           
  2720                           ;main.c: 66:                 lcdCommand(0x80);
  2721  000B5A  0E80               	movlw	128
  2722  000B5C  EC73  F011         	call	_lcdCommand
  2723  000B60                     
  2724                           ;main.c: 67:                 lcdString("RUA XV  ");
  2725  000B60  0E43               	movlw	low STR_2
  2726  000B62  6E0F               	movwf	lcdString@msg^0,c
  2727  000B64  0E06               	movlw	high STR_2
  2728  000B66  6E10               	movwf	(lcdString@msg+1)^0,c
  2729  000B68  ECBF  F00F         	call	_lcdString	;wreg free
  2730  000B6C                     
  2731                           ;main.c: 68:                 lcdCommand(0xC0);
  2732  000B6C  0EC0               	movlw	192
  2733  000B6E  EC73  F011         	call	_lcdCommand
  2734                           
  2735                           ;main.c: 69:                 lcdString("L: 60 ");
  2736  000B72  0E65               	movlw	low STR_3
  2737  000B74  6E0F               	movwf	lcdString@msg^0,c
  2738  000B76  0E06               	movlw	high STR_3
  2739  000B78  6E10               	movwf	(lcdString@msg+1)^0,c
  2740  000B7A  ECBF  F00F         	call	_lcdString	;wreg free
  2741  000B7E                     
  2742                           ;main.c: 70:                 limite = 60;
  2743  000B7E  0E3C               	movlw	60
  2744  000B80  6E32               	movwf	_limite^0,c
  2745  000B82  0E00               	movlw	0
  2746  000B84  6E33               	movwf	(_limite+1)^0,c
  2747  000B86  0E00               	movlw	0
  2748  000B88  6E34               	movwf	(_limite+2)^0,c
  2749  000B8A  0E00               	movlw	0
  2750  000B8C  6E35               	movwf	(_limite+3)^0,c
  2751  000B8E                     
  2752                           ;main.c: 71:                 multa = 100 + ((pot * 10) / 100);
  2753  000B8E  C046  F001         	movff	_pot,___lmul@multiplier
  2754  000B92  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  2755  000B96  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  2756  000B9A  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  2757  000B9E  0E0A               	movlw	10
  2758  000BA0  6E05               	movwf	___lmul@multiplicand^0,c
  2759  000BA2  0E00               	movlw	0
  2760  000BA4  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2761  000BA6  0E00               	movlw	0
  2762  000BA8  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2763  000BAA  0E00               	movlw	0
  2764  000BAC  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2765  000BAE  ECD4  F00E         	call	___lmul	;wreg free
  2766  000BB2  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2767  000BB6  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2768  000BBA  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2769  000BBE  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2770  000BC2  0E64               	movlw	100
  2771  000BC4  6E11               	movwf	___lldiv@divisor^0,c
  2772  000BC6  0E00               	movlw	0
  2773  000BC8  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2774  000BCA  0E00               	movlw	0
  2775  000BCC  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2776  000BCE  0E00               	movlw	0
  2777  000BD0  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2778  000BD2  EC7A  F00D         	call	___lldiv	;wreg free
  2779  000BD6  0E64               	movlw	100
  2780  000BD8  240D               	addwf	?___lldiv^0,w,c
  2781  000BDA  6E36               	movwf	_multa^0,c
  2782  000BDC  0E00               	movlw	0
  2783  000BDE  200E               	addwfc	(?___lldiv+1)^0,w,c
  2784  000BE0  6E37               	movwf	(_multa+1)^0,c
  2785                           
  2786                           ;main.c: 72:                 break;
  2787  000BE2  EFE3  F006         	goto	l520
  2788  000BE6                     l2703:
  2789                           
  2790                           ;main.c: 74:                 lcdCommand(0x80);
  2791  000BE6  0E80               	movlw	128
  2792  000BE8  EC73  F011         	call	_lcdCommand
  2793  000BEC                     
  2794                           ;main.c: 75:                 lcdString("AVENIDA   ");
  2795  000BEC  0E1C               	movlw	low STR_4
  2796  000BEE  6E0F               	movwf	lcdString@msg^0,c
  2797  000BF0  0E06               	movlw	high STR_4
  2798  000BF2  6E10               	movwf	(lcdString@msg+1)^0,c
  2799  000BF4  ECBF  F00F         	call	_lcdString	;wreg free
  2800  000BF8                     
  2801                           ;main.c: 76:                 lcdCommand(0xC0);
  2802  000BF8  0EC0               	movlw	192
  2803  000BFA  EC73  F011         	call	_lcdCommand
  2804                           
  2805                           ;main.c: 77:                 lcdString("L: 80 ");
  2806  000BFE  0E6C               	movlw	low STR_5
  2807  000C00  6E0F               	movwf	lcdString@msg^0,c
  2808  000C02  0E06               	movlw	high STR_5
  2809  000C04  6E10               	movwf	(lcdString@msg+1)^0,c
  2810  000C06  ECBF  F00F         	call	_lcdString	;wreg free
  2811  000C0A                     
  2812                           ;main.c: 78:                 limite = 80;
  2813  000C0A  0E50               	movlw	80
  2814  000C0C  6E32               	movwf	_limite^0,c
  2815  000C0E  0E00               	movlw	0
  2816  000C10  6E33               	movwf	(_limite+1)^0,c
  2817  000C12  0E00               	movlw	0
  2818  000C14  6E34               	movwf	(_limite+2)^0,c
  2819  000C16  0E00               	movlw	0
  2820  000C18  6E35               	movwf	(_limite+3)^0,c
  2821  000C1A                     
  2822                           ;main.c: 79:                 multa = 200 + ((pot * 20) / 100);
  2823  000C1A  C046  F001         	movff	_pot,___lmul@multiplier
  2824  000C1E  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  2825  000C22  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  2826  000C26  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  2827  000C2A  0E14               	movlw	20
  2828  000C2C  6E05               	movwf	___lmul@multiplicand^0,c
  2829  000C2E  0E00               	movlw	0
  2830  000C30  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2831  000C32  0E00               	movlw	0
  2832  000C34  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2833  000C36  0E00               	movlw	0
  2834  000C38  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2835  000C3A  ECD4  F00E         	call	___lmul	;wreg free
  2836  000C3E  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2837  000C42  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2838  000C46  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2839  000C4A  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2840  000C4E  0E64               	movlw	100
  2841  000C50  6E11               	movwf	___lldiv@divisor^0,c
  2842  000C52  0E00               	movlw	0
  2843  000C54  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2844  000C56  0E00               	movlw	0
  2845  000C58  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2846  000C5A  0E00               	movlw	0
  2847  000C5C  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2848  000C5E  EC7A  F00D         	call	___lldiv	;wreg free
  2849  000C62  0EC8               	movlw	200
  2850  000C64  240D               	addwf	?___lldiv^0,w,c
  2851  000C66  6E36               	movwf	_multa^0,c
  2852  000C68  0E00               	movlw	0
  2853  000C6A  200E               	addwfc	(?___lldiv+1)^0,w,c
  2854  000C6C  6E37               	movwf	(_multa+1)^0,c
  2855                           
  2856                           ;main.c: 80:                 break;
  2857  000C6E  EFE3  F006         	goto	l520
  2858  000C72                     l2713:
  2859                           
  2860                           ;main.c: 82:                 lcdCommand(0x80);
  2861  000C72  0E80               	movlw	128
  2862  000C74  EC73  F011         	call	_lcdCommand
  2863  000C78                     
  2864                           ;main.c: 83:                 lcdString("BR-040  ");
  2865  000C78  0E31               	movlw	low STR_6
  2866  000C7A  6E0F               	movwf	lcdString@msg^0,c
  2867  000C7C  0E06               	movlw	high STR_6
  2868  000C7E  6E10               	movwf	(lcdString@msg+1)^0,c
  2869  000C80  ECBF  F00F         	call	_lcdString	;wreg free
  2870  000C84                     
  2871                           ;main.c: 84:                 lcdCommand(0xC0);
  2872  000C84  0EC0               	movlw	192
  2873  000C86  EC73  F011         	call	_lcdCommand
  2874                           
  2875                           ;main.c: 85:                 lcdString("L: 100 ");
  2876  000C8A  0E55               	movlw	low STR_7
  2877  000C8C  6E0F               	movwf	lcdString@msg^0,c
  2878  000C8E  0E06               	movlw	high STR_7
  2879  000C90  6E10               	movwf	(lcdString@msg+1)^0,c
  2880  000C92  ECBF  F00F         	call	_lcdString	;wreg free
  2881  000C96                     
  2882                           ;main.c: 86:                 limite = 100;
  2883  000C96  0E64               	movlw	100
  2884  000C98  6E32               	movwf	_limite^0,c
  2885  000C9A  0E00               	movlw	0
  2886  000C9C  6E33               	movwf	(_limite+1)^0,c
  2887  000C9E  0E00               	movlw	0
  2888  000CA0  6E34               	movwf	(_limite+2)^0,c
  2889  000CA2  0E00               	movlw	0
  2890  000CA4  6E35               	movwf	(_limite+3)^0,c
  2891  000CA6                     
  2892                           ;main.c: 87:                 multa = 300 + ((pot * 30) / 100);
  2893  000CA6  C046  F001         	movff	_pot,___lmul@multiplier
  2894  000CAA  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  2895  000CAE  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  2896  000CB2  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  2897  000CB6  0E1E               	movlw	30
  2898  000CB8  6E05               	movwf	___lmul@multiplicand^0,c
  2899  000CBA  0E00               	movlw	0
  2900  000CBC  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2901  000CBE  0E00               	movlw	0
  2902  000CC0  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2903  000CC2  0E00               	movlw	0
  2904  000CC4  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2905  000CC6  ECD4  F00E         	call	___lmul	;wreg free
  2906  000CCA  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2907  000CCE  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2908  000CD2  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2909  000CD6  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2910  000CDA  0E64               	movlw	100
  2911  000CDC  6E11               	movwf	___lldiv@divisor^0,c
  2912  000CDE  0E00               	movlw	0
  2913  000CE0  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2914  000CE2  0E00               	movlw	0
  2915  000CE4  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2916  000CE6  0E00               	movlw	0
  2917  000CE8  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2918  000CEA  EC7A  F00D         	call	___lldiv	;wreg free
  2919  000CEE  0E2C               	movlw	44
  2920  000CF0  240D               	addwf	?___lldiv^0,w,c
  2921  000CF2  6E36               	movwf	_multa^0,c
  2922  000CF4  0E01               	movlw	1
  2923  000CF6  200E               	addwfc	(?___lldiv+1)^0,w,c
  2924  000CF8  6E37               	movwf	(_multa+1)^0,c
  2925                           
  2926                           ;main.c: 88:                 break;
  2927  000CFA  EFE3  F006         	goto	l520
  2928  000CFE                     l2723:
  2929                           
  2930                           ;main.c: 90:                 lcdCommand(0x80);
  2931  000CFE  0E80               	movlw	128
  2932  000D00  EC73  F011         	call	_lcdCommand
  2933  000D04                     
  2934                           ;main.c: 91:                 lcdString("MG-301  ");
  2935  000D04  0E3A               	movlw	low STR_8
  2936  000D06  6E0F               	movwf	lcdString@msg^0,c
  2937  000D08  0E06               	movlw	high STR_8
  2938  000D0A  6E10               	movwf	(lcdString@msg+1)^0,c
  2939  000D0C  ECBF  F00F         	call	_lcdString	;wreg free
  2940  000D10                     
  2941                           ;main.c: 92:                 lcdCommand(0xC0);
  2942  000D10  0EC0               	movlw	192
  2943  000D12  EC73  F011         	call	_lcdCommand
  2944                           
  2945                           ;main.c: 93:                 lcdString("L: 110 ");
  2946  000D16  0E5D               	movlw	low STR_9
  2947  000D18  6E0F               	movwf	lcdString@msg^0,c
  2948  000D1A  0E06               	movlw	high STR_9
  2949  000D1C  6E10               	movwf	(lcdString@msg+1)^0,c
  2950  000D1E  ECBF  F00F         	call	_lcdString	;wreg free
  2951  000D22                     
  2952                           ;main.c: 94:                 limite = 110;
  2953  000D22  0E6E               	movlw	110
  2954  000D24  6E32               	movwf	_limite^0,c
  2955  000D26  0E00               	movlw	0
  2956  000D28  6E33               	movwf	(_limite+1)^0,c
  2957  000D2A  0E00               	movlw	0
  2958  000D2C  6E34               	movwf	(_limite+2)^0,c
  2959  000D2E  0E00               	movlw	0
  2960  000D30  6E35               	movwf	(_limite+3)^0,c
  2961  000D32                     
  2962                           ;main.c: 95:                 multa = 400 + ((pot * 40) / 100);
  2963  000D32  C046  F001         	movff	_pot,___lmul@multiplier
  2964  000D36  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  2965  000D3A  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  2966  000D3E  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  2967  000D42  0E28               	movlw	40
  2968  000D44  6E05               	movwf	___lmul@multiplicand^0,c
  2969  000D46  0E00               	movlw	0
  2970  000D48  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2971  000D4A  0E00               	movlw	0
  2972  000D4C  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2973  000D4E  0E00               	movlw	0
  2974  000D50  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2975  000D52  ECD4  F00E         	call	___lmul	;wreg free
  2976  000D56  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2977  000D5A  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2978  000D5E  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2979  000D62  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2980  000D66  0E64               	movlw	100
  2981  000D68  6E11               	movwf	___lldiv@divisor^0,c
  2982  000D6A  0E00               	movlw	0
  2983  000D6C  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2984  000D6E  0E00               	movlw	0
  2985  000D70  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2986  000D72  0E00               	movlw	0
  2987  000D74  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2988  000D76  EC7A  F00D         	call	___lldiv	;wreg free
  2989  000D7A  0E90               	movlw	144
  2990  000D7C  240D               	addwf	?___lldiv^0,w,c
  2991  000D7E  6E36               	movwf	_multa^0,c
  2992  000D80  0E01               	movlw	1
  2993  000D82  200E               	addwfc	(?___lldiv+1)^0,w,c
  2994  000D84  6E37               	movwf	(_multa+1)^0,c
  2995                           
  2996                           ;main.c: 96:                 break;
  2997  000D86  EFE3  F006         	goto	l520
  2998  000D8A                     l2735:
  2999  000D8A  EC5E  F00E         	call	_kpReadKey	;wreg free
  3000  000D8E  6E1A               	movwf	??_leTeclado^0,c
  3001  000D90  6A1B               	clrf	(??_leTeclado+1)^0,c
  3002                           
  3003                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3004                           ; Switch size 1, requested type "simple"
  3005                           ; Number of cases is 1, Range of values is 0 to 0
  3006                           ; switch strategies available:
  3007                           ; Name         Instructions Cycles
  3008                           ; simple_byte            4     3 (average)
  3009                           ;	Chosen strategy is simple_byte
  3010  000D92  501B               	movf	(??_leTeclado+1)^0,w,c
  3011  000D94  0A00               	xorlw	0	; case 0
  3012  000D96  B4D8               	btfsc	status,2,c
  3013  000D98  EFD0  F006         	goto	l3009
  3014  000D9C  EFE3  F006         	goto	l520
  3015  000DA0                     l3009:
  3016                           
  3017                           ; Switch size 1, requested type "simple"
  3018                           ; Number of cases is 4, Range of values is 68 to 85
  3019                           ; switch strategies available:
  3020                           ; Name         Instructions Cycles
  3021                           ; simple_byte           13     7 (average)
  3022                           ;	Chosen strategy is simple_byte
  3023  000DA0  501A               	movf	??_leTeclado^0,w,c
  3024  000DA2  0A44               	xorlw	68	; case 68
  3025  000DA4  B4D8               	btfsc	status,2,c
  3026  000DA6  EF39  F006         	goto	l2713
  3027  000DAA  0A08               	xorlw	8	; case 76
  3028  000DAC  B4D8               	btfsc	status,2,c
  3029  000DAE  EFF3  F005         	goto	l2703
  3030  000DB2  0A1E               	xorlw	30	; case 82
  3031  000DB4  B4D8               	btfsc	status,2,c
  3032  000DB6  EF7F  F006         	goto	l2723
  3033  000DBA  0A07               	xorlw	7	; case 85
  3034  000DBC  B4D8               	btfsc	status,2,c
  3035  000DBE  EFAD  F005         	goto	l2693
  3036  000DC2  EFE3  F006         	goto	l520
  3037  000DC6                     l520:
  3038  000DC6  0012               	return		;funcret
  3039  000DC8                     __end_of_leTeclado:
  3040                           	callstack 0
  3041                           
  3042 ;; *************** function _lcdString *****************
  3043 ;; Defined at:
  3044 ;;		line 57 in file "lcd.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  msg             2   14[COMRAM] PTR unsigned char 
  3047 ;;		 -> STR_18(9), STR_17(7), STR_16(9), STR_15(7), 
  3048 ;;		 -> STR_14(9), STR_13(7), STR_12(10), STR_11(7), 
  3049 ;;		 -> STR_10(9), STR_9(8), STR_8(9), STR_7(8), 
  3050 ;;		 -> STR_6(9), STR_5(7), STR_4(11), STR_3(7), 
  3051 ;;		 -> STR_2(9), STR_1(3), 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  i               2   18[COMRAM] int 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3063 ;;      Params:         2       0       0       0       0       0       0
  3064 ;;      Locals:         2       0       0       0       0       0       0
  3065 ;;      Temps:          2       0       0       0       0       0       0
  3066 ;;      Totals:         6       0       0       0       0       0       0
  3067 ;;Total ram usage:        6 bytes
  3068 ;; Hardware stack levels used: 1
  3069 ;; Hardware stack levels required when called: 5
  3070 ;; This function calls:
  3071 ;;		_lcdChar
  3072 ;; This function is called by:
  3073 ;;		_levelocidade
  3074 ;;		_leTeclado
  3075 ;;		_serialcom
  3076 ;;		_main
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text15
  3081  001F7E                     __ptext15:
  3082                           	callstack 0
  3083  001F7E                     _lcdString:
  3084                           	callstack 24
  3085  001F7E                     
  3086                           ;lcd.c: 58:  int i = 0;
  3087  001F7E  0E00               	movlw	0
  3088  001F80  6E14               	movwf	(lcdString@i+1)^0,c
  3089  001F82  0E00               	movlw	0
  3090  001F84  6E13               	movwf	lcdString@i^0,c
  3091                           
  3092                           ;lcd.c: 59:  while (msg[i] != 0) {
  3093  001F86  EFD5  F00F         	goto	l2449
  3094  001F8A                     l2445:
  3095                           
  3096                           ;lcd.c: 60:   lcdChar(msg[i]);
  3097  001F8A  5013               	movf	lcdString@i^0,w,c
  3098  001F8C  240F               	addwf	lcdString@msg^0,w,c
  3099  001F8E  6E11               	movwf	??_lcdString^0,c
  3100  001F90  5014               	movf	(lcdString@i+1)^0,w,c
  3101  001F92  2010               	addwfc	(lcdString@msg+1)^0,w,c
  3102  001F94  6E12               	movwf	(??_lcdString+1)^0,c
  3103  001F96  C011  FFF6         	movff	??_lcdString,tblptrl
  3104  001F9A  C012  FFF7         	movff	??_lcdString+1,tblptrh
  3105  001F9E                     	if	0	;tblptru may be non-zero
  3106  001F9E                     	endif
  3107  001F9E                     	if	0	;tblptru may be non-zero
  3108  001F9E                     	endif
  3109  001F9E  0008               	tblrd		*
  3110  001FA0  50F5               	movf	tablat,w,c
  3111  001FA2  EC64  F011         	call	_lcdChar
  3112  001FA6                     
  3113                           ;lcd.c: 61:   i++;
  3114  001FA6  4A13               	infsnz	lcdString@i^0,f,c
  3115  001FA8  2A14               	incf	(lcdString@i+1)^0,f,c
  3116  001FAA                     l2449:
  3117                           
  3118                           ;lcd.c: 59:  while (msg[i] != 0) {
  3119  001FAA  5013               	movf	lcdString@i^0,w,c
  3120  001FAC  240F               	addwf	lcdString@msg^0,w,c
  3121  001FAE  6E11               	movwf	??_lcdString^0,c
  3122  001FB0  5014               	movf	(lcdString@i+1)^0,w,c
  3123  001FB2  2010               	addwfc	(lcdString@msg+1)^0,w,c
  3124  001FB4  6E12               	movwf	(??_lcdString+1)^0,c
  3125  001FB6  C011  FFF6         	movff	??_lcdString,tblptrl
  3126  001FBA  C012  FFF7         	movff	??_lcdString+1,tblptrh
  3127  001FBE                     	if	0	;tblptru may be non-zero
  3128  001FBE                     	endif
  3129  001FBE                     	if	0	;tblptru may be non-zero
  3130  001FBE                     	endif
  3131  001FBE  0008               	tblrd		*
  3132  001FC0  50F5               	movf	tablat,w,c
  3133  001FC2  0900               	iorlw	0
  3134  001FC4  A4D8               	btfss	status,2,c
  3135  001FC6  EFE7  F00F         	goto	u2061
  3136  001FCA  EFE9  F00F         	goto	u2060
  3137  001FCE                     u2061:
  3138  001FCE  EFC5  F00F         	goto	l2445
  3139  001FD2                     u2060:
  3140  001FD2  0012               	return		;funcret
  3141  001FD4                     __end_of_lcdString:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _lcdChar *****************
  3145 ;; Defined at:
  3146 ;;		line 52 in file "lcd.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  value           1    wreg     unsigned char 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  value           1   13[COMRAM] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3160 ;;      Params:         0       0       0       0       0       0       0
  3161 ;;      Locals:         1       0       0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0
  3163 ;;      Totals:         1       0       0       0       0       0       0
  3164 ;;Total ram usage:        1 bytes
  3165 ;; Hardware stack levels used: 1
  3166 ;; Hardware stack levels required when called: 4
  3167 ;; This function calls:
  3168 ;;		_delayMicro
  3169 ;;		_pushByte
  3170 ;; This function is called by:
  3171 ;;		_lcdString
  3172 ;;		_levelocidade
  3173 ;;		_lcdNumber
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           	psect	text16
  3178  0022C8                     __ptext16:
  3179                           	callstack 0
  3180  0022C8                     _lcdChar:
  3181                           	callstack 24
  3182                           
  3183                           ;incstack = 0
  3184                           ;lcdChar@value stored from wreg
  3185  0022C8  6E0E               	movwf	lcdChar@value^0,c
  3186  0022CA                     
  3187                           ;lcd.c: 53:  pushByte(value, 1);
  3188  0022CA  0E00               	movlw	0
  3189  0022CC  6E0B               	movwf	(pushByte@rs+1)^0,c
  3190  0022CE  0E01               	movlw	1
  3191  0022D0  6E0A               	movwf	pushByte@rs^0,c
  3192  0022D2  500E               	movf	lcdChar@value^0,w,c
  3193  0022D4  EC3B  F00F         	call	_pushByte
  3194  0022D8                     
  3195                           ;lcd.c: 54:  delayMicro(80);
  3196  0022D8  0E00               	movlw	0
  3197  0022DA  6E02               	movwf	(delayMicro@a+1)^0,c
  3198  0022DC  0E50               	movlw	80
  3199  0022DE  6E01               	movwf	delayMicro@a^0,c
  3200  0022E0  ECB6  F011         	call	_delayMicro	;wreg free
  3201  0022E4  0012               	return		;funcret
  3202  0022E6                     __end_of_lcdChar:
  3203                           	callstack 0
  3204                           
  3205 ;; *************** function _kpReadKey *****************
  3206 ;; Defined at:
  3207 ;;		line 17 in file "keypad.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;		None
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  i               2    3[COMRAM] int 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      unsigned char 
  3214 ;; Registers used:
  3215 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3221 ;;      Params:         0       0       0       0       0       0       0
  3222 ;;      Locals:         2       0       0       0       0       0       0
  3223 ;;      Temps:          3       0       0       0       0       0       0
  3224 ;;      Totals:         5       0       0       0       0       0       0
  3225 ;;Total ram usage:        5 bytes
  3226 ;; Hardware stack levels used: 1
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_leTeclado
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text17
  3235  001CBC                     __ptext17:
  3236                           	callstack 0
  3237  001CBC                     _kpReadKey:
  3238                           	callstack 29
  3239  001CBC                     
  3240                           ;keypad.c: 18:  int i;;keypad.c: 19:  for(i=0;i<10;i++){
  3241  001CBC  0E00               	movlw	0
  3242  001CBE  6E05               	movwf	(kpReadKey@i+1)^0,c
  3243  001CC0  0E00               	movlw	0
  3244  001CC2  6E04               	movwf	kpReadKey@i^0,c
  3245  001CC4                     l1485:
  3246                           
  3247                           ;keypad.c: 20:   if (((keys) & (1<<(i)))){
  3248  001CC4  C004  F001         	movff	kpReadKey@i,??_kpReadKey
  3249  001CC8  0E01               	movlw	1
  3250  001CCA  6E02               	movwf	(??_kpReadKey+1)^0,c
  3251  001CCC  0E00               	movlw	0
  3252  001CCE  6E03               	movwf	(??_kpReadKey+2)^0,c
  3253  001CD0  2A01               	incf	??_kpReadKey^0,f,c
  3254  001CD2  EF6E  F00E         	goto	u694
  3255  001CD6                     u695:
  3256  001CD6  90D8               	bcf	status,0,c
  3257  001CD8  3602               	rlcf	(??_kpReadKey+1)^0,f,c
  3258  001CDA  3603               	rlcf	(??_kpReadKey+2)^0,f,c
  3259  001CDC                     u694:
  3260  001CDC  2E01               	decfsz	??_kpReadKey^0,f,c
  3261  001CDE  EF6B  F00E         	goto	u695
  3262  001CE2  503C               	movf	_keys^0,w,c
  3263  001CE4  1602               	andwf	(??_kpReadKey+1)^0,f,c
  3264  001CE6  503D               	movf	(_keys+1)^0,w,c
  3265  001CE8  1603               	andwf	(??_kpReadKey+2)^0,f,c
  3266  001CEA  5002               	movf	(??_kpReadKey+1)^0,w,c
  3267  001CEC  1003               	iorwf	(??_kpReadKey+2)^0,w,c
  3268  001CEE  B4D8               	btfsc	status,2,c
  3269  001CF0  EF7C  F00E         	goto	u701
  3270  001CF4  EF7E  F00E         	goto	u700
  3271  001CF8                     u701:
  3272  001CF8  EF88  F00E         	goto	l1491
  3273  001CFC                     u700:
  3274  001CFC                     
  3275                           ;keypad.c: 21:    return charKey[i];
  3276  001CFC  0E12               	movlw	low _charKey
  3277  001CFE  2404               	addwf	kpReadKey@i^0,w,c
  3278  001D00  6EF6               	movwf	tblptrl,c
  3279  001D02  0E06               	movlw	high _charKey
  3280  001D04  2005               	addwfc	(kpReadKey@i+1)^0,w,c
  3281  001D06  6EF7               	movwf	tblptrh,c
  3282  001D08                     	if	0	;There are less than 3 active tblptr bytes
  3283  001D08                     	endif
  3284  001D08  0008               	tblrd		*
  3285  001D0A  50F5               	movf	tablat,w,c
  3286  001D0C  EF99  F00E         	goto	l218
  3287  001D10                     l1491:
  3288                           
  3289                           ;keypad.c: 23:  }
  3290  001D10  4A04               	infsnz	kpReadKey@i^0,f,c
  3291  001D12  2A05               	incf	(kpReadKey@i+1)^0,f,c
  3292  001D14  BE05               	btfsc	(kpReadKey@i+1)^0,7,c
  3293  001D16  EF96  F00E         	goto	u711
  3294  001D1A  5005               	movf	(kpReadKey@i+1)^0,w,c
  3295  001D1C  E109               	bnz	u710
  3296  001D1E  0E0A               	movlw	10
  3297  001D20  5C04               	subwf	kpReadKey@i^0,w,c
  3298  001D22  A0D8               	btfss	status,0,c
  3299  001D24  EF96  F00E         	goto	u711
  3300  001D28  EF98  F00E         	goto	u710
  3301  001D2C                     u711:
  3302  001D2C  EF62  F00E         	goto	l1485
  3303  001D30                     u710:
  3304  001D30                     
  3305                           ;keypad.c: 25:  return 0;
  3306  001D30  0E00               	movlw	0
  3307  001D32                     l218:
  3308  001D32  0012               	return		;funcret
  3309  001D34                     __end_of_kpReadKey:
  3310                           	callstack 0
  3311                           
  3312 ;; *************** function _kpRead *****************
  3313 ;; Defined at:
  3314 ;;		line 14 in file "keypad.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;		None
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;		None
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  2    0[COMRAM] unsigned int 
  3321 ;; Registers used:
  3322 ;;		None
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3328 ;;      Params:         2       0       0       0       0       0       0
  3329 ;;      Locals:         0       0       0       0       0       0       0
  3330 ;;      Temps:          0       0       0       0       0       0       0
  3331 ;;      Totals:         2       0       0       0       0       0       0
  3332 ;;Total ram usage:        2 bytes
  3333 ;; Hardware stack levels used: 1
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_leTeclado
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text18
  3342  00235A                     __ptext18:
  3343                           	callstack 0
  3344  00235A                     _kpRead:
  3345                           	callstack 29
  3346  00235A                     
  3347                           ;keypad.c: 15:     return keys;
  3348  00235A  C03C  F001         	movff	_keys,?_kpRead
  3349  00235E  C03D  F002         	movff	_keys+1,?_kpRead+1
  3350  002362  0012               	return		;funcret
  3351  002364                     __end_of_kpRead:
  3352                           	callstack 0
  3353                           
  3354 ;; *************** function _kpDebounce *****************
  3355 ;; Defined at:
  3356 ;;		line 27 in file "keypad.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;		None
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  i               2   12[COMRAM] int 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3370 ;;      Params:         0       0       0       0       0       0       0
  3371 ;;      Locals:         2       0       0       0       0       0       0
  3372 ;;      Temps:          3       0       0       0       0       0       0
  3373 ;;      Totals:         5       0       0       0       0       0       0
  3374 ;;Total ram usage:        5 bytes
  3375 ;; Hardware stack levels used: 1
  3376 ;; Hardware stack levels required when called: 3
  3377 ;; This function calls:
  3378 ;;		_digitalRead
  3379 ;;		_soWrite
  3380 ;; This function is called by:
  3381 ;;		_leTeclado
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text19
  3386  00177A                     __ptext19:
  3387                           	callstack 0
  3388  00177A                     _kpDebounce:
  3389                           	callstack 26
  3390  00177A                     
  3391                           ;keypad.c: 28:     int i;;keypad.c: 29:     static unsigned char tempo;;keypad.c: 30:   
      +                            static unsigned int newRead;;keypad.c: 31:     static unsigned int oldRead;;keypad.c: 
      +                          32:     newRead = 0;
  3392  00177A  0E00               	movlw	0
  3393  00177C  6E3B               	movwf	(kpDebounce@newRead+1)^0,c
  3394  00177E  0E00               	movlw	0
  3395  001780  6E3A               	movwf	kpDebounce@newRead^0,c
  3396                           
  3397                           ;keypad.c: 33:     for(i = 0; i<5; i++){
  3398  001782  0E00               	movlw	0
  3399  001784  6E0E               	movwf	(kpDebounce@i+1)^0,c
  3400  001786  0E00               	movlw	0
  3401  001788  6E0D               	movwf	kpDebounce@i^0,c
  3402  00178A                     l2405:
  3403  00178A  BE0E               	btfsc	(kpDebounce@i+1)^0,7,c
  3404  00178C  EFD1  F00B         	goto	u1961
  3405  001790  500E               	movf	(kpDebounce@i+1)^0,w,c
  3406  001792  E109               	bnz	u1960
  3407  001794  0E05               	movlw	5
  3408  001796  5C0D               	subwf	kpDebounce@i^0,w,c
  3409  001798  A0D8               	btfss	status,0,c
  3410  00179A  EFD1  F00B         	goto	u1961
  3411  00179E  EFD3  F00B         	goto	u1960
  3412  0017A2                     u1961:
  3413  0017A2  EFD5  F00B         	goto	l2409
  3414  0017A6                     u1960:
  3415  0017A6  EF36  F00C         	goto	l2421
  3416  0017AA                     l2409:
  3417                           
  3418                           ;keypad.c: 35:       soWrite(1<<(i+3));
  3419  0017AA  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  3420  0017AE  0E03               	movlw	3
  3421  0017B0  260A               	addwf	??_kpDebounce^0,f,c
  3422  0017B2  0E01               	movlw	1
  3423  0017B4  6E0B               	movwf	(??_kpDebounce+1)^0,c
  3424  0017B6  0E00               	movlw	0
  3425  0017B8  6E0C               	movwf	(??_kpDebounce+2)^0,c
  3426  0017BA  2A0A               	incf	??_kpDebounce^0,f,c
  3427  0017BC  EFE3  F00B         	goto	u1974
  3428  0017C0                     u1975:
  3429  0017C0  90D8               	bcf	status,0,c
  3430  0017C2  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  3431  0017C4  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  3432  0017C6                     u1974:
  3433  0017C6  2E0A               	decfsz	??_kpDebounce^0,f,c
  3434  0017C8  EFE0  F00B         	goto	u1975
  3435  0017CC  C00B  F007         	movff	??_kpDebounce+1,soWrite@value
  3436  0017D0  C00C  F008         	movff	??_kpDebounce+2,soWrite@value+1
  3437  0017D4  EC12  F010         	call	_soWrite	;wreg free
  3438                           
  3439                           ;keypad.c: 36:       if(digitalRead(PIN_B2)){
  3440  0017D8  0E00               	movlw	0
  3441  0017DA  6E02               	movwf	(digitalRead@pin+1)^0,c
  3442  0017DC  0E0A               	movlw	10
  3443  0017DE  6E01               	movwf	digitalRead@pin^0,c
  3444  0017E0  EC08  F00B         	call	_digitalRead	;wreg free
  3445  0017E4  5001               	movf	?_digitalRead^0,w,c
  3446  0017E6  1002               	iorwf	(?_digitalRead+1)^0,w,c
  3447  0017E8  B4D8               	btfsc	status,2,c
  3448  0017EA  EFF9  F00B         	goto	u1981
  3449  0017EE  EFFB  F00B         	goto	u1980
  3450  0017F2                     u1981:
  3451  0017F2  EF0E  F00C         	goto	l2413
  3452  0017F6                     u1980:
  3453  0017F6                     
  3454                           ;keypad.c: 37:         ((newRead) |= (1<<(i)));
  3455  0017F6  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  3456  0017FA  0E01               	movlw	1
  3457  0017FC  6E0B               	movwf	(??_kpDebounce+1)^0,c
  3458  0017FE  0E00               	movlw	0
  3459  001800  6E0C               	movwf	(??_kpDebounce+2)^0,c
  3460  001802  2A0A               	incf	??_kpDebounce^0,f,c
  3461  001804  EF07  F00C         	goto	u1994
  3462  001808                     u1995:
  3463  001808  90D8               	bcf	status,0,c
  3464  00180A  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  3465  00180C  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  3466  00180E                     u1994:
  3467  00180E  2E0A               	decfsz	??_kpDebounce^0,f,c
  3468  001810  EF04  F00C         	goto	u1995
  3469  001814  500B               	movf	(??_kpDebounce+1)^0,w,c
  3470  001816  123A               	iorwf	kpDebounce@newRead^0,f,c
  3471  001818  500C               	movf	(??_kpDebounce+2)^0,w,c
  3472  00181A  123B               	iorwf	(kpDebounce@newRead+1)^0,f,c
  3473  00181C                     l2413:
  3474                           
  3475                           ;keypad.c: 39:       if(digitalRead(PIN_B1)){
  3476  00181C  0E00               	movlw	0
  3477  00181E  6E02               	movwf	(digitalRead@pin+1)^0,c
  3478  001820  0E09               	movlw	9
  3479  001822  6E01               	movwf	digitalRead@pin^0,c
  3480  001824  EC08  F00B         	call	_digitalRead	;wreg free
  3481  001828  5001               	movf	?_digitalRead^0,w,c
  3482  00182A  1002               	iorwf	(?_digitalRead+1)^0,w,c
  3483  00182C  B4D8               	btfsc	status,2,c
  3484  00182E  EF1B  F00C         	goto	u2001
  3485  001832  EF1D  F00C         	goto	u2000
  3486  001836                     u2001:
  3487  001836  EF32  F00C         	goto	l2417
  3488  00183A                     u2000:
  3489  00183A                     
  3490                           ;keypad.c: 40:         ((newRead) |= (1<<((i+5))));
  3491  00183A  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  3492  00183E  0E05               	movlw	5
  3493  001840  260A               	addwf	??_kpDebounce^0,f,c
  3494  001842  0E01               	movlw	1
  3495  001844  6E0B               	movwf	(??_kpDebounce+1)^0,c
  3496  001846  0E00               	movlw	0
  3497  001848  6E0C               	movwf	(??_kpDebounce+2)^0,c
  3498  00184A  2A0A               	incf	??_kpDebounce^0,f,c
  3499  00184C  EF2B  F00C         	goto	u2014
  3500  001850                     u2015:
  3501  001850  90D8               	bcf	status,0,c
  3502  001852  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  3503  001854  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  3504  001856                     u2014:
  3505  001856  2E0A               	decfsz	??_kpDebounce^0,f,c
  3506  001858  EF28  F00C         	goto	u2015
  3507  00185C  500B               	movf	(??_kpDebounce+1)^0,w,c
  3508  00185E  123A               	iorwf	kpDebounce@newRead^0,f,c
  3509  001860  500C               	movf	(??_kpDebounce+2)^0,w,c
  3510  001862  123B               	iorwf	(kpDebounce@newRead+1)^0,f,c
  3511  001864                     l2417:
  3512                           
  3513                           ;keypad.c: 42:     }
  3514  001864  4A0D               	infsnz	kpDebounce@i^0,f,c
  3515  001866  2A0E               	incf	(kpDebounce@i+1)^0,f,c
  3516  001868  EFC5  F00B         	goto	l2405
  3517  00186C                     l2421:
  3518                           
  3519                           ;keypad.c: 43:     if (oldRead == newRead) {
  3520  00186C  503A               	movf	kpDebounce@newRead^0,w,c
  3521  00186E  1838               	xorwf	kpDebounce@oldRead^0,w,c
  3522  001870  E107               	bnz	u2021
  3523  001872  503B               	movf	(kpDebounce@newRead+1)^0,w,c
  3524  001874  1839               	xorwf	(kpDebounce@oldRead+1)^0,w,c
  3525  001876  A4D8               	btfss	status,2,c
  3526  001878  EF40  F00C         	goto	u2021
  3527  00187C  EF42  F00C         	goto	u2020
  3528  001880                     u2021:
  3529  001880  EF45  F00C         	goto	l2425
  3530  001884                     u2020:
  3531  001884                     
  3532                           ;keypad.c: 44:         tempo--;
  3533  001884  0644               	decf	kpDebounce@tempo^0,f,c
  3534                           
  3535                           ;keypad.c: 45:     } else {
  3536  001886  EF4B  F00C         	goto	l232
  3537  00188A                     l2425:
  3538                           
  3539                           ;keypad.c: 46:         tempo = 1;
  3540  00188A  0E01               	movlw	1
  3541  00188C  6E44               	movwf	kpDebounce@tempo^0,c
  3542  00188E                     
  3543                           ;keypad.c: 47:         oldRead = newRead;
  3544  00188E  C03A  F038         	movff	kpDebounce@newRead,kpDebounce@oldRead
  3545  001892  C03B  F039         	movff	kpDebounce@newRead+1,kpDebounce@oldRead+1
  3546  001896                     l232:
  3547                           
  3548                           ;keypad.c: 49:     if (tempo == 0) {
  3549  001896  5044               	movf	kpDebounce@tempo^0,w,c
  3550  001898  A4D8               	btfss	status,2,c
  3551  00189A  EF51  F00C         	goto	u2031
  3552  00189E  EF53  F00C         	goto	u2030
  3553  0018A2                     u2031:
  3554  0018A2  EF57  F00C         	goto	l234
  3555  0018A6                     u2030:
  3556  0018A6                     
  3557                           ;keypad.c: 50:         keys = oldRead;
  3558  0018A6  C038  F03C         	movff	kpDebounce@oldRead,_keys
  3559  0018AA  C039  F03D         	movff	kpDebounce@oldRead+1,_keys+1
  3560  0018AE                     l234:
  3561  0018AE  0012               	return		;funcret
  3562  0018B0                     __end_of_kpDebounce:
  3563                           	callstack 0
  3564                           
  3565 ;; *************** function _digitalRead *****************
  3566 ;; Defined at:
  3567 ;;		line 39 in file "io.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;  pin             2    0[COMRAM] int 
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;		None
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  2    0[COMRAM] int 
  3574 ;; Registers used:
  3575 ;;		wreg, status,2, status,0
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3581 ;;      Params:         2       0       0       0       0       0       0
  3582 ;;      Locals:         0       0       0       0       0       0       0
  3583 ;;      Temps:          3       0       0       0       0       0       0
  3584 ;;      Totals:         5       0       0       0       0       0       0
  3585 ;;Total ram usage:        5 bytes
  3586 ;; Hardware stack levels used: 1
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_kpDebounce
  3591 ;;		_read_SCL
  3592 ;;		_read_SDA
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text20
  3597  001610                     __ptext20:
  3598                           	callstack 0
  3599  001610                     _digitalRead:
  3600                           	callstack 28
  3601  001610                     
  3602                           ;io.c: 40:     if(pin <8){
  3603  001610  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3604  001612  EF16  F00B         	goto	u1700
  3605  001616  5002               	movf	(digitalRead@pin+1)^0,w,c
  3606  001618  E107               	bnz	u1701
  3607  00161A  0E08               	movlw	8
  3608  00161C  5C01               	subwf	digitalRead@pin^0,w,c
  3609  00161E  B0D8               	btfsc	status,0,c
  3610  001620  EF14  F00B         	goto	u1701
  3611  001624  EF16  F00B         	goto	u1700
  3612  001628                     u1701:
  3613  001628  EF2A  F00B         	goto	l2285
  3614  00162C                     u1700:
  3615  00162C                     
  3616                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  3617  00162C  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3618  001630  0E01               	movlw	1
  3619  001632  6E04               	movwf	(??_digitalRead+1)^0,c
  3620  001634  2A03               	incf	??_digitalRead^0,f,c
  3621  001636  EF1F  F00B         	goto	u1714
  3622  00163A                     u1715:
  3623  00163A  90D8               	bcf	status,0,c
  3624  00163C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3625  00163E                     u1714:
  3626  00163E  2E03               	decfsz	??_digitalRead^0,f,c
  3627  001640  EF1D  F00B         	goto	u1715
  3628  001644  5004               	movf	(??_digitalRead+1)^0,w,c
  3629  001646  1480               	andwf	128,w,c	;volatile
  3630  001648  6E05               	movwf	(??_digitalRead+2)^0,c
  3631  00164A  5005               	movf	(??_digitalRead+2)^0,w,c
  3632  00164C  6E01               	movwf	?_digitalRead^0,c
  3633  00164E  6A02               	clrf	(?_digitalRead+1)^0,c
  3634  001650  EFBC  F00B         	goto	l165
  3635  001654                     l2285:
  3636  001654  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3637  001656  EF38  F00B         	goto	u1720
  3638  00165A  5002               	movf	(digitalRead@pin+1)^0,w,c
  3639  00165C  E107               	bnz	u1721
  3640  00165E  0E10               	movlw	16
  3641  001660  5C01               	subwf	digitalRead@pin^0,w,c
  3642  001662  B0D8               	btfsc	status,0,c
  3643  001664  EF36  F00B         	goto	u1721
  3644  001668  EF38  F00B         	goto	u1720
  3645  00166C                     u1721:
  3646  00166C  EF4E  F00B         	goto	l2293
  3647  001670                     u1720:
  3648  001670                     
  3649                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  3650  001670  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3651  001674  0EF8               	movlw	-8
  3652  001676  2603               	addwf	??_digitalRead^0,f,c
  3653  001678  0E01               	movlw	1
  3654  00167A  6E04               	movwf	(??_digitalRead+1)^0,c
  3655  00167C  2A03               	incf	??_digitalRead^0,f,c
  3656  00167E  EF43  F00B         	goto	u1734
  3657  001682                     u1735:
  3658  001682  90D8               	bcf	status,0,c
  3659  001684  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3660  001686                     u1734:
  3661  001686  2E03               	decfsz	??_digitalRead^0,f,c
  3662  001688  EF41  F00B         	goto	u1735
  3663  00168C  5004               	movf	(??_digitalRead+1)^0,w,c
  3664  00168E  1481               	andwf	129,w,c	;volatile
  3665  001690  6E05               	movwf	(??_digitalRead+2)^0,c
  3666  001692  5005               	movf	(??_digitalRead+2)^0,w,c
  3667  001694  6E01               	movwf	?_digitalRead^0,c
  3668  001696  6A02               	clrf	(?_digitalRead+1)^0,c
  3669  001698  EFBC  F00B         	goto	l165
  3670  00169C                     l2293:
  3671  00169C  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3672  00169E  EF5C  F00B         	goto	u1740
  3673  0016A2  5002               	movf	(digitalRead@pin+1)^0,w,c
  3674  0016A4  E107               	bnz	u1741
  3675  0016A6  0E18               	movlw	24
  3676  0016A8  5C01               	subwf	digitalRead@pin^0,w,c
  3677  0016AA  B0D8               	btfsc	status,0,c
  3678  0016AC  EF5A  F00B         	goto	u1741
  3679  0016B0  EF5C  F00B         	goto	u1740
  3680  0016B4                     u1741:
  3681  0016B4  EF72  F00B         	goto	l2301
  3682  0016B8                     u1740:
  3683  0016B8                     
  3684                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  3685  0016B8  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3686  0016BC  0EF0               	movlw	-16
  3687  0016BE  2603               	addwf	??_digitalRead^0,f,c
  3688  0016C0  0E01               	movlw	1
  3689  0016C2  6E04               	movwf	(??_digitalRead+1)^0,c
  3690  0016C4  2A03               	incf	??_digitalRead^0,f,c
  3691  0016C6  EF67  F00B         	goto	u1754
  3692  0016CA                     u1755:
  3693  0016CA  90D8               	bcf	status,0,c
  3694  0016CC  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3695  0016CE                     u1754:
  3696  0016CE  2E03               	decfsz	??_digitalRead^0,f,c
  3697  0016D0  EF65  F00B         	goto	u1755
  3698  0016D4  5004               	movf	(??_digitalRead+1)^0,w,c
  3699  0016D6  1482               	andwf	130,w,c	;volatile
  3700  0016D8  6E05               	movwf	(??_digitalRead+2)^0,c
  3701  0016DA  5005               	movf	(??_digitalRead+2)^0,w,c
  3702  0016DC  6E01               	movwf	?_digitalRead^0,c
  3703  0016DE  6A02               	clrf	(?_digitalRead+1)^0,c
  3704  0016E0  EFBC  F00B         	goto	l165
  3705  0016E4                     l2301:
  3706  0016E4  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3707  0016E6  EF80  F00B         	goto	u1760
  3708  0016EA  5002               	movf	(digitalRead@pin+1)^0,w,c
  3709  0016EC  E107               	bnz	u1761
  3710  0016EE  0E20               	movlw	32
  3711  0016F0  5C01               	subwf	digitalRead@pin^0,w,c
  3712  0016F2  B0D8               	btfsc	status,0,c
  3713  0016F4  EF7E  F00B         	goto	u1761
  3714  0016F8  EF80  F00B         	goto	u1760
  3715  0016FC                     u1761:
  3716  0016FC  EF96  F00B         	goto	l2309
  3717  001700                     u1760:
  3718  001700                     
  3719                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  3720  001700  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3721  001704  0EE8               	movlw	-24
  3722  001706  2603               	addwf	??_digitalRead^0,f,c
  3723  001708  0E01               	movlw	1
  3724  00170A  6E04               	movwf	(??_digitalRead+1)^0,c
  3725  00170C  2A03               	incf	??_digitalRead^0,f,c
  3726  00170E  EF8B  F00B         	goto	u1774
  3727  001712                     u1775:
  3728  001712  90D8               	bcf	status,0,c
  3729  001714  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3730  001716                     u1774:
  3731  001716  2E03               	decfsz	??_digitalRead^0,f,c
  3732  001718  EF89  F00B         	goto	u1775
  3733  00171C  5004               	movf	(??_digitalRead+1)^0,w,c
  3734  00171E  1483               	andwf	131,w,c	;volatile
  3735  001720  6E05               	movwf	(??_digitalRead+2)^0,c
  3736  001722  5005               	movf	(??_digitalRead+2)^0,w,c
  3737  001724  6E01               	movwf	?_digitalRead^0,c
  3738  001726  6A02               	clrf	(?_digitalRead+1)^0,c
  3739  001728  EFBC  F00B         	goto	l165
  3740  00172C                     l2309:
  3741  00172C  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3742  00172E  EFA4  F00B         	goto	u1780
  3743  001732  5002               	movf	(digitalRead@pin+1)^0,w,c
  3744  001734  E107               	bnz	u1781
  3745  001736  0E28               	movlw	40
  3746  001738  5C01               	subwf	digitalRead@pin^0,w,c
  3747  00173A  B0D8               	btfsc	status,0,c
  3748  00173C  EFA2  F00B         	goto	u1781
  3749  001740  EFA4  F00B         	goto	u1780
  3750  001744                     u1781:
  3751  001744  EFBA  F00B         	goto	l170
  3752  001748                     u1780:
  3753  001748                     
  3754                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  3755  001748  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3756  00174C  0EE0               	movlw	-32
  3757  00174E  2603               	addwf	??_digitalRead^0,f,c
  3758  001750  0E01               	movlw	1
  3759  001752  6E04               	movwf	(??_digitalRead+1)^0,c
  3760  001754  2A03               	incf	??_digitalRead^0,f,c
  3761  001756  EFAF  F00B         	goto	u1794
  3762  00175A                     u1795:
  3763  00175A  90D8               	bcf	status,0,c
  3764  00175C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3765  00175E                     u1794:
  3766  00175E  2E03               	decfsz	??_digitalRead^0,f,c
  3767  001760  EFAD  F00B         	goto	u1795
  3768  001764  5004               	movf	(??_digitalRead+1)^0,w,c
  3769  001766  1484               	andwf	132,w,c	;volatile
  3770  001768  6E05               	movwf	(??_digitalRead+2)^0,c
  3771  00176A  5005               	movf	(??_digitalRead+2)^0,w,c
  3772  00176C  6E01               	movwf	?_digitalRead^0,c
  3773  00176E  6A02               	clrf	(?_digitalRead+1)^0,c
  3774  001770  EFBC  F00B         	goto	l165
  3775  001774                     l170:
  3776  001774                     
  3777                           ;io.c: 51:     return -1;
  3778  001774  6801               	setf	?_digitalRead^0,c
  3779  001776  6802               	setf	(?_digitalRead+1)^0,c
  3780  001778                     l165:
  3781  001778  0012               	return		;funcret
  3782  00177A                     __end_of_digitalRead:
  3783                           	callstack 0
  3784                           
  3785 ;; *************** function ___lldiv *****************
  3786 ;; Defined at:
  3787 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__lldiv.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  dividend        4   12[COMRAM] unsigned long 
  3790 ;;  divisor         4   16[COMRAM] unsigned long 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  quotient        4   20[COMRAM] unsigned long 
  3793 ;;  counter         1   24[COMRAM] unsigned char 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  4   12[COMRAM] unsigned long 
  3796 ;; Registers used:
  3797 ;;		wreg, status,2, status,0
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3803 ;;      Params:         8       0       0       0       0       0       0
  3804 ;;      Locals:         5       0       0       0       0       0       0
  3805 ;;      Temps:          0       0       0       0       0       0       0
  3806 ;;      Totals:        13       0       0       0       0       0       0
  3807 ;;Total ram usage:       13 bytes
  3808 ;; Hardware stack levels used: 1
  3809 ;; This function calls:
  3810 ;;		Nothing
  3811 ;; This function is called by:
  3812 ;;		_levelocidade
  3813 ;;		_leTeclado
  3814 ;;		_serialcom
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text21
  3819  001AF4                     __ptext21:
  3820                           	callstack 0
  3821  001AF4                     ___lldiv:
  3822                           	callstack 29
  3823  001AF4  0E00               	movlw	0
  3824  001AF6  6E15               	movwf	___lldiv@quotient^0,c
  3825  001AF8  0E00               	movlw	0
  3826  001AFA  6E16               	movwf	(___lldiv@quotient+1)^0,c
  3827  001AFC  0E00               	movlw	0
  3828  001AFE  6E17               	movwf	(___lldiv@quotient+2)^0,c
  3829  001B00  0E00               	movlw	0
  3830  001B02  6E18               	movwf	(___lldiv@quotient+3)^0,c
  3831  001B04  5011               	movf	___lldiv@divisor^0,w,c
  3832  001B06  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  3833  001B08  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  3834  001B0A  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  3835  001B0C  B4D8               	btfsc	status,2,c
  3836  001B0E  EF8B  F00D         	goto	u2121
  3837  001B12  EF8D  F00D         	goto	u2120
  3838  001B16                     u2121:
  3839  001B16  EFC3  F00D         	goto	l591
  3840  001B1A                     u2120:
  3841  001B1A  0E01               	movlw	1
  3842  001B1C  6E19               	movwf	___lldiv@counter^0,c
  3843  001B1E  EF97  F00D         	goto	l2491
  3844  001B22                     l2489:
  3845  001B22  90D8               	bcf	status,0,c
  3846  001B24  3611               	rlcf	___lldiv@divisor^0,f,c
  3847  001B26  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  3848  001B28  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  3849  001B2A  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  3850  001B2C  2A19               	incf	___lldiv@counter^0,f,c
  3851  001B2E                     l2491:
  3852  001B2E  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  3853  001B30  EF9C  F00D         	goto	u2131
  3854  001B34  EF9E  F00D         	goto	u2130
  3855  001B38                     u2131:
  3856  001B38  EF91  F00D         	goto	l2489
  3857  001B3C                     u2130:
  3858  001B3C                     l2493:
  3859  001B3C  90D8               	bcf	status,0,c
  3860  001B3E  3615               	rlcf	___lldiv@quotient^0,f,c
  3861  001B40  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  3862  001B42  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  3863  001B44  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  3864  001B46  5011               	movf	___lldiv@divisor^0,w,c
  3865  001B48  5C0D               	subwf	___lldiv@dividend^0,w,c
  3866  001B4A  5012               	movf	(___lldiv@divisor+1)^0,w,c
  3867  001B4C  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  3868  001B4E  5013               	movf	(___lldiv@divisor+2)^0,w,c
  3869  001B50  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  3870  001B52  5014               	movf	(___lldiv@divisor+3)^0,w,c
  3871  001B54  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  3872  001B56  A0D8               	btfss	status,0,c
  3873  001B58  EFB0  F00D         	goto	u2141
  3874  001B5C  EFB2  F00D         	goto	u2140
  3875  001B60                     u2141:
  3876  001B60  EFBB  F00D         	goto	l2501
  3877  001B64                     u2140:
  3878  001B64  5011               	movf	___lldiv@divisor^0,w,c
  3879  001B66  5E0D               	subwf	___lldiv@dividend^0,f,c
  3880  001B68  5012               	movf	(___lldiv@divisor+1)^0,w,c
  3881  001B6A  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  3882  001B6C  5013               	movf	(___lldiv@divisor+2)^0,w,c
  3883  001B6E  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  3884  001B70  5014               	movf	(___lldiv@divisor+3)^0,w,c
  3885  001B72  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  3886  001B74  8015               	bsf	___lldiv@quotient^0,0,c
  3887  001B76                     l2501:
  3888  001B76  90D8               	bcf	status,0,c
  3889  001B78  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  3890  001B7A  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  3891  001B7C  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  3892  001B7E  3211               	rrcf	___lldiv@divisor^0,f,c
  3893  001B80  2E19               	decfsz	___lldiv@counter^0,f,c
  3894  001B82  EF9E  F00D         	goto	l2493
  3895  001B86                     l591:
  3896  001B86  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  3897  001B8A  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  3898  001B8E  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  3899  001B92  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  3900  001B96  0012               	return		;funcret
  3901  001B98                     __end_of___lldiv:
  3902                           	callstack 0
  3903                           
  3904 ;; *************** function _lcdInit *****************
  3905 ;; Defined at:
  3906 ;;		line 72 in file "lcd.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;		None
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      void 
  3913 ;; Registers used:
  3914 ;;		wreg, status,2, status,0, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3920 ;;      Params:         0       0       0       0       0       0       0
  3921 ;;      Locals:         0       0       0       0       0       0       0
  3922 ;;      Temps:          0       0       0       0       0       0       0
  3923 ;;      Totals:         0       0       0       0       0       0       0
  3924 ;;Total ram usage:        0 bytes
  3925 ;; Hardware stack levels used: 1
  3926 ;; Hardware stack levels required when called: 5
  3927 ;; This function calls:
  3928 ;;		_delayMicro
  3929 ;;		_delayMili
  3930 ;;		_lcdCommand
  3931 ;;		_pinMode
  3932 ;;		_pushNibble
  3933 ;;		_soInit
  3934 ;; This function is called by:
  3935 ;;		_main
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text22
  3940  001A40                     __ptext22:
  3941                           	callstack 0
  3942  001A40                     _lcdInit:
  3943                           	callstack 25
  3944  001A40                     
  3945                           ;lcd.c: 73:  pinMode(PIN_D4, 0);
  3946  001A40  0E00               	movlw	0
  3947  001A42  6E02               	movwf	(pinMode@pin+1)^0,c
  3948  001A44  0E1C               	movlw	28
  3949  001A46  6E01               	movwf	pinMode@pin^0,c
  3950  001A48  0E00               	movlw	0
  3951  001A4A  6E04               	movwf	(pinMode@type+1)^0,c
  3952  001A4C  0E00               	movlw	0
  3953  001A4E  6E03               	movwf	pinMode@type^0,c
  3954  001A50  EC0B  F008         	call	_pinMode	;wreg free
  3955                           
  3956                           ;lcd.c: 74:  pinMode(PIN_D5, 0);
  3957  001A54  0E00               	movlw	0
  3958  001A56  6E02               	movwf	(pinMode@pin+1)^0,c
  3959  001A58  0E1D               	movlw	29
  3960  001A5A  6E01               	movwf	pinMode@pin^0,c
  3961  001A5C  0E00               	movlw	0
  3962  001A5E  6E04               	movwf	(pinMode@type+1)^0,c
  3963  001A60  0E00               	movlw	0
  3964  001A62  6E03               	movwf	pinMode@type^0,c
  3965  001A64  EC0B  F008         	call	_pinMode	;wreg free
  3966                           
  3967                           ;lcd.c: 75:  soInit();
  3968  001A68  EC7E  F010         	call	_soInit	;wreg free
  3969                           
  3970                           ;lcd.c: 76:  delayMili(15);
  3971  001A6C  0E00               	movlw	0
  3972  001A6E  6E02               	movwf	(delayMili@a+1)^0,c
  3973  001A70  0E0F               	movlw	15
  3974  001A72  6E01               	movwf	delayMili@a^0,c
  3975  001A74  ECD3  F010         	call	_delayMili	;wreg free
  3976                           
  3977                           ;lcd.c: 78:  pushNibble(0x03, 0);
  3978  001A78  0E00               	movlw	0
  3979  001A7A  6E0B               	movwf	(pushNibble@rs+1)^0,c
  3980  001A7C  0E00               	movlw	0
  3981  001A7E  6E0A               	movwf	pushNibble@rs^0,c
  3982  001A80  0E03               	movlw	3
  3983  001A82  EC40  F011         	call	_pushNibble
  3984                           
  3985                           ;lcd.c: 79:  delayMili(5);
  3986  001A86  0E00               	movlw	0
  3987  001A88  6E02               	movwf	(delayMili@a+1)^0,c
  3988  001A8A  0E05               	movlw	5
  3989  001A8C  6E01               	movwf	delayMili@a^0,c
  3990  001A8E  ECD3  F010         	call	_delayMili	;wreg free
  3991                           
  3992                           ;lcd.c: 80:  pushNibble(0x03, 0);
  3993  001A92  0E00               	movlw	0
  3994  001A94  6E0B               	movwf	(pushNibble@rs+1)^0,c
  3995  001A96  0E00               	movlw	0
  3996  001A98  6E0A               	movwf	pushNibble@rs^0,c
  3997  001A9A  0E03               	movlw	3
  3998  001A9C  EC40  F011         	call	_pushNibble
  3999  001AA0                     
  4000                           ;lcd.c: 81:  delayMicro(160);
  4001  001AA0  0E00               	movlw	0
  4002  001AA2  6E02               	movwf	(delayMicro@a+1)^0,c
  4003  001AA4  0EA0               	movlw	160
  4004  001AA6  6E01               	movwf	delayMicro@a^0,c
  4005  001AA8  ECB6  F011         	call	_delayMicro	;wreg free
  4006  001AAC                     
  4007                           ;lcd.c: 82:  pushNibble(0x03, 0);
  4008  001AAC  0E00               	movlw	0
  4009  001AAE  6E0B               	movwf	(pushNibble@rs+1)^0,c
  4010  001AB0  0E00               	movlw	0
  4011  001AB2  6E0A               	movwf	pushNibble@rs^0,c
  4012  001AB4  0E03               	movlw	3
  4013  001AB6  EC40  F011         	call	_pushNibble
  4014                           
  4015                           ;lcd.c: 83:  delayMicro(160);
  4016  001ABA  0E00               	movlw	0
  4017  001ABC  6E02               	movwf	(delayMicro@a+1)^0,c
  4018  001ABE  0EA0               	movlw	160
  4019  001AC0  6E01               	movwf	delayMicro@a^0,c
  4020  001AC2  ECB6  F011         	call	_delayMicro	;wreg free
  4021  001AC6                     
  4022                           ;lcd.c: 85:  pushNibble(0x02, 0);
  4023  001AC6  0E00               	movlw	0
  4024  001AC8  6E0B               	movwf	(pushNibble@rs+1)^0,c
  4025  001ACA  0E00               	movlw	0
  4026  001ACC  6E0A               	movwf	pushNibble@rs^0,c
  4027  001ACE  0E02               	movlw	2
  4028  001AD0  EC40  F011         	call	_pushNibble
  4029  001AD4                     
  4030                           ;lcd.c: 86:  delayMili(10);
  4031  001AD4  0E00               	movlw	0
  4032  001AD6  6E02               	movwf	(delayMili@a+1)^0,c
  4033  001AD8  0E0A               	movlw	10
  4034  001ADA  6E01               	movwf	delayMili@a^0,c
  4035  001ADC  ECD3  F010         	call	_delayMili	;wreg free
  4036  001AE0                     
  4037                           ;lcd.c: 88:  lcdCommand(0x28);
  4038  001AE0  0E28               	movlw	40
  4039  001AE2  EC73  F011         	call	_lcdCommand
  4040  001AE6                     
  4041                           ;lcd.c: 89:  lcdCommand(0x08 + 0x04);
  4042  001AE6  0E0C               	movlw	12
  4043  001AE8  EC73  F011         	call	_lcdCommand
  4044  001AEC                     
  4045                           ;lcd.c: 90:  lcdCommand(0x01);
  4046  001AEC  0E01               	movlw	1
  4047  001AEE  EC73  F011         	call	_lcdCommand
  4048  001AF2  0012               	return		;funcret
  4049  001AF4                     __end_of_lcdInit:
  4050                           	callstack 0
  4051                           
  4052 ;; *************** function _pushNibble *****************
  4053 ;; Defined at:
  4054 ;;		line 25 in file "lcd.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  value           1    wreg     unsigned char 
  4057 ;;  rs              2    9[COMRAM] int 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  value           1   11[COMRAM] unsigned char 
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg, status,2, status,0, cstack
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4069 ;;      Params:         2       0       0       0       0       0       0
  4070 ;;      Locals:         1       0       0       0       0       0       0
  4071 ;;      Temps:          0       0       0       0       0       0       0
  4072 ;;      Totals:         3       0       0       0       0       0       0
  4073 ;;Total ram usage:        3 bytes
  4074 ;; Hardware stack levels used: 1
  4075 ;; Hardware stack levels required when called: 3
  4076 ;; This function calls:
  4077 ;;		_digitalWrite
  4078 ;;		_pulseEnablePin
  4079 ;;		_soWrite
  4080 ;; This function is called by:
  4081 ;;		_lcdInit
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text23
  4086  002280                     __ptext23:
  4087                           	callstack 0
  4088  002280                     _pushNibble:
  4089                           	callstack 26
  4090                           
  4091                           ;incstack = 0
  4092                           ;pushNibble@value stored from wreg
  4093  002280  6E0C               	movwf	pushNibble@value^0,c
  4094  002282                     
  4095                           ;lcd.c: 26:  soWrite(value);
  4096  002282  C00C  F007         	movff	pushNibble@value,soWrite@value
  4097  002286  6A08               	clrf	(soWrite@value+1)^0,c
  4098  002288  EC12  F010         	call	_soWrite	;wreg free
  4099                           
  4100                           ;lcd.c: 27:  digitalWrite(PIN_D5, rs);
  4101  00228C  0E00               	movlw	0
  4102  00228E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4103  002290  0E1D               	movlw	29
  4104  002292  6E01               	movwf	digitalWrite@pin^0,c
  4105  002294  C00A  F003         	movff	pushNibble@rs,digitalWrite@value
  4106  002298  C00B  F004         	movff	pushNibble@rs+1,digitalWrite@value+1
  4107  00229C  ECE4  F006         	call	_digitalWrite	;wreg free
  4108                           
  4109                           ;lcd.c: 28:  pulseEnablePin();
  4110  0022A0  EC5D  F010         	call	_pulseEnablePin	;wreg free
  4111  0022A4  0012               	return		;funcret
  4112  0022A6                     __end_of_pushNibble:
  4113                           	callstack 0
  4114                           
  4115 ;; *************** function _lcdCommand *****************
  4116 ;; Defined at:
  4117 ;;		line 40 in file "lcd.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;  value           1    wreg     unsigned char 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  value           1   13[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      void 
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0, cstack
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4131 ;;      Params:         0       0       0       0       0       0       0
  4132 ;;      Locals:         1       0       0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0
  4134 ;;      Totals:         1       0       0       0       0       0       0
  4135 ;;Total ram usage:        1 bytes
  4136 ;; Hardware stack levels used: 1
  4137 ;; Hardware stack levels required when called: 4
  4138 ;; This function calls:
  4139 ;;		_delayMili
  4140 ;;		_pushByte
  4141 ;; This function is called by:
  4142 ;;		_lcdPosition
  4143 ;;		_lcdInit
  4144 ;;		_leTeclado
  4145 ;;		_serialcom
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text24
  4150  0022E6                     __ptext24:
  4151                           	callstack 0
  4152  0022E6                     _lcdCommand:
  4153                           	callstack 25
  4154                           
  4155                           ;incstack = 0
  4156                           ;lcdCommand@value stored from wreg
  4157  0022E6  6E0E               	movwf	lcdCommand@value^0,c
  4158  0022E8                     
  4159                           ;lcd.c: 41:  pushByte(value, 0);
  4160  0022E8  0E00               	movlw	0
  4161  0022EA  6E0B               	movwf	(pushByte@rs+1)^0,c
  4162  0022EC  0E00               	movlw	0
  4163  0022EE  6E0A               	movwf	pushByte@rs^0,c
  4164  0022F0  500E               	movf	lcdCommand@value^0,w,c
  4165  0022F2  EC3B  F00F         	call	_pushByte
  4166                           
  4167                           ;lcd.c: 42:  delayMili(2);
  4168  0022F6  0E00               	movlw	0
  4169  0022F8  6E02               	movwf	(delayMili@a+1)^0,c
  4170  0022FA  0E02               	movlw	2
  4171  0022FC  6E01               	movwf	delayMili@a^0,c
  4172  0022FE  ECD3  F010         	call	_delayMili	;wreg free
  4173  002302  0012               	return		;funcret
  4174  002304                     __end_of_lcdCommand:
  4175                           	callstack 0
  4176                           
  4177 ;; *************** function _pushByte *****************
  4178 ;; Defined at:
  4179 ;;		line 31 in file "lcd.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  value           1    wreg     unsigned char 
  4182 ;;  rs              2    9[COMRAM] int 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  value           1   12[COMRAM] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4194 ;;      Params:         2       0       0       0       0       0       0
  4195 ;;      Locals:         1       0       0       0       0       0       0
  4196 ;;      Temps:          1       0       0       0       0       0       0
  4197 ;;      Totals:         4       0       0       0       0       0       0
  4198 ;;Total ram usage:        4 bytes
  4199 ;; Hardware stack levels used: 1
  4200 ;; Hardware stack levels required when called: 3
  4201 ;; This function calls:
  4202 ;;		_digitalWrite
  4203 ;;		_pulseEnablePin
  4204 ;;		_soWrite
  4205 ;; This function is called by:
  4206 ;;		_lcdCommand
  4207 ;;		_lcdChar
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text25
  4212  001E76                     __ptext25:
  4213                           	callstack 0
  4214  001E76                     _pushByte:
  4215                           	callstack 24
  4216                           
  4217                           ;incstack = 0
  4218                           ;pushByte@value stored from wreg
  4219  001E76  6E0D               	movwf	pushByte@value^0,c
  4220  001E78                     
  4221                           ;lcd.c: 32:  soWrite(value >> 4);
  4222  001E78  C00D  F00C         	movff	pushByte@value,??_pushByte
  4223  001E7C  3A0C               	swapf	??_pushByte^0,f,c
  4224  001E7E  0E0F               	movlw	15
  4225  001E80  160C               	andwf	??_pushByte^0,f,c
  4226  001E82  500C               	movf	??_pushByte^0,w,c
  4227  001E84  6E07               	movwf	soWrite@value^0,c
  4228  001E86  6A08               	clrf	(soWrite@value+1)^0,c
  4229  001E88  EC12  F010         	call	_soWrite	;wreg free
  4230                           
  4231                           ;lcd.c: 33:  digitalWrite(PIN_D5, rs);
  4232  001E8C  0E00               	movlw	0
  4233  001E8E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4234  001E90  0E1D               	movlw	29
  4235  001E92  6E01               	movwf	digitalWrite@pin^0,c
  4236  001E94  C00A  F003         	movff	pushByte@rs,digitalWrite@value
  4237  001E98  C00B  F004         	movff	pushByte@rs+1,digitalWrite@value+1
  4238  001E9C  ECE4  F006         	call	_digitalWrite	;wreg free
  4239                           
  4240                           ;lcd.c: 34:  pulseEnablePin();
  4241  001EA0  EC5D  F010         	call	_pulseEnablePin	;wreg free
  4242                           
  4243                           ;lcd.c: 36:  soWrite(value & 0x0F);
  4244  001EA4  C00D  F00C         	movff	pushByte@value,??_pushByte
  4245  001EA8  0E0F               	movlw	15
  4246  001EAA  160C               	andwf	??_pushByte^0,f,c
  4247  001EAC  500C               	movf	??_pushByte^0,w,c
  4248  001EAE  6E07               	movwf	soWrite@value^0,c
  4249  001EB0  6A08               	clrf	(soWrite@value+1)^0,c
  4250  001EB2  EC12  F010         	call	_soWrite	;wreg free
  4251                           
  4252                           ;lcd.c: 37:  digitalWrite(PIN_D5, rs);
  4253  001EB6  0E00               	movlw	0
  4254  001EB8  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4255  001EBA  0E1D               	movlw	29
  4256  001EBC  6E01               	movwf	digitalWrite@pin^0,c
  4257  001EBE  C00A  F003         	movff	pushByte@rs,digitalWrite@value
  4258  001EC2  C00B  F004         	movff	pushByte@rs+1,digitalWrite@value+1
  4259  001EC6  ECE4  F006         	call	_digitalWrite	;wreg free
  4260                           
  4261                           ;lcd.c: 38:  pulseEnablePin();
  4262  001ECA  EC5D  F010         	call	_pulseEnablePin	;wreg free
  4263  001ECE  0012               	return		;funcret
  4264  001ED0                     __end_of_pushByte:
  4265                           	callstack 0
  4266                           
  4267 ;; *************** function _soWrite *****************
  4268 ;; Defined at:
  4269 ;;		line 18 in file "so.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;  value           2    6[COMRAM] int 
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;  i               1    8[COMRAM] unsigned char 
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      void 
  4276 ;; Registers used:
  4277 ;;		wreg, status,2, status,0, cstack
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4283 ;;      Params:         2       0       0       0       0       0       0
  4284 ;;      Locals:         1       0       0       0       0       0       0
  4285 ;;      Temps:          0       0       0       0       0       0       0
  4286 ;;      Totals:         3       0       0       0       0       0       0
  4287 ;;Total ram usage:        3 bytes
  4288 ;; Hardware stack levels used: 1
  4289 ;; Hardware stack levels required when called: 2
  4290 ;; This function calls:
  4291 ;;		_PulseClockData
  4292 ;;		_PulseEnClock
  4293 ;;		_digitalWrite
  4294 ;; This function is called by:
  4295 ;;		_kpDebounce
  4296 ;;		_pushNibble
  4297 ;;		_pushByte
  4298 ;;		_ssdUpdate
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           	psect	text26
  4303  002024                     __ptext26:
  4304                           	callstack 0
  4305  002024                     _soWrite:
  4306                           	callstack 27
  4307  002024                     
  4308                           ;so.c: 19:  char i;;so.c: 20:  digitalWrite(PIN_B0, 0);
  4309  002024  0E00               	movlw	0
  4310  002026  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4311  002028  0E08               	movlw	8
  4312  00202A  6E01               	movwf	digitalWrite@pin^0,c
  4313  00202C  0E00               	movlw	0
  4314  00202E  6E04               	movwf	(digitalWrite@value+1)^0,c
  4315  002030  0E00               	movlw	0
  4316  002032  6E03               	movwf	digitalWrite@value^0,c
  4317  002034  ECE4  F006         	call	_digitalWrite	;wreg free
  4318  002038                     
  4319                           ;so.c: 21:  for (i = 0; i < 8; i++) {
  4320  002038  0E00               	movlw	0
  4321  00203A  6E09               	movwf	soWrite@i^0,c
  4322  00203C                     l2213:
  4323                           
  4324                           ;so.c: 22:   digitalWrite(PIN_D6, value & 0x80);
  4325  00203C  0E00               	movlw	0
  4326  00203E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4327  002040  0E1E               	movlw	30
  4328  002042  6E01               	movwf	digitalWrite@pin^0,c
  4329  002044  0E80               	movlw	128
  4330  002046  1407               	andwf	soWrite@value^0,w,c
  4331  002048  6E03               	movwf	digitalWrite@value^0,c
  4332  00204A  6A04               	clrf	(digitalWrite@value+1)^0,c
  4333  00204C  ECE4  F006         	call	_digitalWrite	;wreg free
  4334                           
  4335                           ;so.c: 23:   PulseClockData();
  4336  002050  EC16  F011         	call	_PulseClockData	;wreg free
  4337  002054                     
  4338                           ;so.c: 24:   value <<= 1;
  4339  002054  90D8               	bcf	status,0,c
  4340  002056  3607               	rlcf	soWrite@value^0,f,c
  4341  002058  3608               	rlcf	(soWrite@value+1)^0,f,c
  4342  00205A                     
  4343                           ;so.c: 25:  }
  4344  00205A  2A09               	incf	soWrite@i^0,f,c
  4345  00205C  0E07               	movlw	7
  4346  00205E  6409               	cpfsgt	soWrite@i^0,c
  4347  002060  EF34  F010         	goto	u1481
  4348  002064  EF36  F010         	goto	u1480
  4349  002068                     u1481:
  4350  002068  EF1E  F010         	goto	l2213
  4351  00206C                     u1480:
  4352  00206C                     
  4353                           ;so.c: 26:  PulseEnClock();
  4354  00206C  EC01  F011         	call	_PulseEnClock	;wreg free
  4355  002070  0012               	return		;funcret
  4356  002072                     __end_of_soWrite:
  4357                           	callstack 0
  4358                           
  4359 ;; *************** function _PulseEnClock *****************
  4360 ;; Defined at:
  4361 ;;		line 9 in file "so.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  1    wreg      void 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4375 ;;      Params:         0       0       0       0       0       0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0
  4378 ;;      Totals:         0       0       0       0       0       0       0
  4379 ;;Total ram usage:        0 bytes
  4380 ;; Hardware stack levels used: 1
  4381 ;; Hardware stack levels required when called: 1
  4382 ;; This function calls:
  4383 ;;		_digitalWrite
  4384 ;; This function is called by:
  4385 ;;		_soWrite
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           	psect	text27
  4390  002202                     __ptext27:
  4391                           	callstack 0
  4392  002202                     _PulseEnClock:
  4393                           	callstack 27
  4394  002202                     
  4395                           ;so.c: 10:  digitalWrite(PIN_D7, 1);
  4396  002202  0E00               	movlw	0
  4397  002204  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4398  002206  0E1F               	movlw	31
  4399  002208  6E01               	movwf	digitalWrite@pin^0,c
  4400  00220A  0E00               	movlw	0
  4401  00220C  6E04               	movwf	(digitalWrite@value+1)^0,c
  4402  00220E  0E01               	movlw	1
  4403  002210  6E03               	movwf	digitalWrite@value^0,c
  4404  002212  ECE4  F006         	call	_digitalWrite	;wreg free
  4405                           
  4406                           ;so.c: 11:  digitalWrite(PIN_D7, 0);
  4407  002216  0E00               	movlw	0
  4408  002218  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4409  00221A  0E1F               	movlw	31
  4410  00221C  6E01               	movwf	digitalWrite@pin^0,c
  4411  00221E  0E00               	movlw	0
  4412  002220  6E04               	movwf	(digitalWrite@value+1)^0,c
  4413  002222  0E00               	movlw	0
  4414  002224  6E03               	movwf	digitalWrite@value^0,c
  4415  002226  ECE4  F006         	call	_digitalWrite	;wreg free
  4416  00222A  0012               	return		;funcret
  4417  00222C                     __end_of_PulseEnClock:
  4418                           	callstack 0
  4419                           
  4420 ;; *************** function _PulseClockData *****************
  4421 ;; Defined at:
  4422 ;;		line 14 in file "so.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4436 ;;      Params:         0       0       0       0       0       0       0
  4437 ;;      Locals:         0       0       0       0       0       0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0
  4439 ;;      Totals:         0       0       0       0       0       0       0
  4440 ;;Total ram usage:        0 bytes
  4441 ;; Hardware stack levels used: 1
  4442 ;; Hardware stack levels required when called: 1
  4443 ;; This function calls:
  4444 ;;		_digitalWrite
  4445 ;; This function is called by:
  4446 ;;		_soWrite
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           	psect	text28
  4451  00222C                     __ptext28:
  4452                           	callstack 0
  4453  00222C                     _PulseClockData:
  4454                           	callstack 27
  4455  00222C                     
  4456                           ;so.c: 15:  digitalWrite(PIN_B0, 1);
  4457  00222C  0E00               	movlw	0
  4458  00222E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4459  002230  0E08               	movlw	8
  4460  002232  6E01               	movwf	digitalWrite@pin^0,c
  4461  002234  0E00               	movlw	0
  4462  002236  6E04               	movwf	(digitalWrite@value+1)^0,c
  4463  002238  0E01               	movlw	1
  4464  00223A  6E03               	movwf	digitalWrite@value^0,c
  4465  00223C  ECE4  F006         	call	_digitalWrite	;wreg free
  4466                           
  4467                           ;so.c: 16:  digitalWrite(PIN_B0, 0);
  4468  002240  0E00               	movlw	0
  4469  002242  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4470  002244  0E08               	movlw	8
  4471  002246  6E01               	movwf	digitalWrite@pin^0,c
  4472  002248  0E00               	movlw	0
  4473  00224A  6E04               	movwf	(digitalWrite@value+1)^0,c
  4474  00224C  0E00               	movlw	0
  4475  00224E  6E03               	movwf	digitalWrite@value^0,c
  4476  002250  ECE4  F006         	call	_digitalWrite	;wreg free
  4477  002254  0012               	return		;funcret
  4478  002256                     __end_of_PulseClockData:
  4479                           	callstack 0
  4480                           
  4481 ;; *************** function _pulseEnablePin *****************
  4482 ;; Defined at:
  4483 ;;		line 18 in file "lcd.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;		None
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4497 ;;      Params:         0       0       0       0       0       0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0
  4499 ;;      Temps:          0       0       0       0       0       0       0
  4500 ;;      Totals:         0       0       0       0       0       0       0
  4501 ;;Total ram usage:        0 bytes
  4502 ;; Hardware stack levels used: 1
  4503 ;; Hardware stack levels required when called: 1
  4504 ;; This function calls:
  4505 ;;		_delayMicro
  4506 ;;		_digitalWrite
  4507 ;; This function is called by:
  4508 ;;		_pushNibble
  4509 ;;		_pushByte
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text29
  4514  0020BA                     __ptext29:
  4515                           	callstack 0
  4516  0020BA                     _pulseEnablePin:
  4517                           	callstack 25
  4518  0020BA                     
  4519                           ;lcd.c: 19:  digitalWrite(PIN_D4, 1);
  4520  0020BA  0E00               	movlw	0
  4521  0020BC  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4522  0020BE  0E1C               	movlw	28
  4523  0020C0  6E01               	movwf	digitalWrite@pin^0,c
  4524  0020C2  0E00               	movlw	0
  4525  0020C4  6E04               	movwf	(digitalWrite@value+1)^0,c
  4526  0020C6  0E01               	movlw	1
  4527  0020C8  6E03               	movwf	digitalWrite@value^0,c
  4528  0020CA  ECE4  F006         	call	_digitalWrite	;wreg free
  4529  0020CE                     
  4530                           ;lcd.c: 20:  delayMicro(5);
  4531  0020CE  0E00               	movlw	0
  4532  0020D0  6E02               	movwf	(delayMicro@a+1)^0,c
  4533  0020D2  0E05               	movlw	5
  4534  0020D4  6E01               	movwf	delayMicro@a^0,c
  4535  0020D6  ECB6  F011         	call	_delayMicro	;wreg free
  4536  0020DA                     
  4537                           ;lcd.c: 21:  digitalWrite(PIN_D4, 0);
  4538  0020DA  0E00               	movlw	0
  4539  0020DC  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4540  0020DE  0E1C               	movlw	28
  4541  0020E0  6E01               	movwf	digitalWrite@pin^0,c
  4542  0020E2  0E00               	movlw	0
  4543  0020E4  6E04               	movwf	(digitalWrite@value+1)^0,c
  4544  0020E6  0E00               	movlw	0
  4545  0020E8  6E03               	movwf	digitalWrite@value^0,c
  4546  0020EA  ECE4  F006         	call	_digitalWrite	;wreg free
  4547                           
  4548                           ;lcd.c: 22:  delayMicro(5);
  4549  0020EE  0E00               	movlw	0
  4550  0020F0  6E02               	movwf	(delayMicro@a+1)^0,c
  4551  0020F2  0E05               	movlw	5
  4552  0020F4  6E01               	movwf	delayMicro@a^0,c
  4553  0020F6  ECB6  F011         	call	_delayMicro	;wreg free
  4554  0020FA  0012               	return		;funcret
  4555  0020FC                     __end_of_pulseEnablePin:
  4556                           	callstack 0
  4557                           
  4558 ;; *************** function _digitalWrite *****************
  4559 ;; Defined at:
  4560 ;;		line 14 in file "io.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  pin             2    0[COMRAM] int 
  4563 ;;  value           2    2[COMRAM] int 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      void 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2, status,0
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4575 ;;      Params:         4       0       0       0       0       0       0
  4576 ;;      Locals:         0       0       0       0       0       0       0
  4577 ;;      Temps:          2       0       0       0       0       0       0
  4578 ;;      Totals:         6       0       0       0       0       0       0
  4579 ;;Total ram usage:        6 bytes
  4580 ;; Hardware stack levels used: 1
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_pulseEnablePin
  4585 ;;		_pushNibble
  4586 ;;		_pushByte
  4587 ;;		_PulseEnClock
  4588 ;;		_PulseClockData
  4589 ;;		_soWrite
  4590 ;;		_ssdUpdate
  4591 ;;		_clear_SCL
  4592 ;;		_clear_SDA
  4593 ;;		_rgbColor
  4594 ;;		_turnOn
  4595 ;;		_turnOff
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text30
  4600  000DC8                     __ptext30:
  4601                           	callstack 0
  4602  000DC8                     _digitalWrite:
  4603                           	callstack 28
  4604  000DC8                     
  4605                           ;io.c: 16:     if(pin <8){
  4606  000DC8  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4607  000DCA  EFF2  F006         	goto	u1280
  4608  000DCE  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4609  000DD0  E107               	bnz	u1281
  4610  000DD2  0E08               	movlw	8
  4611  000DD4  5C01               	subwf	digitalWrite@pin^0,w,c
  4612  000DD6  B0D8               	btfsc	status,0,c
  4613  000DD8  EFF0  F006         	goto	u1281
  4614  000DDC  EFF2  F006         	goto	u1280
  4615  000DE0                     u1281:
  4616  000DE0  EF1C  F007         	goto	l2169
  4617  000DE4                     u1280:
  4618  000DE4                     
  4619                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  4620  000DE4  5003               	movf	digitalWrite@value^0,w,c
  4621  000DE6  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4622  000DE8  B4D8               	btfsc	status,2,c
  4623  000DEA  EFF9  F006         	goto	u1291
  4624  000DEE  EFFB  F006         	goto	u1290
  4625  000DF2                     u1291:
  4626  000DF2  EF0B  F007         	goto	l2167
  4627  000DF6                     u1290:
  4628  000DF6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4629  000DFA  0E01               	movlw	1
  4630  000DFC  6E06               	movwf	(??_digitalWrite+1)^0,c
  4631  000DFE  2A05               	incf	??_digitalWrite^0,f,c
  4632  000E00  EF04  F007         	goto	u1304
  4633  000E04                     u1305:
  4634  000E04  90D8               	bcf	status,0,c
  4635  000E06  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4636  000E08                     u1304:
  4637  000E08  2E05               	decfsz	??_digitalWrite^0,f,c
  4638  000E0A  EF02  F007         	goto	u1305
  4639  000E0E  5006               	movf	(??_digitalWrite+1)^0,w,c
  4640  000E10  1280               	iorwf	128,f,c	;volatile
  4641  000E12  EF0A  F008         	goto	l161
  4642  000E16                     l2167:
  4643  000E16  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4644  000E1A  0E01               	movlw	1
  4645  000E1C  6E06               	movwf	(??_digitalWrite+1)^0,c
  4646  000E1E  2A05               	incf	??_digitalWrite^0,f,c
  4647  000E20  EF14  F007         	goto	u1314
  4648  000E24                     u1315:
  4649  000E24  90D8               	bcf	status,0,c
  4650  000E26  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4651  000E28                     u1314:
  4652  000E28  2E05               	decfsz	??_digitalWrite^0,f,c
  4653  000E2A  EF12  F007         	goto	u1315
  4654  000E2E  5006               	movf	(??_digitalWrite+1)^0,w,c
  4655  000E30  0AFF               	xorlw	255
  4656  000E32  1680               	andwf	128,f,c	;volatile
  4657  000E34  EF0A  F008         	goto	l161
  4658  000E38                     l2169:
  4659  000E38  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4660  000E3A  EF2A  F007         	goto	u1320
  4661  000E3E  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4662  000E40  E107               	bnz	u1321
  4663  000E42  0E10               	movlw	16
  4664  000E44  5C01               	subwf	digitalWrite@pin^0,w,c
  4665  000E46  B0D8               	btfsc	status,0,c
  4666  000E48  EF28  F007         	goto	u1321
  4667  000E4C  EF2A  F007         	goto	u1320
  4668  000E50                     u1321:
  4669  000E50  EF58  F007         	goto	l2177
  4670  000E54                     u1320:
  4671  000E54                     
  4672                           ;io.c: 20:         pin -=8;
  4673  000E54  0EF8               	movlw	248
  4674  000E56  2601               	addwf	digitalWrite@pin^0,f,c
  4675  000E58  0EFF               	movlw	255
  4676  000E5A  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4677                           
  4678                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  4679  000E5C  5003               	movf	digitalWrite@value^0,w,c
  4680  000E5E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4681  000E60  B4D8               	btfsc	status,2,c
  4682  000E62  EF35  F007         	goto	u1331
  4683  000E66  EF37  F007         	goto	u1330
  4684  000E6A                     u1331:
  4685  000E6A  EF47  F007         	goto	l2175
  4686  000E6E                     u1330:
  4687  000E6E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4688  000E72  0E01               	movlw	1
  4689  000E74  6E06               	movwf	(??_digitalWrite+1)^0,c
  4690  000E76  2A05               	incf	??_digitalWrite^0,f,c
  4691  000E78  EF40  F007         	goto	u1344
  4692  000E7C                     u1345:
  4693  000E7C  90D8               	bcf	status,0,c
  4694  000E7E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4695  000E80                     u1344:
  4696  000E80  2E05               	decfsz	??_digitalWrite^0,f,c
  4697  000E82  EF3E  F007         	goto	u1345
  4698  000E86  5006               	movf	(??_digitalWrite+1)^0,w,c
  4699  000E88  1281               	iorwf	129,f,c	;volatile
  4700  000E8A  EF0A  F008         	goto	l161
  4701  000E8E                     l2175:
  4702  000E8E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4703  000E92  0E01               	movlw	1
  4704  000E94  6E06               	movwf	(??_digitalWrite+1)^0,c
  4705  000E96  2A05               	incf	??_digitalWrite^0,f,c
  4706  000E98  EF50  F007         	goto	u1354
  4707  000E9C                     u1355:
  4708  000E9C  90D8               	bcf	status,0,c
  4709  000E9E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4710  000EA0                     u1354:
  4711  000EA0  2E05               	decfsz	??_digitalWrite^0,f,c
  4712  000EA2  EF4E  F007         	goto	u1355
  4713  000EA6  5006               	movf	(??_digitalWrite+1)^0,w,c
  4714  000EA8  0AFF               	xorlw	255
  4715  000EAA  1681               	andwf	129,f,c	;volatile
  4716  000EAC  EF0A  F008         	goto	l161
  4717  000EB0                     l2177:
  4718  000EB0  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4719  000EB2  EF66  F007         	goto	u1360
  4720  000EB6  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4721  000EB8  E107               	bnz	u1361
  4722  000EBA  0E18               	movlw	24
  4723  000EBC  5C01               	subwf	digitalWrite@pin^0,w,c
  4724  000EBE  B0D8               	btfsc	status,0,c
  4725  000EC0  EF64  F007         	goto	u1361
  4726  000EC4  EF66  F007         	goto	u1360
  4727  000EC8                     u1361:
  4728  000EC8  EF94  F007         	goto	l2185
  4729  000ECC                     u1360:
  4730  000ECC                     
  4731                           ;io.c: 24:         pin -=16;
  4732  000ECC  0EF0               	movlw	240
  4733  000ECE  2601               	addwf	digitalWrite@pin^0,f,c
  4734  000ED0  0EFF               	movlw	255
  4735  000ED2  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4736                           
  4737                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  4738  000ED4  5003               	movf	digitalWrite@value^0,w,c
  4739  000ED6  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4740  000ED8  B4D8               	btfsc	status,2,c
  4741  000EDA  EF71  F007         	goto	u1371
  4742  000EDE  EF73  F007         	goto	u1370
  4743  000EE2                     u1371:
  4744  000EE2  EF83  F007         	goto	l2183
  4745  000EE6                     u1370:
  4746  000EE6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4747  000EEA  0E01               	movlw	1
  4748  000EEC  6E06               	movwf	(??_digitalWrite+1)^0,c
  4749  000EEE  2A05               	incf	??_digitalWrite^0,f,c
  4750  000EF0  EF7C  F007         	goto	u1384
  4751  000EF4                     u1385:
  4752  000EF4  90D8               	bcf	status,0,c
  4753  000EF6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4754  000EF8                     u1384:
  4755  000EF8  2E05               	decfsz	??_digitalWrite^0,f,c
  4756  000EFA  EF7A  F007         	goto	u1385
  4757  000EFE  5006               	movf	(??_digitalWrite+1)^0,w,c
  4758  000F00  1282               	iorwf	130,f,c	;volatile
  4759  000F02  EF0A  F008         	goto	l161
  4760  000F06                     l2183:
  4761  000F06  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4762  000F0A  0E01               	movlw	1
  4763  000F0C  6E06               	movwf	(??_digitalWrite+1)^0,c
  4764  000F0E  2A05               	incf	??_digitalWrite^0,f,c
  4765  000F10  EF8C  F007         	goto	u1394
  4766  000F14                     u1395:
  4767  000F14  90D8               	bcf	status,0,c
  4768  000F16  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4769  000F18                     u1394:
  4770  000F18  2E05               	decfsz	??_digitalWrite^0,f,c
  4771  000F1A  EF8A  F007         	goto	u1395
  4772  000F1E  5006               	movf	(??_digitalWrite+1)^0,w,c
  4773  000F20  0AFF               	xorlw	255
  4774  000F22  1682               	andwf	130,f,c	;volatile
  4775  000F24  EF0A  F008         	goto	l161
  4776  000F28                     l2185:
  4777  000F28  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4778  000F2A  EFA2  F007         	goto	u1400
  4779  000F2E  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4780  000F30  E107               	bnz	u1401
  4781  000F32  0E20               	movlw	32
  4782  000F34  5C01               	subwf	digitalWrite@pin^0,w,c
  4783  000F36  B0D8               	btfsc	status,0,c
  4784  000F38  EFA0  F007         	goto	u1401
  4785  000F3C  EFA2  F007         	goto	u1400
  4786  000F40                     u1401:
  4787  000F40  EFD0  F007         	goto	l2193
  4788  000F44                     u1400:
  4789  000F44                     
  4790                           ;io.c: 28:         pin -=24;
  4791  000F44  0EE8               	movlw	232
  4792  000F46  2601               	addwf	digitalWrite@pin^0,f,c
  4793  000F48  0EFF               	movlw	255
  4794  000F4A  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4795                           
  4796                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  4797  000F4C  5003               	movf	digitalWrite@value^0,w,c
  4798  000F4E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4799  000F50  B4D8               	btfsc	status,2,c
  4800  000F52  EFAD  F007         	goto	u1411
  4801  000F56  EFAF  F007         	goto	u1410
  4802  000F5A                     u1411:
  4803  000F5A  EFBF  F007         	goto	l2191
  4804  000F5E                     u1410:
  4805  000F5E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4806  000F62  0E01               	movlw	1
  4807  000F64  6E06               	movwf	(??_digitalWrite+1)^0,c
  4808  000F66  2A05               	incf	??_digitalWrite^0,f,c
  4809  000F68  EFB8  F007         	goto	u1424
  4810  000F6C                     u1425:
  4811  000F6C  90D8               	bcf	status,0,c
  4812  000F6E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4813  000F70                     u1424:
  4814  000F70  2E05               	decfsz	??_digitalWrite^0,f,c
  4815  000F72  EFB6  F007         	goto	u1425
  4816  000F76  5006               	movf	(??_digitalWrite+1)^0,w,c
  4817  000F78  1283               	iorwf	131,f,c	;volatile
  4818  000F7A  EF0A  F008         	goto	l161
  4819  000F7E                     l2191:
  4820  000F7E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4821  000F82  0E01               	movlw	1
  4822  000F84  6E06               	movwf	(??_digitalWrite+1)^0,c
  4823  000F86  2A05               	incf	??_digitalWrite^0,f,c
  4824  000F88  EFC8  F007         	goto	u1434
  4825  000F8C                     u1435:
  4826  000F8C  90D8               	bcf	status,0,c
  4827  000F8E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4828  000F90                     u1434:
  4829  000F90  2E05               	decfsz	??_digitalWrite^0,f,c
  4830  000F92  EFC6  F007         	goto	u1435
  4831  000F96  5006               	movf	(??_digitalWrite+1)^0,w,c
  4832  000F98  0AFF               	xorlw	255
  4833  000F9A  1683               	andwf	131,f,c	;volatile
  4834  000F9C  EF0A  F008         	goto	l161
  4835  000FA0                     l2193:
  4836  000FA0  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4837  000FA2  EFDE  F007         	goto	u1440
  4838  000FA6  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4839  000FA8  E107               	bnz	u1441
  4840  000FAA  0E28               	movlw	40
  4841  000FAC  5C01               	subwf	digitalWrite@pin^0,w,c
  4842  000FAE  B0D8               	btfsc	status,0,c
  4843  000FB0  EFDC  F007         	goto	u1441
  4844  000FB4  EFDE  F007         	goto	u1440
  4845  000FB8                     u1441:
  4846  000FB8  EF0A  F008         	goto	l161
  4847  000FBC                     u1440:
  4848  000FBC                     
  4849                           ;io.c: 32:         pin -=32;
  4850  000FBC  0EE0               	movlw	224
  4851  000FBE  2601               	addwf	digitalWrite@pin^0,f,c
  4852  000FC0  0EFF               	movlw	255
  4853  000FC2  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4854                           
  4855                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  4856  000FC4  5003               	movf	digitalWrite@value^0,w,c
  4857  000FC6  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4858  000FC8  B4D8               	btfsc	status,2,c
  4859  000FCA  EFE9  F007         	goto	u1451
  4860  000FCE  EFEB  F007         	goto	u1450
  4861  000FD2                     u1451:
  4862  000FD2  EFFB  F007         	goto	l2199
  4863  000FD6                     u1450:
  4864  000FD6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4865  000FDA  0E01               	movlw	1
  4866  000FDC  6E06               	movwf	(??_digitalWrite+1)^0,c
  4867  000FDE  2A05               	incf	??_digitalWrite^0,f,c
  4868  000FE0  EFF4  F007         	goto	u1464
  4869  000FE4                     u1465:
  4870  000FE4  90D8               	bcf	status,0,c
  4871  000FE6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4872  000FE8                     u1464:
  4873  000FE8  2E05               	decfsz	??_digitalWrite^0,f,c
  4874  000FEA  EFF2  F007         	goto	u1465
  4875  000FEE  5006               	movf	(??_digitalWrite+1)^0,w,c
  4876  000FF0  1284               	iorwf	132,f,c	;volatile
  4877  000FF2  EF0A  F008         	goto	l161
  4878  000FF6                     l2199:
  4879  000FF6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4880  000FFA  0E01               	movlw	1
  4881  000FFC  6E06               	movwf	(??_digitalWrite+1)^0,c
  4882  000FFE  2A05               	incf	??_digitalWrite^0,f,c
  4883  001000  EF04  F008         	goto	u1474
  4884  001004                     u1475:
  4885  001004  90D8               	bcf	status,0,c
  4886  001006  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4887  001008                     u1474:
  4888  001008  2E05               	decfsz	??_digitalWrite^0,f,c
  4889  00100A  EF02  F008         	goto	u1475
  4890  00100E  5006               	movf	(??_digitalWrite+1)^0,w,c
  4891  001010  0AFF               	xorlw	255
  4892  001012  1684               	andwf	132,f,c	;volatile
  4893  001014                     l161:
  4894  001014  0012               	return		;funcret
  4895  001016                     __end_of_digitalWrite:
  4896                           	callstack 0
  4897                           
  4898 ;; *************** function _delayMicro *****************
  4899 ;; Defined at:
  4900 ;;		line 5 in file "lcd.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;  a               2    0[COMRAM] int 
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;  i               2    0        volatile int 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		None
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4914 ;;      Params:         2       0       0       0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0
  4917 ;;      Totals:         2       0       0       0       0       0       0
  4918 ;;Total ram usage:        2 bytes
  4919 ;; Hardware stack levels used: 1
  4920 ;; This function calls:
  4921 ;;		Nothing
  4922 ;; This function is called by:
  4923 ;;		_pulseEnablePin
  4924 ;;		_lcdChar
  4925 ;;		_lcdInit
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text31
  4930  00236C                     __ptext31:
  4931                           	callstack 0
  4932  00236C                     _delayMicro:
  4933                           	callstack 25
  4934  00236C  0012               	return		;funcret
  4935  00236E                     __end_of_delayMicro:
  4936                           	callstack 0
  4937                           
  4938 ;; *************** function _delayMili *****************
  4939 ;; Defined at:
  4940 ;;		line 10 in file "lcd.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  a               2    0[COMRAM] int 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  i               2    3[COMRAM] volatile int 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  1    wreg      void 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4954 ;;      Params:         2       0       0       0       0       0       0
  4955 ;;      Locals:         2       0       0       0       0       0       0
  4956 ;;      Temps:          1       0       0       0       0       0       0
  4957 ;;      Totals:         5       0       0       0       0       0       0
  4958 ;;Total ram usage:        5 bytes
  4959 ;; Hardware stack levels used: 1
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_lcdCommand
  4964 ;;		_lcdInit
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text32
  4969  0021A6                     __ptext32:
  4970                           	callstack 0
  4971  0021A6                     _delayMili:
  4972                           	callstack 28
  4973  0021A6                     
  4974                           ;lcd.c: 11:  volatile int i;;lcd.c: 12:  for (i = 0; i < a; i++) {
  4975  0021A6  0E00               	movlw	0
  4976  0021A8  6E05               	movwf	(delayMili@i+1)^0,c	;volatile
  4977  0021AA  0E00               	movlw	0
  4978  0021AC  6E04               	movwf	delayMili@i^0,c	;volatile
  4979  0021AE  EFDB  F010         	goto	l2233
  4980  0021B2                     l2231:
  4981                           
  4982                           ;lcd.c: 15:  }
  4983  0021B2  4A04               	infsnz	delayMili@i^0,f,c	;volatile
  4984  0021B4  2A05               	incf	(delayMili@i+1)^0,f,c	;volatile
  4985  0021B6                     l2233:
  4986  0021B6  5001               	movf	delayMili@a^0,w,c
  4987  0021B8  5C04               	subwf	delayMili@i^0,w,c	;volatile
  4988  0021BA  5005               	movf	(delayMili@i+1)^0,w,c	;volatile
  4989  0021BC  0A80               	xorlw	128
  4990  0021BE  6E03               	movwf	??_delayMili^0,c
  4991  0021C0  5002               	movf	(delayMili@a+1)^0,w,c
  4992  0021C2  0A80               	xorlw	128
  4993  0021C4  5803               	subwfb	??_delayMili^0,w,c
  4994  0021C6  A0D8               	btfss	status,0,c
  4995  0021C8  EFE8  F010         	goto	u1491
  4996  0021CC  EFEA  F010         	goto	u1490
  4997  0021D0                     u1491:
  4998  0021D0  EFD9  F010         	goto	l2231
  4999  0021D4                     u1490:
  5000  0021D4  0012               	return		;funcret
  5001  0021D6                     __end_of_delayMili:
  5002                           	callstack 0
  5003                           
  5004 ;; *************** function _kpInit *****************
  5005 ;; Defined at:
  5006 ;;		line 54 in file "keypad.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2, status,0, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5020 ;;      Params:         0       0       0       0       0       0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0
  5023 ;;      Totals:         0       0       0       0       0       0       0
  5024 ;;Total ram usage:        0 bytes
  5025 ;; Hardware stack levels used: 1
  5026 ;; Hardware stack levels required when called: 2
  5027 ;; This function calls:
  5028 ;;		_pinMode
  5029 ;;		_soInit
  5030 ;; This function is called by:
  5031 ;;		_main
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text33
  5036  002174                     __ptext33:
  5037                           	callstack 0
  5038  002174                     _kpInit:
  5039                           	callstack 28
  5040  002174                     
  5041                           ;keypad.c: 55:   soInit();
  5042  002174  EC7E  F010         	call	_soInit	;wreg free
  5043                           
  5044                           ;keypad.c: 56:   pinMode(PIN_B2, 1);
  5045  002178  0E00               	movlw	0
  5046  00217A  6E02               	movwf	(pinMode@pin+1)^0,c
  5047  00217C  0E0A               	movlw	10
  5048  00217E  6E01               	movwf	pinMode@pin^0,c
  5049  002180  0E00               	movlw	0
  5050  002182  6E04               	movwf	(pinMode@type+1)^0,c
  5051  002184  0E01               	movlw	1
  5052  002186  6E03               	movwf	pinMode@type^0,c
  5053  002188  EC0B  F008         	call	_pinMode	;wreg free
  5054                           
  5055                           ;keypad.c: 57:   pinMode(PIN_B1, 1);
  5056  00218C  0E00               	movlw	0
  5057  00218E  6E02               	movwf	(pinMode@pin+1)^0,c
  5058  002190  0E09               	movlw	9
  5059  002192  6E01               	movwf	pinMode@pin^0,c
  5060  002194  0E00               	movlw	0
  5061  002196  6E04               	movwf	(pinMode@type+1)^0,c
  5062  002198  0E01               	movlw	1
  5063  00219A  6E03               	movwf	pinMode@type^0,c
  5064  00219C  EC0B  F008         	call	_pinMode	;wreg free
  5065  0021A0                     
  5066                           ;keypad.c: 58:   ADCON1 = 0b00001100;
  5067  0021A0  0E0C               	movlw	12
  5068  0021A2  6EC1               	movwf	193,c	;volatile
  5069  0021A4  0012               	return		;funcret
  5070  0021A6                     __end_of_kpInit:
  5071                           	callstack 0
  5072                           
  5073 ;; *************** function _soInit *****************
  5074 ;; Defined at:
  5075 ;;		line 3 in file "so.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;		None
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;		None
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  1    wreg      void 
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0, cstack
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5089 ;;      Params:         0       0       0       0       0       0       0
  5090 ;;      Locals:         0       0       0       0       0       0       0
  5091 ;;      Temps:          0       0       0       0       0       0       0
  5092 ;;      Totals:         0       0       0       0       0       0       0
  5093 ;;Total ram usage:        0 bytes
  5094 ;; Hardware stack levels used: 1
  5095 ;; Hardware stack levels required when called: 1
  5096 ;; This function calls:
  5097 ;;		_pinMode
  5098 ;; This function is called by:
  5099 ;;		_kpInit
  5100 ;;		_lcdInit
  5101 ;;		_ssdInit
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text34
  5106  0020FC                     __ptext34:
  5107                           	callstack 0
  5108  0020FC                     _soInit:
  5109                           	callstack 28
  5110  0020FC                     
  5111                           ;so.c: 4:  pinMode(PIN_D7, 0);
  5112  0020FC  0E00               	movlw	0
  5113  0020FE  6E02               	movwf	(pinMode@pin+1)^0,c
  5114  002100  0E1F               	movlw	31
  5115  002102  6E01               	movwf	pinMode@pin^0,c
  5116  002104  0E00               	movlw	0
  5117  002106  6E04               	movwf	(pinMode@type+1)^0,c
  5118  002108  0E00               	movlw	0
  5119  00210A  6E03               	movwf	pinMode@type^0,c
  5120  00210C  EC0B  F008         	call	_pinMode	;wreg free
  5121                           
  5122                           ;so.c: 5:  pinMode(PIN_B0, 0);
  5123  002110  0E00               	movlw	0
  5124  002112  6E02               	movwf	(pinMode@pin+1)^0,c
  5125  002114  0E08               	movlw	8
  5126  002116  6E01               	movwf	pinMode@pin^0,c
  5127  002118  0E00               	movlw	0
  5128  00211A  6E04               	movwf	(pinMode@type+1)^0,c
  5129  00211C  0E00               	movlw	0
  5130  00211E  6E03               	movwf	pinMode@type^0,c
  5131  002120  EC0B  F008         	call	_pinMode	;wreg free
  5132                           
  5133                           ;so.c: 6:  pinMode(PIN_D6, 0);
  5134  002124  0E00               	movlw	0
  5135  002126  6E02               	movwf	(pinMode@pin+1)^0,c
  5136  002128  0E1E               	movlw	30
  5137  00212A  6E01               	movwf	pinMode@pin^0,c
  5138  00212C  0E00               	movlw	0
  5139  00212E  6E04               	movwf	(pinMode@type+1)^0,c
  5140  002130  0E00               	movlw	0
  5141  002132  6E03               	movwf	pinMode@type^0,c
  5142  002134  EC0B  F008         	call	_pinMode	;wreg free
  5143  002138  0012               	return		;funcret
  5144  00213A                     __end_of_soInit:
  5145                           	callstack 0
  5146                           
  5147 ;; *************** function _calcula *****************
  5148 ;; Defined at:
  5149 ;;		line 155 in file "main.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;		None
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5163 ;;      Params:         0       0       0       0       0       0       0
  5164 ;;      Locals:         0       0       0       0       0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0
  5166 ;;      Totals:         0       0       0       0       0       0       0
  5167 ;;Total ram usage:        0 bytes
  5168 ;; Hardware stack levels used: 1
  5169 ;; Hardware stack levels required when called: 2
  5170 ;; This function calls:
  5171 ;;		___lmul
  5172 ;;		_apagaDisplay
  5173 ;;		_mostraDisplay
  5174 ;; This function is called by:
  5175 ;;		_main
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text35
  5180  001B98                     __ptext35:
  5181                           	callstack 0
  5182  001B98                     _calcula:
  5183                           	callstack 28
  5184  001B98                     
  5185                           ;main.c: 157:     velocidade = (200 * pot) / 1024 + 20;
  5186  001B98  C046  F001         	movff	_pot,___lmul@multiplier
  5187  001B9C  C047  F002         	movff	_pot+1,___lmul@multiplier+1
  5188  001BA0  C048  F003         	movff	_pot+2,___lmul@multiplier+2
  5189  001BA4  C049  F004         	movff	_pot+3,___lmul@multiplier+3
  5190  001BA8  0EC8               	movlw	200
  5191  001BAA  6E05               	movwf	___lmul@multiplicand^0,c
  5192  001BAC  0E00               	movlw	0
  5193  001BAE  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  5194  001BB0  0E00               	movlw	0
  5195  001BB2  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  5196  001BB4  0E00               	movlw	0
  5197  001BB6  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  5198  001BB8  ECD4  F00E         	call	___lmul	;wreg free
  5199  001BBC  0E0B               	movlw	11
  5200  001BBE  EFE6  F00D         	goto	u2280
  5201  001BC2                     u2285:
  5202  001BC2  90D8               	bcf	status,0,c
  5203  001BC4  3204               	rrcf	(?___lmul+3)^0,f,c
  5204  001BC6  3203               	rrcf	(?___lmul+2)^0,f,c
  5205  001BC8  3202               	rrcf	(?___lmul+1)^0,f,c
  5206  001BCA  3201               	rrcf	?___lmul^0,f,c
  5207  001BCC                     u2280:
  5208  001BCC  2EE8               	decfsz	wreg,f,c
  5209  001BCE  EFE1  F00D         	goto	u2285
  5210  001BD2  0E14               	movlw	20
  5211  001BD4  2401               	addwf	?___lmul^0,w,c
  5212  001BD6  6E2E               	movwf	_velocidade^0,c
  5213  001BD8  0E00               	movlw	0
  5214  001BDA  2002               	addwfc	(?___lmul+1)^0,w,c
  5215  001BDC  6E2F               	movwf	(_velocidade+1)^0,c
  5216  001BDE  0E00               	movlw	0
  5217  001BE0  2003               	addwfc	(?___lmul+2)^0,w,c
  5218  001BE2  6E30               	movwf	(_velocidade+2)^0,c
  5219  001BE4  0E00               	movlw	0
  5220  001BE6  2004               	addwfc	(?___lmul+3)^0,w,c
  5221  001BE8  6E31               	movwf	(_velocidade+3)^0,c
  5222  001BEA                     
  5223                           ;main.c: 158:     if (velocidade > limite) {
  5224  001BEA  502E               	movf	_velocidade^0,w,c
  5225  001BEC  5C32               	subwf	_limite^0,w,c
  5226  001BEE  502F               	movf	(_velocidade+1)^0,w,c
  5227  001BF0  5833               	subwfb	(_limite+1)^0,w,c
  5228  001BF2  5030               	movf	(_velocidade+2)^0,w,c
  5229  001BF4  5834               	subwfb	(_limite+2)^0,w,c
  5230  001BF6  5031               	movf	(_velocidade+3)^0,w,c
  5231  001BF8  5835               	subwfb	(_limite+3)^0,w,c
  5232  001BFA  B0D8               	btfsc	status,0,c
  5233  001BFC  EF02  F00E         	goto	u2291
  5234  001C00  EF04  F00E         	goto	u2290
  5235  001C04                     u2291:
  5236  001C04  EF08  F00E         	goto	l2823
  5237  001C08                     u2290:
  5238  001C08                     
  5239                           ;main.c: 159:         mostraDisplay();
  5240  001C08  EC58  F00C         	call	_mostraDisplay	;wreg free
  5241                           
  5242                           ;main.c: 160:     } else if (velocidade < limite) {
  5243  001C0C  EF19  F00E         	goto	l537
  5244  001C10                     l2823:
  5245  001C10  5032               	movf	_limite^0,w,c
  5246  001C12  5C2E               	subwf	_velocidade^0,w,c
  5247  001C14  5033               	movf	(_limite+1)^0,w,c
  5248  001C16  582F               	subwfb	(_velocidade+1)^0,w,c
  5249  001C18  5034               	movf	(_limite+2)^0,w,c
  5250  001C1A  5830               	subwfb	(_velocidade+2)^0,w,c
  5251  001C1C  5035               	movf	(_limite+3)^0,w,c
  5252  001C1E  5831               	subwfb	(_velocidade+3)^0,w,c
  5253  001C20  B0D8               	btfsc	status,0,c
  5254  001C22  EF15  F00E         	goto	u2301
  5255  001C26  EF17  F00E         	goto	u2300
  5256  001C2A                     u2301:
  5257  001C2A  EF19  F00E         	goto	l537
  5258  001C2E                     u2300:
  5259  001C2E                     
  5260                           ;main.c: 161:         apagaDisplay();
  5261  001C2E  EC2B  F011         	call	_apagaDisplay	;wreg free
  5262  001C32                     l537:
  5263  001C32  0012               	return		;funcret
  5264  001C34                     __end_of_calcula:
  5265                           	callstack 0
  5266                           
  5267 ;; *************** function _mostraDisplay *****************
  5268 ;; Defined at:
  5269 ;;		line 40 in file "main.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;		None
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;  v3              2   18[COMRAM] int 
  5274 ;;  v2              2   16[COMRAM] int 
  5275 ;;  v1              2   14[COMRAM] int 
  5276 ;;  v0              2   12[COMRAM] int 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      void 
  5279 ;; Registers used:
  5280 ;;		wreg, status,2, status,0, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5286 ;;      Params:         0       0       0       0       0       0       0
  5287 ;;      Locals:         8       0       0       0       0       0       0
  5288 ;;      Temps:          0       0       0       0       0       0       0
  5289 ;;      Totals:         8       0       0       0       0       0       0
  5290 ;;Total ram usage:        8 bytes
  5291 ;; Hardware stack levels used: 1
  5292 ;; Hardware stack levels required when called: 1
  5293 ;; This function calls:
  5294 ;;		___lwdiv
  5295 ;;		___lwmod
  5296 ;;		_ssdDigit
  5297 ;; This function is called by:
  5298 ;;		_calcula
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text36
  5303  0018B0                     __ptext36:
  5304                           	callstack 0
  5305  0018B0                     _mostraDisplay:
  5306                           	callstack 28
  5307  0018B0                     
  5308                           ;main.c: 41:     int v0, v1, v2, v3;;main.c: 42:     v0 = ((multa / 1000) % 10);
  5309  0018B0  0E03               	movlw	3
  5310  0018B2  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  5311  0018B4  0EE8               	movlw	232
  5312  0018B6  6E03               	movwf	___lwdiv@divisor^0,c
  5313  0018B8  C036  F001         	movff	_multa,___lwdiv@dividend
  5314  0018BC  C037  F002         	movff	_multa+1,___lwdiv@dividend+1
  5315  0018C0  EC9A  F00E         	call	___lwdiv	;wreg free
  5316  0018C4  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5317  0018C8  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5318  0018CC  0E00               	movlw	0
  5319  0018CE  6E0B               	movwf	(___lwmod@divisor+1)^0,c
  5320  0018D0  0E0A               	movlw	10
  5321  0018D2  6E0A               	movwf	___lwmod@divisor^0,c
  5322  0018D4  EC09  F00F         	call	___lwmod	;wreg free
  5323  0018D8  C008  F00D         	movff	?___lwmod,mostraDisplay@v0
  5324  0018DC  C009  F00E         	movff	?___lwmod+1,mostraDisplay@v0+1
  5325                           
  5326                           ;main.c: 43:     v1 = ((multa / 100) % 10);
  5327  0018E0  0E00               	movlw	0
  5328  0018E2  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  5329  0018E4  0E64               	movlw	100
  5330  0018E6  6E03               	movwf	___lwdiv@divisor^0,c
  5331  0018E8  C036  F001         	movff	_multa,___lwdiv@dividend
  5332  0018EC  C037  F002         	movff	_multa+1,___lwdiv@dividend+1
  5333  0018F0  EC9A  F00E         	call	___lwdiv	;wreg free
  5334  0018F4  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5335  0018F8  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5336  0018FC  0E00               	movlw	0
  5337  0018FE  6E0B               	movwf	(___lwmod@divisor+1)^0,c
  5338  001900  0E0A               	movlw	10
  5339  001902  6E0A               	movwf	___lwmod@divisor^0,c
  5340  001904  EC09  F00F         	call	___lwmod	;wreg free
  5341  001908  C008  F00F         	movff	?___lwmod,mostraDisplay@v1
  5342  00190C  C009  F010         	movff	?___lwmod+1,mostraDisplay@v1+1
  5343                           
  5344                           ;main.c: 44:     v2 = ((multa / 10) % 10);
  5345  001910  0E00               	movlw	0
  5346  001912  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  5347  001914  0E0A               	movlw	10
  5348  001916  6E03               	movwf	___lwdiv@divisor^0,c
  5349  001918  C036  F001         	movff	_multa,___lwdiv@dividend
  5350  00191C  C037  F002         	movff	_multa+1,___lwdiv@dividend+1
  5351  001920  EC9A  F00E         	call	___lwdiv	;wreg free
  5352  001924  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5353  001928  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5354  00192C  0E00               	movlw	0
  5355  00192E  6E0B               	movwf	(___lwmod@divisor+1)^0,c
  5356  001930  0E0A               	movlw	10
  5357  001932  6E0A               	movwf	___lwmod@divisor^0,c
  5358  001934  EC09  F00F         	call	___lwmod	;wreg free
  5359  001938  C008  F011         	movff	?___lwmod,mostraDisplay@v2
  5360  00193C  C009  F012         	movff	?___lwmod+1,mostraDisplay@v2+1
  5361                           
  5362                           ;main.c: 45:     v3 = (multa % 10);
  5363  001940  C036  F008         	movff	_multa,___lwmod@dividend
  5364  001944  C037  F009         	movff	_multa+1,___lwmod@dividend+1
  5365  001948  0E00               	movlw	0
  5366  00194A  6E0B               	movwf	(___lwmod@divisor+1)^0,c
  5367  00194C  0E0A               	movlw	10
  5368  00194E  6E0A               	movwf	___lwmod@divisor^0,c
  5369  001950  EC09  F00F         	call	___lwmod	;wreg free
  5370  001954  C008  F013         	movff	?___lwmod,mostraDisplay@v3
  5371  001958  C009  F014         	movff	?___lwmod+1,mostraDisplay@v3+1
  5372                           
  5373                           ;main.c: 46:     ssdDigit(v0, 0);
  5374  00195C  0E00               	movlw	0
  5375  00195E  6E01               	movwf	ssdDigit@pos^0,c
  5376  001960  500D               	movf	mostraDisplay@v0^0,w,c
  5377  001962  EC68  F00F         	call	_ssdDigit
  5378                           
  5379                           ;main.c: 47:     ssdDigit(v1, 1);
  5380  001966  0E01               	movlw	1
  5381  001968  6E01               	movwf	ssdDigit@pos^0,c
  5382  00196A  500F               	movf	mostraDisplay@v1^0,w,c
  5383  00196C  EC68  F00F         	call	_ssdDigit
  5384                           
  5385                           ;main.c: 48:     ssdDigit(v2, 2);
  5386  001970  0E02               	movlw	2
  5387  001972  6E01               	movwf	ssdDigit@pos^0,c
  5388  001974  5011               	movf	mostraDisplay@v2^0,w,c
  5389  001976  EC68  F00F         	call	_ssdDigit
  5390                           
  5391                           ;main.c: 49:     ssdDigit(v3, 3);
  5392  00197A  0E03               	movlw	3
  5393  00197C  6E01               	movwf	ssdDigit@pos^0,c
  5394  00197E  5013               	movf	mostraDisplay@v3^0,w,c
  5395  001980  EC68  F00F         	call	_ssdDigit
  5396  001984  0012               	return		;funcret
  5397  001986                     __end_of_mostraDisplay:
  5398                           	callstack 0
  5399                           
  5400 ;; *************** function ___lwmod *****************
  5401 ;; Defined at:
  5402 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  dividend        2    7[COMRAM] unsigned int 
  5405 ;;  divisor         2    9[COMRAM] unsigned int 
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;  counter         1   11[COMRAM] unsigned char 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  2    7[COMRAM] unsigned int 
  5410 ;; Registers used:
  5411 ;;		wreg, status,2, status,0
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5417 ;;      Params:         4       0       0       0       0       0       0
  5418 ;;      Locals:         1       0       0       0       0       0       0
  5419 ;;      Temps:          0       0       0       0       0       0       0
  5420 ;;      Totals:         5       0       0       0       0       0       0
  5421 ;;Total ram usage:        5 bytes
  5422 ;; Hardware stack levels used: 1
  5423 ;; This function calls:
  5424 ;;		Nothing
  5425 ;; This function is called by:
  5426 ;;		_mostraDisplay
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           	psect	text37
  5431  001E12                     __ptext37:
  5432                           	callstack 0
  5433  001E12                     ___lwmod:
  5434                           	callstack 28
  5435  001E12  500A               	movf	___lwmod@divisor^0,w,c
  5436  001E14  100B               	iorwf	(___lwmod@divisor+1)^0,w,c
  5437  001E16  B4D8               	btfsc	status,2,c
  5438  001E18  EF10  F00F         	goto	u1871
  5439  001E1C  EF12  F00F         	goto	u1870
  5440  001E20                     u1871:
  5441  001E20  EF36  F00F         	goto	l1065
  5442  001E24                     u1870:
  5443  001E24  0E01               	movlw	1
  5444  001E26  6E0C               	movwf	___lwmod@counter^0,c
  5445  001E28  EF1A  F00F         	goto	l2365
  5446  001E2C                     l2363:
  5447  001E2C  90D8               	bcf	status,0,c
  5448  001E2E  360A               	rlcf	___lwmod@divisor^0,f,c
  5449  001E30  360B               	rlcf	(___lwmod@divisor+1)^0,f,c
  5450  001E32  2A0C               	incf	___lwmod@counter^0,f,c
  5451  001E34                     l2365:
  5452  001E34  AE0B               	btfss	(___lwmod@divisor+1)^0,7,c
  5453  001E36  EF1F  F00F         	goto	u1881
  5454  001E3A  EF21  F00F         	goto	u1880
  5455  001E3E                     u1881:
  5456  001E3E  EF16  F00F         	goto	l2363
  5457  001E42                     u1880:
  5458  001E42                     l2367:
  5459  001E42  500A               	movf	___lwmod@divisor^0,w,c
  5460  001E44  5C08               	subwf	___lwmod@dividend^0,w,c
  5461  001E46  500B               	movf	(___lwmod@divisor+1)^0,w,c
  5462  001E48  5809               	subwfb	(___lwmod@dividend+1)^0,w,c
  5463  001E4A  A0D8               	btfss	status,0,c
  5464  001E4C  EF2A  F00F         	goto	u1891
  5465  001E50  EF2C  F00F         	goto	u1890
  5466  001E54                     u1891:
  5467  001E54  EF30  F00F         	goto	l2371
  5468  001E58                     u1890:
  5469  001E58  500A               	movf	___lwmod@divisor^0,w,c
  5470  001E5A  5E08               	subwf	___lwmod@dividend^0,f,c
  5471  001E5C  500B               	movf	(___lwmod@divisor+1)^0,w,c
  5472  001E5E  5A09               	subwfb	(___lwmod@dividend+1)^0,f,c
  5473  001E60                     l2371:
  5474  001E60  90D8               	bcf	status,0,c
  5475  001E62  320B               	rrcf	(___lwmod@divisor+1)^0,f,c
  5476  001E64  320A               	rrcf	___lwmod@divisor^0,f,c
  5477  001E66  2E0C               	decfsz	___lwmod@counter^0,f,c
  5478  001E68  EF21  F00F         	goto	l2367
  5479  001E6C                     l1065:
  5480  001E6C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5481  001E70  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5482  001E74  0012               	return		;funcret
  5483  001E76                     __end_of___lwmod:
  5484                           	callstack 0
  5485                           
  5486 ;; *************** function ___lwdiv *****************
  5487 ;; Defined at:
  5488 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  dividend        2    0[COMRAM] unsigned int 
  5491 ;;  divisor         2    2[COMRAM] unsigned int 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  quotient        2    4[COMRAM] unsigned int 
  5494 ;;  counter         1    6[COMRAM] unsigned char 
  5495 ;; Return value:  Size  Location     Type
  5496 ;;                  2    0[COMRAM] unsigned int 
  5497 ;; Registers used:
  5498 ;;		wreg, status,2, status,0
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5504 ;;      Params:         4       0       0       0       0       0       0
  5505 ;;      Locals:         3       0       0       0       0       0       0
  5506 ;;      Temps:          0       0       0       0       0       0       0
  5507 ;;      Totals:         7       0       0       0       0       0       0
  5508 ;;Total ram usage:        7 bytes
  5509 ;; Hardware stack levels used: 1
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		_mostraDisplay
  5514 ;;		_pwmSet
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           	psect	text38
  5519  001D34                     __ptext38:
  5520                           	callstack 0
  5521  001D34                     ___lwdiv:
  5522                           	callstack 28
  5523  001D34  0E00               	movlw	0
  5524  001D36  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  5525  001D38  0E00               	movlw	0
  5526  001D3A  6E05               	movwf	___lwdiv@quotient^0,c
  5527  001D3C  5003               	movf	___lwdiv@divisor^0,w,c
  5528  001D3E  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5529  001D40  B4D8               	btfsc	status,2,c
  5530  001D42  EFA5  F00E         	goto	u1841
  5531  001D46  EFA7  F00E         	goto	u1840
  5532  001D4A                     u1841:
  5533  001D4A  EFCF  F00E         	goto	l1055
  5534  001D4E                     u1840:
  5535  001D4E  0E01               	movlw	1
  5536  001D50  6E07               	movwf	___lwdiv@counter^0,c
  5537  001D52  EFAF  F00E         	goto	l2345
  5538  001D56                     l2343:
  5539  001D56  90D8               	bcf	status,0,c
  5540  001D58  3603               	rlcf	___lwdiv@divisor^0,f,c
  5541  001D5A  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5542  001D5C  2A07               	incf	___lwdiv@counter^0,f,c
  5543  001D5E                     l2345:
  5544  001D5E  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  5545  001D60  EFB4  F00E         	goto	u1851
  5546  001D64  EFB6  F00E         	goto	u1850
  5547  001D68                     u1851:
  5548  001D68  EFAB  F00E         	goto	l2343
  5549  001D6C                     u1850:
  5550  001D6C                     l2347:
  5551  001D6C  90D8               	bcf	status,0,c
  5552  001D6E  3605               	rlcf	___lwdiv@quotient^0,f,c
  5553  001D70  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5554  001D72  5003               	movf	___lwdiv@divisor^0,w,c
  5555  001D74  5C01               	subwf	___lwdiv@dividend^0,w,c
  5556  001D76  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  5557  001D78  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5558  001D7A  A0D8               	btfss	status,0,c
  5559  001D7C  EFC2  F00E         	goto	u1861
  5560  001D80  EFC4  F00E         	goto	u1860
  5561  001D84                     u1861:
  5562  001D84  EFC9  F00E         	goto	l2355
  5563  001D88                     u1860:
  5564  001D88  5003               	movf	___lwdiv@divisor^0,w,c
  5565  001D8A  5E01               	subwf	___lwdiv@dividend^0,f,c
  5566  001D8C  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  5567  001D8E  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5568  001D90  8005               	bsf	___lwdiv@quotient^0,0,c
  5569  001D92                     l2355:
  5570  001D92  90D8               	bcf	status,0,c
  5571  001D94  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5572  001D96  3203               	rrcf	___lwdiv@divisor^0,f,c
  5573  001D98  2E07               	decfsz	___lwdiv@counter^0,f,c
  5574  001D9A  EFB6  F00E         	goto	l2347
  5575  001D9E                     l1055:
  5576  001D9E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5577  001DA2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5578  001DA6  0012               	return		;funcret
  5579  001DA8                     __end_of___lwdiv:
  5580                           	callstack 0
  5581                           
  5582 ;; *************** function _apagaDisplay *****************
  5583 ;; Defined at:
  5584 ;;		line 52 in file "main.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;		None
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;		None
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      void 
  5591 ;; Registers used:
  5592 ;;		wreg, status,2, status,0, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5598 ;;      Params:         0       0       0       0       0       0       0
  5599 ;;      Locals:         0       0       0       0       0       0       0
  5600 ;;      Temps:          0       0       0       0       0       0       0
  5601 ;;      Totals:         0       0       0       0       0       0       0
  5602 ;;Total ram usage:        0 bytes
  5603 ;; Hardware stack levels used: 1
  5604 ;; Hardware stack levels required when called: 1
  5605 ;; This function calls:
  5606 ;;		_ssdDigit
  5607 ;; This function is called by:
  5608 ;;		_calcula
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text39
  5613  002256                     __ptext39:
  5614                           	callstack 0
  5615  002256                     _apagaDisplay:
  5616                           	callstack 28
  5617  002256                     
  5618                           ;main.c: 53:     ssdDigit(0, 0);
  5619  002256  0E00               	movlw	0
  5620  002258  6E01               	movwf	ssdDigit@pos^0,c
  5621  00225A  0E00               	movlw	0
  5622  00225C  EC68  F00F         	call	_ssdDigit
  5623                           
  5624                           ;main.c: 54:     ssdDigit(0, 1);
  5625  002260  0E01               	movlw	1
  5626  002262  6E01               	movwf	ssdDigit@pos^0,c
  5627  002264  0E00               	movlw	0
  5628  002266  EC68  F00F         	call	_ssdDigit
  5629                           
  5630                           ;main.c: 55:     ssdDigit(0, 2);
  5631  00226A  0E02               	movlw	2
  5632  00226C  6E01               	movwf	ssdDigit@pos^0,c
  5633  00226E  0E00               	movlw	0
  5634  002270  EC68  F00F         	call	_ssdDigit
  5635                           
  5636                           ;main.c: 56:     ssdDigit(0, 3);
  5637  002274  0E03               	movlw	3
  5638  002276  6E01               	movwf	ssdDigit@pos^0,c
  5639  002278  0E00               	movlw	0
  5640  00227A  EC68  F00F         	call	_ssdDigit
  5641  00227E  0012               	return		;funcret
  5642  002280                     __end_of_apagaDisplay:
  5643                           	callstack 0
  5644                           
  5645 ;; *************** function _ssdDigit *****************
  5646 ;; Defined at:
  5647 ;;		line 34 in file "ssd.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  val             1    wreg     unsigned char 
  5650 ;;  pos             1    0[COMRAM] unsigned char 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  val             1    1[COMRAM] unsigned char 
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  1    wreg      void 
  5655 ;; Registers used:
  5656 ;;		wreg, status,2, status,0
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5662 ;;      Params:         1       0       0       0       0       0       0
  5663 ;;      Locals:         1       0       0       0       0       0       0
  5664 ;;      Temps:          0       0       0       0       0       0       0
  5665 ;;      Totals:         2       0       0       0       0       0       0
  5666 ;;Total ram usage:        2 bytes
  5667 ;; Hardware stack levels used: 1
  5668 ;; This function calls:
  5669 ;;		Nothing
  5670 ;; This function is called by:
  5671 ;;		_mostraDisplay
  5672 ;;		_apagaDisplay
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text40
  5677  001ED0                     __ptext40:
  5678                           	callstack 0
  5679  001ED0                     _ssdDigit:
  5680                           	callstack 28
  5681                           
  5682                           ;incstack = 0
  5683                           ;ssdDigit@val stored from wreg
  5684  001ED0  6E02               	movwf	ssdDigit@val^0,c
  5685  001ED2                     
  5686                           ;ssd.c: 35:     if (pos == 0) {
  5687  001ED2  5001               	movf	ssdDigit@pos^0,w,c
  5688  001ED4  A4D8               	btfss	status,2,c
  5689  001ED6  EF6F  F00F         	goto	u1801
  5690  001EDA  EF71  F00F         	goto	u1800
  5691  001EDE                     u1801:
  5692  001EDE  EF73  F00F         	goto	l2325
  5693  001EE2                     u1800:
  5694  001EE2                     
  5695                           ;ssd.c: 36:         v0 = val;
  5696  001EE2  C002  F042         	movff	ssdDigit@val,_v0
  5697  001EE6                     l2325:
  5698                           
  5699                           ;ssd.c: 38:     if (pos == 1) {
  5700  001EE6  0401               	decf	ssdDigit@pos^0,w,c
  5701  001EE8  A4D8               	btfss	status,2,c
  5702  001EEA  EF79  F00F         	goto	u1811
  5703  001EEE  EF7B  F00F         	goto	u1810
  5704  001EF2                     u1811:
  5705  001EF2  EF7D  F00F         	goto	l2329
  5706  001EF6                     u1810:
  5707  001EF6                     
  5708                           ;ssd.c: 39:         v1 = val;
  5709  001EF6  C002  F041         	movff	ssdDigit@val,_v1
  5710  001EFA                     l2329:
  5711                           
  5712                           ;ssd.c: 41:     if (pos == 2) {
  5713  001EFA  0E02               	movlw	2
  5714  001EFC  1801               	xorwf	ssdDigit@pos^0,w,c
  5715  001EFE  A4D8               	btfss	status,2,c
  5716  001F00  EF84  F00F         	goto	u1821
  5717  001F04  EF86  F00F         	goto	u1820
  5718  001F08                     u1821:
  5719  001F08  EF88  F00F         	goto	l2333
  5720  001F0C                     u1820:
  5721  001F0C                     
  5722                           ;ssd.c: 42:         v2 = val;
  5723  001F0C  C002  F040         	movff	ssdDigit@val,_v2
  5724  001F10                     l2333:
  5725                           
  5726                           ;ssd.c: 44:     if (pos == 3) {
  5727  001F10  0E03               	movlw	3
  5728  001F12  1801               	xorwf	ssdDigit@pos^0,w,c
  5729  001F14  A4D8               	btfss	status,2,c
  5730  001F16  EF8F  F00F         	goto	u1831
  5731  001F1A  EF91  F00F         	goto	u1830
  5732  001F1E                     u1831:
  5733  001F1E  EF93  F00F         	goto	l413
  5734  001F22                     u1830:
  5735  001F22                     
  5736                           ;ssd.c: 45:         v3 = val;
  5737  001F22  C002  F03F         	movff	ssdDigit@val,_v3
  5738  001F26                     l413:
  5739  001F26  0012               	return		;funcret
  5740  001F28                     __end_of_ssdDigit:
  5741                           	callstack 0
  5742                           
  5743 ;; *************** function ___lmul *****************
  5744 ;; Defined at:
  5745 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  multiplier      4    0[COMRAM] unsigned long 
  5748 ;;  multiplicand    4    4[COMRAM] unsigned long 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  product         4    8[COMRAM] unsigned long 
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  4    0[COMRAM] unsigned long 
  5753 ;; Registers used:
  5754 ;;		wreg, status,2, status,0
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5760 ;;      Params:         8       0       0       0       0       0       0
  5761 ;;      Locals:         4       0       0       0       0       0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0
  5763 ;;      Totals:        12       0       0       0       0       0       0
  5764 ;;Total ram usage:       12 bytes
  5765 ;; Hardware stack levels used: 1
  5766 ;; This function calls:
  5767 ;;		Nothing
  5768 ;; This function is called by:
  5769 ;;		_levelocidade
  5770 ;;		_leTeclado
  5771 ;;		_serialcom
  5772 ;;		_calcula
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text41
  5777  001DA8                     __ptext41:
  5778                           	callstack 0
  5779  001DA8                     ___lmul:
  5780                           	callstack 29
  5781  001DA8  0E00               	movlw	0
  5782  001DAA  6E09               	movwf	___lmul@product^0,c
  5783  001DAC  0E00               	movlw	0
  5784  001DAE  6E0A               	movwf	(___lmul@product+1)^0,c
  5785  001DB0  0E00               	movlw	0
  5786  001DB2  6E0B               	movwf	(___lmul@product+2)^0,c
  5787  001DB4  0E00               	movlw	0
  5788  001DB6  6E0C               	movwf	(___lmul@product+3)^0,c
  5789  001DB8                     l2475:
  5790  001DB8  A001               	btfss	___lmul@multiplier^0,0,c
  5791  001DBA  EFE1  F00E         	goto	u2101
  5792  001DBE  EFE3  F00E         	goto	u2100
  5793  001DC2                     u2101:
  5794  001DC2  EFEB  F00E         	goto	l2479
  5795  001DC6                     u2100:
  5796  001DC6  5005               	movf	___lmul@multiplicand^0,w,c
  5797  001DC8  2609               	addwf	___lmul@product^0,f,c
  5798  001DCA  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  5799  001DCC  220A               	addwfc	(___lmul@product+1)^0,f,c
  5800  001DCE  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  5801  001DD0  220B               	addwfc	(___lmul@product+2)^0,f,c
  5802  001DD2  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  5803  001DD4  220C               	addwfc	(___lmul@product+3)^0,f,c
  5804  001DD6                     l2479:
  5805  001DD6  90D8               	bcf	status,0,c
  5806  001DD8  3605               	rlcf	___lmul@multiplicand^0,f,c
  5807  001DDA  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5808  001DDC  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5809  001DDE  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5810  001DE0  90D8               	bcf	status,0,c
  5811  001DE2  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  5812  001DE4  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  5813  001DE6  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  5814  001DE8  3201               	rrcf	___lmul@multiplier^0,f,c
  5815  001DEA  5001               	movf	___lmul@multiplier^0,w,c
  5816  001DEC  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  5817  001DEE  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  5818  001DF0  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  5819  001DF2  A4D8               	btfss	status,2,c
  5820  001DF4  EFFE  F00E         	goto	u2111
  5821  001DF8  EF00  F00F         	goto	u2110
  5822  001DFC                     u2111:
  5823  001DFC  EFDC  F00E         	goto	l2475
  5824  001E00                     u2110:
  5825  001E00  C009  F001         	movff	___lmul@product,?___lmul
  5826  001E04  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  5827  001E08  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  5828  001E0C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  5829  001E10  0012               	return		;funcret
  5830  001E12                     __end_of___lmul:
  5831                           	callstack 0
  5832                           
  5833 ;; *************** function _adcInit *****************
  5834 ;; Defined at:
  5835 ;;		line 25 in file "adc.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;		None
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      void 
  5842 ;; Registers used:
  5843 ;;		wreg, status,2, status,0, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5849 ;;      Params:         0       0       0       0       0       0       0
  5850 ;;      Locals:         0       0       0       0       0       0       0
  5851 ;;      Temps:          0       0       0       0       0       0       0
  5852 ;;      Totals:         0       0       0       0       0       0       0
  5853 ;;Total ram usage:        0 bytes
  5854 ;; Hardware stack levels used: 1
  5855 ;; Hardware stack levels required when called: 1
  5856 ;; This function calls:
  5857 ;;		_pinMode
  5858 ;; This function is called by:
  5859 ;;		_main
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text42
  5864  002072                     __ptext42:
  5865                           	callstack 0
  5866  002072                     _adcInit:
  5867                           	callstack 29
  5868  002072                     
  5869                           ;adc.c: 27:     pinMode(PIN_A0, 1);
  5870  002072  0E00               	movlw	0
  5871  002074  6E02               	movwf	(pinMode@pin+1)^0,c
  5872  002076  0E00               	movlw	0
  5873  002078  6E01               	movwf	pinMode@pin^0,c
  5874  00207A  0E00               	movlw	0
  5875  00207C  6E04               	movwf	(pinMode@type+1)^0,c
  5876  00207E  0E01               	movlw	1
  5877  002080  6E03               	movwf	pinMode@type^0,c
  5878  002082  EC0B  F008         	call	_pinMode	;wreg free
  5879                           
  5880                           ;adc.c: 28:     pinMode(PIN_A1, 1);
  5881  002086  0E00               	movlw	0
  5882  002088  6E02               	movwf	(pinMode@pin+1)^0,c
  5883  00208A  0E01               	movlw	1
  5884  00208C  6E01               	movwf	pinMode@pin^0,c
  5885  00208E  0E00               	movlw	0
  5886  002090  6E04               	movwf	(pinMode@type+1)^0,c
  5887  002092  0E01               	movlw	1
  5888  002094  6E03               	movwf	pinMode@type^0,c
  5889  002096  EC0B  F008         	call	_pinMode	;wreg free
  5890                           
  5891                           ;adc.c: 29:     pinMode(PIN_A2, 1);
  5892  00209A  0E00               	movlw	0
  5893  00209C  6E02               	movwf	(pinMode@pin+1)^0,c
  5894  00209E  0E02               	movlw	2
  5895  0020A0  6E01               	movwf	pinMode@pin^0,c
  5896  0020A2  0E00               	movlw	0
  5897  0020A4  6E04               	movwf	(pinMode@type+1)^0,c
  5898  0020A6  0E01               	movlw	1
  5899  0020A8  6E03               	movwf	pinMode@type^0,c
  5900  0020AA  EC0B  F008         	call	_pinMode	;wreg free
  5901  0020AE                     
  5902                           ;adc.c: 31:     ((ADCON0) |= (1<<(0)));
  5903  0020AE  80C2               	bsf	194,0,c	;volatile
  5904  0020B0                     
  5905                           ;adc.c: 33:     ADCON1 = 0b00001100;
  5906  0020B0  0E0C               	movlw	12
  5907  0020B2  6EC1               	movwf	193,c	;volatile
  5908  0020B4                     
  5909                           ;adc.c: 34:     ADCON2 = 0b10101010;
  5910  0020B4  0EAA               	movlw	170
  5911  0020B6  6EC0               	movwf	192,c	;volatile
  5912  0020B8  0012               	return		;funcret
  5913  0020BA                     __end_of_adcInit:
  5914                           	callstack 0
  5915                           
  5916 ;; *************** function _pinMode *****************
  5917 ;; Defined at:
  5918 ;;		line 54 in file "io.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  pin             2    0[COMRAM] int 
  5921 ;;  type            2    2[COMRAM] int 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;		None
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      void 
  5926 ;; Registers used:
  5927 ;;		wreg, status,2, status,0
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5933 ;;      Params:         4       0       0       0       0       0       0
  5934 ;;      Locals:         0       0       0       0       0       0       0
  5935 ;;      Temps:          2       0       0       0       0       0       0
  5936 ;;      Totals:         6       0       0       0       0       0       0
  5937 ;;Total ram usage:        6 bytes
  5938 ;; Hardware stack levels used: 1
  5939 ;; This function calls:
  5940 ;;		Nothing
  5941 ;; This function is called by:
  5942 ;;		_adcInit
  5943 ;;		_kpInit
  5944 ;;		_lcdInit
  5945 ;;		_soInit
  5946 ;;		_ssdInit
  5947 ;;		_i2cInit
  5948 ;;		_read_SCL
  5949 ;;		_read_SDA
  5950 ;;		_clear_SCL
  5951 ;;		_clear_SDA
  5952 ;;		_rgbInit
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text43
  5957  001016                     __ptext43:
  5958                           	callstack 0
  5959  001016                     _pinMode:
  5960                           	callstack 28
  5961  001016                     
  5962                           ;io.c: 56:     if(pin <8){
  5963  001016  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  5964  001018  EF19  F008         	goto	u1500
  5965  00101C  5002               	movf	(pinMode@pin+1)^0,w,c
  5966  00101E  E107               	bnz	u1501
  5967  001020  0E08               	movlw	8
  5968  001022  5C01               	subwf	pinMode@pin^0,w,c
  5969  001024  B0D8               	btfsc	status,0,c
  5970  001026  EF17  F008         	goto	u1501
  5971  00102A  EF19  F008         	goto	u1500
  5972  00102E                     u1501:
  5973  00102E  EF43  F008         	goto	l2245
  5974  001032                     u1500:
  5975  001032                     
  5976                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  5977  001032  5003               	movf	pinMode@type^0,w,c
  5978  001034  1004               	iorwf	(pinMode@type+1)^0,w,c
  5979  001036  B4D8               	btfsc	status,2,c
  5980  001038  EF20  F008         	goto	u1511
  5981  00103C  EF22  F008         	goto	u1510
  5982  001040                     u1511:
  5983  001040  EF32  F008         	goto	l2243
  5984  001044                     u1510:
  5985  001044  C001  F005         	movff	pinMode@pin,??_pinMode
  5986  001048  0E01               	movlw	1
  5987  00104A  6E06               	movwf	(??_pinMode+1)^0,c
  5988  00104C  2A05               	incf	??_pinMode^0,f,c
  5989  00104E  EF2B  F008         	goto	u1524
  5990  001052                     u1525:
  5991  001052  90D8               	bcf	status,0,c
  5992  001054  3606               	rlcf	(??_pinMode+1)^0,f,c
  5993  001056                     u1524:
  5994  001056  2E05               	decfsz	??_pinMode^0,f,c
  5995  001058  EF29  F008         	goto	u1525
  5996  00105C  5006               	movf	(??_pinMode+1)^0,w,c
  5997  00105E  1292               	iorwf	146,f,c	;volatile
  5998  001060  EF31  F009         	goto	l195
  5999  001064                     l2243:
  6000  001064  C001  F005         	movff	pinMode@pin,??_pinMode
  6001  001068  0E01               	movlw	1
  6002  00106A  6E06               	movwf	(??_pinMode+1)^0,c
  6003  00106C  2A05               	incf	??_pinMode^0,f,c
  6004  00106E  EF3B  F008         	goto	u1534
  6005  001072                     u1535:
  6006  001072  90D8               	bcf	status,0,c
  6007  001074  3606               	rlcf	(??_pinMode+1)^0,f,c
  6008  001076                     u1534:
  6009  001076  2E05               	decfsz	??_pinMode^0,f,c
  6010  001078  EF39  F008         	goto	u1535
  6011  00107C  5006               	movf	(??_pinMode+1)^0,w,c
  6012  00107E  0AFF               	xorlw	255
  6013  001080  1692               	andwf	146,f,c	;volatile
  6014  001082  EF31  F009         	goto	l195
  6015  001086                     l2245:
  6016  001086  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6017  001088  EF51  F008         	goto	u1540
  6018  00108C  5002               	movf	(pinMode@pin+1)^0,w,c
  6019  00108E  E107               	bnz	u1541
  6020  001090  0E10               	movlw	16
  6021  001092  5C01               	subwf	pinMode@pin^0,w,c
  6022  001094  B0D8               	btfsc	status,0,c
  6023  001096  EF4F  F008         	goto	u1541
  6024  00109A  EF51  F008         	goto	u1540
  6025  00109E                     u1541:
  6026  00109E  EF7F  F008         	goto	l2253
  6027  0010A2                     u1540:
  6028  0010A2                     
  6029                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  6030  0010A2  5003               	movf	pinMode@type^0,w,c
  6031  0010A4  1004               	iorwf	(pinMode@type+1)^0,w,c
  6032  0010A6  B4D8               	btfsc	status,2,c
  6033  0010A8  EF58  F008         	goto	u1551
  6034  0010AC  EF5A  F008         	goto	u1550
  6035  0010B0                     u1551:
  6036  0010B0  EF6C  F008         	goto	l2251
  6037  0010B4                     u1550:
  6038  0010B4  C001  F005         	movff	pinMode@pin,??_pinMode
  6039  0010B8  0EF8               	movlw	-8
  6040  0010BA  2605               	addwf	??_pinMode^0,f,c
  6041  0010BC  0E01               	movlw	1
  6042  0010BE  6E06               	movwf	(??_pinMode+1)^0,c
  6043  0010C0  2A05               	incf	??_pinMode^0,f,c
  6044  0010C2  EF65  F008         	goto	u1564
  6045  0010C6                     u1565:
  6046  0010C6  90D8               	bcf	status,0,c
  6047  0010C8  3606               	rlcf	(??_pinMode+1)^0,f,c
  6048  0010CA                     u1564:
  6049  0010CA  2E05               	decfsz	??_pinMode^0,f,c
  6050  0010CC  EF63  F008         	goto	u1565
  6051  0010D0  5006               	movf	(??_pinMode+1)^0,w,c
  6052  0010D2  1293               	iorwf	147,f,c	;volatile
  6053  0010D4  EF31  F009         	goto	l195
  6054  0010D8                     l2251:
  6055  0010D8  C001  F005         	movff	pinMode@pin,??_pinMode
  6056  0010DC  0EF8               	movlw	-8
  6057  0010DE  2605               	addwf	??_pinMode^0,f,c
  6058  0010E0  0E01               	movlw	1
  6059  0010E2  6E06               	movwf	(??_pinMode+1)^0,c
  6060  0010E4  2A05               	incf	??_pinMode^0,f,c
  6061  0010E6  EF77  F008         	goto	u1574
  6062  0010EA                     u1575:
  6063  0010EA  90D8               	bcf	status,0,c
  6064  0010EC  3606               	rlcf	(??_pinMode+1)^0,f,c
  6065  0010EE                     u1574:
  6066  0010EE  2E05               	decfsz	??_pinMode^0,f,c
  6067  0010F0  EF75  F008         	goto	u1575
  6068  0010F4  5006               	movf	(??_pinMode+1)^0,w,c
  6069  0010F6  0AFF               	xorlw	255
  6070  0010F8  1693               	andwf	147,f,c	;volatile
  6071  0010FA  EF31  F009         	goto	l195
  6072  0010FE                     l2253:
  6073  0010FE  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6074  001100  EF8D  F008         	goto	u1580
  6075  001104  5002               	movf	(pinMode@pin+1)^0,w,c
  6076  001106  E107               	bnz	u1581
  6077  001108  0E18               	movlw	24
  6078  00110A  5C01               	subwf	pinMode@pin^0,w,c
  6079  00110C  B0D8               	btfsc	status,0,c
  6080  00110E  EF8B  F008         	goto	u1581
  6081  001112  EF8D  F008         	goto	u1580
  6082  001116                     u1581:
  6083  001116  EFBB  F008         	goto	l2261
  6084  00111A                     u1580:
  6085  00111A                     
  6086                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  6087  00111A  5003               	movf	pinMode@type^0,w,c
  6088  00111C  1004               	iorwf	(pinMode@type+1)^0,w,c
  6089  00111E  B4D8               	btfsc	status,2,c
  6090  001120  EF94  F008         	goto	u1591
  6091  001124  EF96  F008         	goto	u1590
  6092  001128                     u1591:
  6093  001128  EFA8  F008         	goto	l2259
  6094  00112C                     u1590:
  6095  00112C  C001  F005         	movff	pinMode@pin,??_pinMode
  6096  001130  0EF0               	movlw	-16
  6097  001132  2605               	addwf	??_pinMode^0,f,c
  6098  001134  0E01               	movlw	1
  6099  001136  6E06               	movwf	(??_pinMode+1)^0,c
  6100  001138  2A05               	incf	??_pinMode^0,f,c
  6101  00113A  EFA1  F008         	goto	u1604
  6102  00113E                     u1605:
  6103  00113E  90D8               	bcf	status,0,c
  6104  001140  3606               	rlcf	(??_pinMode+1)^0,f,c
  6105  001142                     u1604:
  6106  001142  2E05               	decfsz	??_pinMode^0,f,c
  6107  001144  EF9F  F008         	goto	u1605
  6108  001148  5006               	movf	(??_pinMode+1)^0,w,c
  6109  00114A  1294               	iorwf	148,f,c	;volatile
  6110  00114C  EF31  F009         	goto	l195
  6111  001150                     l2259:
  6112  001150  C001  F005         	movff	pinMode@pin,??_pinMode
  6113  001154  0EF0               	movlw	-16
  6114  001156  2605               	addwf	??_pinMode^0,f,c
  6115  001158  0E01               	movlw	1
  6116  00115A  6E06               	movwf	(??_pinMode+1)^0,c
  6117  00115C  2A05               	incf	??_pinMode^0,f,c
  6118  00115E  EFB3  F008         	goto	u1614
  6119  001162                     u1615:
  6120  001162  90D8               	bcf	status,0,c
  6121  001164  3606               	rlcf	(??_pinMode+1)^0,f,c
  6122  001166                     u1614:
  6123  001166  2E05               	decfsz	??_pinMode^0,f,c
  6124  001168  EFB1  F008         	goto	u1615
  6125  00116C  5006               	movf	(??_pinMode+1)^0,w,c
  6126  00116E  0AFF               	xorlw	255
  6127  001170  1694               	andwf	148,f,c	;volatile
  6128  001172  EF31  F009         	goto	l195
  6129  001176                     l2261:
  6130  001176  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6131  001178  EFC9  F008         	goto	u1620
  6132  00117C  5002               	movf	(pinMode@pin+1)^0,w,c
  6133  00117E  E107               	bnz	u1621
  6134  001180  0E20               	movlw	32
  6135  001182  5C01               	subwf	pinMode@pin^0,w,c
  6136  001184  B0D8               	btfsc	status,0,c
  6137  001186  EFC7  F008         	goto	u1621
  6138  00118A  EFC9  F008         	goto	u1620
  6139  00118E                     u1621:
  6140  00118E  EFF7  F008         	goto	l2269
  6141  001192                     u1620:
  6142  001192                     
  6143                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  6144  001192  5003               	movf	pinMode@type^0,w,c
  6145  001194  1004               	iorwf	(pinMode@type+1)^0,w,c
  6146  001196  B4D8               	btfsc	status,2,c
  6147  001198  EFD0  F008         	goto	u1631
  6148  00119C  EFD2  F008         	goto	u1630
  6149  0011A0                     u1631:
  6150  0011A0  EFE4  F008         	goto	l2267
  6151  0011A4                     u1630:
  6152  0011A4  C001  F005         	movff	pinMode@pin,??_pinMode
  6153  0011A8  0EE8               	movlw	-24
  6154  0011AA  2605               	addwf	??_pinMode^0,f,c
  6155  0011AC  0E01               	movlw	1
  6156  0011AE  6E06               	movwf	(??_pinMode+1)^0,c
  6157  0011B0  2A05               	incf	??_pinMode^0,f,c
  6158  0011B2  EFDD  F008         	goto	u1644
  6159  0011B6                     u1645:
  6160  0011B6  90D8               	bcf	status,0,c
  6161  0011B8  3606               	rlcf	(??_pinMode+1)^0,f,c
  6162  0011BA                     u1644:
  6163  0011BA  2E05               	decfsz	??_pinMode^0,f,c
  6164  0011BC  EFDB  F008         	goto	u1645
  6165  0011C0  5006               	movf	(??_pinMode+1)^0,w,c
  6166  0011C2  1295               	iorwf	149,f,c	;volatile
  6167  0011C4  EF31  F009         	goto	l195
  6168  0011C8                     l2267:
  6169  0011C8  C001  F005         	movff	pinMode@pin,??_pinMode
  6170  0011CC  0EE8               	movlw	-24
  6171  0011CE  2605               	addwf	??_pinMode^0,f,c
  6172  0011D0  0E01               	movlw	1
  6173  0011D2  6E06               	movwf	(??_pinMode+1)^0,c
  6174  0011D4  2A05               	incf	??_pinMode^0,f,c
  6175  0011D6  EFEF  F008         	goto	u1654
  6176  0011DA                     u1655:
  6177  0011DA  90D8               	bcf	status,0,c
  6178  0011DC  3606               	rlcf	(??_pinMode+1)^0,f,c
  6179  0011DE                     u1654:
  6180  0011DE  2E05               	decfsz	??_pinMode^0,f,c
  6181  0011E0  EFED  F008         	goto	u1655
  6182  0011E4  5006               	movf	(??_pinMode+1)^0,w,c
  6183  0011E6  0AFF               	xorlw	255
  6184  0011E8  1695               	andwf	149,f,c	;volatile
  6185  0011EA  EF31  F009         	goto	l195
  6186  0011EE                     l2269:
  6187  0011EE  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6188  0011F0  EF05  F009         	goto	u1660
  6189  0011F4  5002               	movf	(pinMode@pin+1)^0,w,c
  6190  0011F6  E107               	bnz	u1661
  6191  0011F8  0E28               	movlw	40
  6192  0011FA  5C01               	subwf	pinMode@pin^0,w,c
  6193  0011FC  B0D8               	btfsc	status,0,c
  6194  0011FE  EF03  F009         	goto	u1661
  6195  001202  EF05  F009         	goto	u1660
  6196  001206                     u1661:
  6197  001206  EF31  F009         	goto	l195
  6198  00120A                     u1660:
  6199  00120A                     
  6200                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  6201  00120A  5003               	movf	pinMode@type^0,w,c
  6202  00120C  1004               	iorwf	(pinMode@type+1)^0,w,c
  6203  00120E  B4D8               	btfsc	status,2,c
  6204  001210  EF0C  F009         	goto	u1671
  6205  001214  EF0E  F009         	goto	u1670
  6206  001218                     u1671:
  6207  001218  EF20  F009         	goto	l2275
  6208  00121C                     u1670:
  6209  00121C  C001  F005         	movff	pinMode@pin,??_pinMode
  6210  001220  0EE0               	movlw	-32
  6211  001222  2605               	addwf	??_pinMode^0,f,c
  6212  001224  0E01               	movlw	1
  6213  001226  6E06               	movwf	(??_pinMode+1)^0,c
  6214  001228  2A05               	incf	??_pinMode^0,f,c
  6215  00122A  EF19  F009         	goto	u1684
  6216  00122E                     u1685:
  6217  00122E  90D8               	bcf	status,0,c
  6218  001230  3606               	rlcf	(??_pinMode+1)^0,f,c
  6219  001232                     u1684:
  6220  001232  2E05               	decfsz	??_pinMode^0,f,c
  6221  001234  EF17  F009         	goto	u1685
  6222  001238  5006               	movf	(??_pinMode+1)^0,w,c
  6223  00123A  1296               	iorwf	150,f,c	;volatile
  6224  00123C  EF31  F009         	goto	l195
  6225  001240                     l2275:
  6226  001240  C001  F005         	movff	pinMode@pin,??_pinMode
  6227  001244  0EE0               	movlw	-32
  6228  001246  2605               	addwf	??_pinMode^0,f,c
  6229  001248  0E01               	movlw	1
  6230  00124A  6E06               	movwf	(??_pinMode+1)^0,c
  6231  00124C  2A05               	incf	??_pinMode^0,f,c
  6232  00124E  EF2B  F009         	goto	u1694
  6233  001252                     u1695:
  6234  001252  90D8               	bcf	status,0,c
  6235  001254  3606               	rlcf	(??_pinMode+1)^0,f,c
  6236  001256                     u1694:
  6237  001256  2E05               	decfsz	??_pinMode^0,f,c
  6238  001258  EF29  F009         	goto	u1695
  6239  00125C  5006               	movf	(??_pinMode+1)^0,w,c
  6240  00125E  0AFF               	xorlw	255
  6241  001260  1696               	andwf	150,f,c	;volatile
  6242  001262                     l195:
  6243  001262  0012               	return		;funcret
  6244  001264                     __end_of_pinMode:
  6245                           	callstack 0
  6246                           
  6247                           	psect	rparam
  6248  0000                     
  6249                           	psect	idloc
  6250                           
  6251                           ;Config register IDLOC0 @ 0x200000
  6252                           ;	unspecified, using default values
  6253  200000                     	org	2097152
  6254  200000  FF                 	db	255
  6255                           
  6256                           ;Config register IDLOC1 @ 0x200001
  6257                           ;	unspecified, using default values
  6258  200001                     	org	2097153
  6259  200001  FF                 	db	255
  6260                           
  6261                           ;Config register IDLOC2 @ 0x200002
  6262                           ;	unspecified, using default values
  6263  200002                     	org	2097154
  6264  200002  FF                 	db	255
  6265                           
  6266                           ;Config register IDLOC3 @ 0x200003
  6267                           ;	unspecified, using default values
  6268  200003                     	org	2097155
  6269  200003  FF                 	db	255
  6270                           
  6271                           ;Config register IDLOC4 @ 0x200004
  6272                           ;	unspecified, using default values
  6273  200004                     	org	2097156
  6274  200004  FF                 	db	255
  6275                           
  6276                           ;Config register IDLOC5 @ 0x200005
  6277                           ;	unspecified, using default values
  6278  200005                     	org	2097157
  6279  200005  FF                 	db	255
  6280                           
  6281                           ;Config register IDLOC6 @ 0x200006
  6282                           ;	unspecified, using default values
  6283  200006                     	org	2097158
  6284  200006  FF                 	db	255
  6285                           
  6286                           ;Config register IDLOC7 @ 0x200007
  6287                           ;	unspecified, using default values
  6288  200007                     	org	2097159
  6289  200007  FF                 	db	255
  6290                           
  6291                           	psect	config
  6292                           
  6293                           ; Padding undefined space
  6294  300000                     	org	3145728
  6295  300000  FF                 	db	255
  6296                           
  6297                           ;Config register CONFIG1H @ 0x300001
  6298                           ;	Oscillator Selection bits
  6299                           ;	OSC = HS, HS oscillator
  6300                           ;	Fail-Safe Clock Monitor Enable bit
  6301                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  6302                           ;	Internal/External Oscillator Switchover bit
  6303                           ;	IESO = OFF, Oscillator Switchover mode disabled
  6304  300001                     	org	3145729
  6305  300001  02                 	db	2
  6306                           
  6307                           ;Config register CONFIG2L @ 0x300002
  6308                           ;	Power-up Timer Enable bit
  6309                           ;	PWRT = OFF, PWRT disabled
  6310                           ;	Brown-out Reset Enable bits
  6311                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  6312                           ;	Brown Out Reset Voltage bits
  6313                           ;	BORV = 0x2E, user specified literal
  6314  300002                     	org	3145730
  6315  300002  71                 	db	369
  6316                           
  6317                           ;Config register CONFIG2H @ 0x300003
  6318                           ;	Watchdog Timer Enable bit
  6319                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6320                           ;	Watchdog Timer Postscale Select bits
  6321                           ;	WDTPS = 1, 1:1
  6322  300003                     	org	3145731
  6323  300003  00                 	db	0
  6324                           
  6325                           ; Padding undefined space
  6326  300004                     	org	3145732
  6327  300004  FF                 	db	255
  6328                           
  6329                           ;Config register CONFIG3H @ 0x300005
  6330                           ;	CCP2 MUX bit
  6331                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  6332                           ;	PORTB A/D Enable bit
  6333                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  6334                           ;	Low-Power Timer1 Oscillator Enable bit
  6335                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  6336                           ;	MCLR Pin Enable bit
  6337                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  6338  300005                     	org	3145733
  6339  300005  83                 	db	131
  6340                           
  6341                           ;Config register CONFIG4L @ 0x300006
  6342                           ;	Stack Full/Underflow Reset Enable bit
  6343                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  6344                           ;	Single-Supply ICSP Enable bit
  6345                           ;	LVP = OFF, Single-Supply ICSP disabled
  6346                           ;	Extended Instruction Set Enable bit
  6347                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  6348                           ;	Background Debugger Enable bit
  6349                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  6350  300006                     	org	3145734
  6351  300006  80                 	db	128
  6352                           
  6353                           ; Padding undefined space
  6354  300007                     	org	3145735
  6355  300007  FF                 	db	255
  6356                           
  6357                           ;Config register CONFIG5L @ 0x300008
  6358                           ;	Code Protection bit
  6359                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  6360                           ;	Code Protection bit
  6361                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  6362                           ;	Code Protection bit
  6363                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  6364                           ;	Code Protection bit
  6365                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  6366  300008                     	org	3145736
  6367  300008  0F                 	db	15
  6368                           
  6369                           ;Config register CONFIG5H @ 0x300009
  6370                           ;	Boot Block Code Protection bit
  6371                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  6372                           ;	Data EEPROM Code Protection bit
  6373                           ;	CPD = OFF, Data EEPROM not code-protected
  6374  300009                     	org	3145737
  6375  300009  C0                 	db	192
  6376                           
  6377                           ;Config register CONFIG6L @ 0x30000A
  6378                           ;	Write Protection bit
  6379                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  6380                           ;	Write Protection bit
  6381                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  6382                           ;	Write Protection bit
  6383                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  6384                           ;	Write Protection bit
  6385                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  6386  30000A                     	org	3145738
  6387  30000A  0F                 	db	15
  6388                           
  6389                           ;Config register CONFIG6H @ 0x30000B
  6390                           ;	Configuration Register Write Protection bit
  6391                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  6392                           ;	Boot Block Write Protection bit
  6393                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  6394                           ;	Data EEPROM Write Protection bit
  6395                           ;	WRTD = OFF, Data EEPROM not write-protected
  6396  30000B                     	org	3145739
  6397  30000B  E0                 	db	224
  6398                           
  6399                           ;Config register CONFIG7L @ 0x30000C
  6400                           ;	Table Read Protection bit
  6401                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  6402                           ;	Table Read Protection bit
  6403                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  6404                           ;	Table Read Protection bit
  6405                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  6406                           ;	Table Read Protection bit
  6407                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  6408  30000C                     	org	3145740
  6409  30000C  0F                 	db	15
  6410                           
  6411                           ;Config register CONFIG7H @ 0x30000D
  6412                           ;	Boot Block Table Read Protection bit
  6413                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  6414  30000D                     	org	3145741
  6415  30000D  40                 	db	64
  6416                           tosu	equ	0xFFF
  6417                           tosh	equ	0xFFE
  6418                           tosl	equ	0xFFD
  6419                           stkptr	equ	0xFFC
  6420                           pclatu	equ	0xFFB
  6421                           pclath	equ	0xFFA
  6422                           pcl	equ	0xFF9
  6423                           tblptru	equ	0xFF8
  6424                           tblptrh	equ	0xFF7
  6425                           tblptrl	equ	0xFF6
  6426                           tablat	equ	0xFF5
  6427                           prodh	equ	0xFF4
  6428                           prodl	equ	0xFF3
  6429                           indf0	equ	0xFEF
  6430                           postinc0	equ	0xFEE
  6431                           postdec0	equ	0xFED
  6432                           preinc0	equ	0xFEC
  6433                           plusw0	equ	0xFEB
  6434                           fsr0h	equ	0xFEA
  6435                           fsr0l	equ	0xFE9
  6436                           wreg	equ	0xFE8
  6437                           indf1	equ	0xFE7
  6438                           postinc1	equ	0xFE6
  6439                           postdec1	equ	0xFE5
  6440                           preinc1	equ	0xFE4
  6441                           plusw1	equ	0xFE3
  6442                           fsr1h	equ	0xFE2
  6443                           fsr1l	equ	0xFE1
  6444                           bsr	equ	0xFE0
  6445                           indf2	equ	0xFDF
  6446                           postinc2	equ	0xFDE
  6447                           postdec2	equ	0xFDD
  6448                           preinc2	equ	0xFDC
  6449                           plusw2	equ	0xFDB
  6450                           fsr2h	equ	0xFDA
  6451                           fsr2l	equ	0xFD9
  6452                           status	equ	0xFD8

Data Sizes:
    Strings     118
    Constant    27
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     45      73
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcdString@msg	PTR unsigned char  size(2) Largest target is 11
		 -> STR_18(CODE[9]), STR_17(CODE[7]), STR_16(CODE[9]), STR_15(CODE[7]), 
		 -> STR_14(CODE[9]), STR_13(CODE[7]), STR_12(CODE[10]), STR_11(CODE[7]), 
		 -> STR_10(CODE[9]), STR_9(CODE[8]), STR_8(CODE[9]), STR_7(CODE[8]), 
		 -> STR_6(CODE[9]), STR_5(CODE[7]), STR_4(CODE[11]), STR_3(CODE[7]), 
		 -> STR_2(CODE[9]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_levelocidade
    _ssdUpdate->_soWrite
    _ssdInit->_pinMode
    _serialcom->___llmod
    _levelocidade->___llmod
    _lcdPosition->_lcdCommand
    ___llmod->___lldiv
    _leTeclado->___lldiv
    _lcdString->_lcdChar
    _lcdChar->_pushByte
    _kpDebounce->_soWrite
    ___lldiv->___lmul
    _lcdInit->_lcdCommand
    _pushNibble->_soWrite
    _lcdCommand->_pushByte
    _pushByte->_soWrite
    _soWrite->_digitalWrite
    _PulseEnClock->_digitalWrite
    _PulseClockData->_digitalWrite
    _pulseEnablePin->_digitalWrite
    _kpInit->_pinMode
    _soInit->_pinMode
    _calcula->_mostraDisplay
    _mostraDisplay->___lwmod
    ___lwmod->___lwdiv
    _apagaDisplay->_ssdDigit
    _adcInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  389957
                                             42 COMRAM     3     3      0
                            _adcInit
                            _calcula
                             _kpInit
                            _lcdInit
                          _lcdString
                          _leTeclado
                       _levelocidade
                         _serialInit
                          _serialcom
                            _ssdInit
                          _ssdUpdate
                          _timerInit
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (1) _timerWait                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timerReset                                           4     2      2     167
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ssdUpdate                                            2     2      0   22593
                                              9 COMRAM     2     2      0
                       _digitalWrite
                            _soWrite
 ---------------------------------------------------------------------------------
 (1) _ssdInit                                              0     0      0    7872
                            _pinMode
                             _soInit
 ---------------------------------------------------------------------------------
 (1) _serialcom                                            6     6      0   66358
                                             34 COMRAM     6     6      0
                            ___lldiv
                            ___llmod
                             ___lmul
                            _adcRead
                         _lcdCommand
                          _lcdString
                         _serialRead
                         _serialSend
 ---------------------------------------------------------------------------------
 (2) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _levelocidade                                         8     8      0   95650
                                             34 COMRAM     8     8      0
                            ___lldiv
                            ___llmod
                             ___lmul
                            _adcRead
                            _lcdChar
                        _lcdPosition
                          _lcdString
 ---------------------------------------------------------------------------------
 (2) _lcdPosition                                          4     0      4   29285
                                             14 COMRAM     4     0      4
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _adcRead                                              4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1071
                                             25 COMRAM     9     1      8
                            ___lldiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _leTeclado                                            3     3      0   82826
                                             25 COMRAM     3     3      0
                            ___lldiv
                             ___lmul
                         _kpDebounce
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
 ---------------------------------------------------------------------------------
 (2) _lcdString                                            6     4      2   30533
                                             14 COMRAM     6     4      2
                            _lcdChar
 ---------------------------------------------------------------------------------
 (3) _lcdChar                                              1     1      0   29075
                                             13 COMRAM     1     1      0
                         _delayMicro
                           _pushByte
 ---------------------------------------------------------------------------------
 (2) _kpReadKey                                            5     5      0      60
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _kpRead                                               2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _kpDebounce                                           5     5      0   17769
                                              9 COMRAM     5     5      0
                        _digitalRead
                            _soWrite
 ---------------------------------------------------------------------------------
 (3) _digitalRead                                          5     3      2     524
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    2898
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              0     0      0   66428
                         _delayMicro
                          _delayMili
                         _lcdCommand
                            _pinMode
                         _pushNibble
                             _soInit
 ---------------------------------------------------------------------------------
 (2) _pushNibble                                           3     1      2   28781
                                              9 COMRAM     3     1      2
                       _digitalWrite
                     _pulseEnablePin
                            _soWrite
 ---------------------------------------------------------------------------------
 (2) _lcdCommand                                           1     1      0   29045
                                             13 COMRAM     1     1      0
                          _delayMili
                           _pushByte
 ---------------------------------------------------------------------------------
 (4) _pushByte                                             4     2      2   28673
                                              9 COMRAM     4     2      2
                       _digitalWrite
                     _pulseEnablePin
                            _soWrite
 ---------------------------------------------------------------------------------
 (2) _soWrite                                              3     1      2   17133
                                              6 COMRAM     3     1      2
                     _PulseClockData
                       _PulseEnClock
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _PulseEnClock                                         0     0      0    5460
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _PulseClockData                                       0     0      0    5460
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (5) _pulseEnablePin                                       0     0      0    5840
                         _delayMicro
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _digitalWrite                                         6     2      4    5460
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _delayMicro                                           4     2      2     380
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _delayMili                                            5     3      2     350
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _kpInit                                               0     0      0    7872
                            _pinMode
                             _soInit
 ---------------------------------------------------------------------------------
 (2) _soInit                                               0     0      0    3936
                            _pinMode
 ---------------------------------------------------------------------------------
 (1) _calcula                                              0     0      0    5695
                             ___lmul
                       _apagaDisplay
                      _mostraDisplay
 ---------------------------------------------------------------------------------
 (2) _mostraDisplay                                        8     8      0    2413
                                             12 COMRAM     8     8      0
                            ___lwdiv
                            ___lwmod
                           _ssdDigit
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     767
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     770
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _apagaDisplay                                         0     0      0     784
                           _ssdDigit
 ---------------------------------------------------------------------------------
 (3) _ssdDigit                                             2     1      1     784
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2498
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0    3936
                            _pinMode
 ---------------------------------------------------------------------------------
 (3) _pinMode                                              6     2      4    3936
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adcInit
     _pinMode
   _calcula
     ___lmul
     _apagaDisplay
       _ssdDigit
     _mostraDisplay
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _ssdDigit
   _kpInit
     _pinMode
     _soInit
       _pinMode
   _lcdInit
     _delayMicro
     _delayMili
     _lcdCommand
       _delayMili
       _pushByte
         _digitalWrite
         _pulseEnablePin
           _delayMicro
           _digitalWrite
         _soWrite
           _PulseClockData
             _digitalWrite
           _PulseEnClock
             _digitalWrite
           _digitalWrite
     _pinMode
     _pushNibble
       _digitalWrite
       _pulseEnablePin
       _soWrite
     _soInit
   _lcdString
     _lcdChar
       _delayMicro
       _pushByte
   _leTeclado
     ___lldiv
       ___lmul (ARG)
     ___lmul
     _kpDebounce
       _digitalRead
       _soWrite
     _kpRead
     _kpReadKey
     _lcdCommand
     _lcdString
   _levelocidade
     ___lldiv
     ___llmod
       ___lldiv (ARG)
       ___lmul (ARG)
     ___lmul
     _adcRead
     _lcdChar
     _lcdPosition
       _lcdCommand
     _lcdString
   _serialInit
   _serialcom
     ___lldiv
     ___llmod
     ___lmul
     _adcRead
     _lcdCommand
     _lcdString
     _serialRead
     _serialSend
   _ssdInit
     _pinMode
     _soInit
   _ssdUpdate
     _digitalWrite
     _soWrite
   _timerInit
   _timerReset
   _timerWait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2D      49       1       57.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      49      15        0.0%
DATA                 0      0      49       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Dec 17 10:41:09 2021

         _pulseEnablePin 20BA             lcdString@msg 000F                       l21 2006  
                     l22 2022                       l15 20B8                       l19 1FF8  
                     _v0 0042                       _v1 0041                       _v2 0040  
                     _v3 003F                       _op 003E                      l212 2362  
                    l232 1896                      l161 1014                      l170 1774  
                    l234 18AE                      l218 1D32                      l260 22A4  
                    l413 1F26                      l237 21A4                      l165 1778  
                    l254 21D4                      l166 1774                      l263 1ECE  
                    l271 2172                      l503 14A2                      l423 160E  
                    l248 236C                      l280 1FD2                      l520 0DC6  
                    l360 2348                      l440 234A                      l257 20FA  
                    l506 1984                      l266 2302                      l274 22E4  
                    l426 1F7C                      l195 1262                      l531 0B2A  
                    l443 2358                      l509 227E                      l381 2254  
                    l365 2200                      l357 2336                      l446 22C6  
                    l375 2138                      l368 231C                      l537 1C32  
                    l289 1AF2                      l449 236A                      l378 222A  
                    l386 2070                      l575 1E00                      l591 1B86  
                    l576 1E10                      l598 1B96                      l991 1CBA  
                    l984 1CAA                      _PR2 000FCB                      u700 1CFC  
                    u701 1CF8                      u710 1D30                      u711 1D2C  
                    u694 1CDC                      u695 1CD6     __end_of_apagaDisplay 2280  
                    _pot 0046                      wreg 000FE8                     l1062 1DA6  
                   l1055 1D9E                     l1072 1E74                     l1065 1E6C  
                   l2201 2202                     l2203 222C                     l3003 1A0E  
                   l2221 206C                     l2213 203C                     l2205 2024  
                   l2301 16E4                     l3005 15E8                     l2231 21B2  
                   l2223 20BA                     l2215 2054                     l2207 2038  
                   l2311 1748                     l2303 1700                     l3007 08F2  
                   l2241 1044                     l2321 1ED2                     l2233 21B6  
                   l2161 0DC8                     l2225 20CE                     l2217 205A  
                   l2401 235A                     l3009 0DA0                     l2251 10D8  
                   l2243 1064                     l2331 1F0C                     l2323 1EE2  
                   l2171 0E54                     l2163 0DE4                     l2227 20DA  
                   l2219 205C                     l2235 1E78                     l2315 22E8  
                   l2411 17F6                     l2403 177A                     l2261 1176  
                   l2253 10FE                     l2245 1086                     l2237 1016  
                   l2333 1F10                     l2325 1EE6                     l2341 1D4E  
                   l2229 21A6                     l2181 0EE6                     l2173 0E6E  
                   l2165 0DF6                     l2501 1B76                     l2309 172C  
                   l2413 181C                     l2421 186C                     l2405 178A  
                   l2317 22CA                     l2271 120A                     l2263 1192  
                   l2255 111A                     l2247 10A2                     l2239 1032  
                   l2335 1F22                     l2327 1EF6                     l2351 1D88  
                   l2343 1D56                     l2431 20FC                     l2191 0F7E  
                   l2183 0F06                     l2175 0E8E                     l2167 0E16  
                   l2503 1B80                     l2423 1884                     l2415 183A  
                   l2319 22D8                     l2511 1C5E                     l2273 121C  
                   l2265 11A4                     l2257 112C                     l2249 10B4  
                   l2521 2072                     l2329 1EFA                     l2353 1D90  
                   l2345 1D5E                     l2337 1D34                     l2361 1E24  
                   l2601 21A0                     l2193 0FA0                     l2185 0F28  
                   l2177 0EB0                     l2169 0E38                     l2433 2282  
                   l2425 188A                     l2417 1864                     l2409 17AA  
                   l2513 1C6C                     l2505 1C34                     l2441 2168  
                   l1721 231A                     l2275 1240                     l2267 11C8  
                   l2259 1150                     l2523 20AE                     l2355 1D92  
                   l2347 1D6C                     l2339 1D3C                     l2371 1E60  
                   l2363 1E2C                     l2195 0FBC                     l2187 0F44  
                   l2179 0ECC                     l2611 1AD4                     l2603 1A40  
                   l2427 188E                     l1491 1D10                     l2443 1F7E  
                   l2515 1C8A                     l2507 1C4A                     l2435 213A  
                   l2451 2336                     l2269 11EE                     l2525 20B0  
                   l2357 1D98                     l2349 1D72                     l2373 1E66  
                   l2365 1E34                     l2197 0FD6                     l2189 0F5E  
                   l2613 1AE0                     l2605 1AA0                     l2293 169C  
                   l2285 1654                     l2277 1610                     l2429 18A6  
                   l1493 1D14                     l1485 1CC4                     l2445 1F8A  
                   l2701 0B8E                     l2517 1C9A                     l2509 1C52  
                   l2381 200C                     l2437 214C                     l1717 2304  
                   l2461 21EC                     l2453 2344                     l2621 1504  
                   l2527 20B4                     l2471 2256                     l2367 1E42  
                   l2359 1E12                     l2199 0FF6                     l2615 1AE6  
                   l2607 1AAC                     l2295 16B8                     l2287 1670  
                   l2279 162C                     l1495 1D30                     l1487 1CFC  
                   l1479 1CBC                     l2447 1FA6                     l2711 0C1A  
                   l2703 0BE6                     l2519 1CA4                     l2383 2012  
                   l2375 1FD4                     l2439 2156                     l1719 2318  
                   l2463 21FA                     l2455 21D6                     l2631 1564  
                   l2623 151C                     l2481 1DE0                     l2473 1DA8  
                   l2369 1E58                     l2617 1AEC                     l2609 1AC6  
                   l2449 1FAA                     l2721 0CA6                     l2713 0C72  
                   l2705 0BEC                     l2385 201A                     l2377 1FEE  
                   l2465 21FE                     l2457 21DA                     l2801 0942  
                   l2641 15B8                     l2633 156C                     l2625 1530  
                   l1761 234A                     l2475 1DB8                     l2491 1B2E  
                   l2483 1AF4                     l2731 0D32                     l2723 0CFE  
                   l2715 0C78                     l2707 0BF8                     l2379 1FF6  
                   l2459 21E8                     l2811 0AA8                     l2803 0948  
                   l2643 15CC                     l2635 1584                     l2627 1538  
                   l2619 14A4                     l2477 1DC6                     l2469 18B0  
                   l2821 1C08                     l2493 1B3C                     l2485 1B04  
                   l2725 0D04                     l2717 0C84                     l2709 0C0A  
                   l2805 09A8                     l2741 0694                     l2637 1598  
                   l2629 1550                     l2661 22B4                     l2479 1DD6  
                   l2823 1C10                     l2495 1B46                     l2487 1B1A  
                   l2727 0D10                     l2719 0C96                     l2735 0D8A  
                   l2671 1282                     l2807 09F8                     l2751 06B4  
                   l2743 069A                     l2655 1F28                     l2639 15A0  
                   l1775 2364                     l2663 22BC                     l2825 1C2E  
                   l2817 1B98                     l2497 1B64                     l2489 1B22  
                   l2729 0D22                     l2681 1376                     l2673 12A6  
                   l2809 0A58                     l2761 073A                     l2753 06C0  
                   l2649 15D4                     l1777 2368                     l2665 22C0  
                   l2657 22A6                     l2819 1BEA                     l2499 1B74  
                   l2691 0B52                     l2683 13D6                     l2675 12BA  
                   l2771 07C6                     l2763 0740                     l2755 06C6  
                   l2667 22C4                     l2659 22B0                     l2693 0B5A  
                   l2685 1426                     l2677 12C6                     l2669 1264  
                   l2781 0852                     l2773 07CC                     l2765 074C  
                   l2757 06D2                     l2749 06AE                     l2599 2174  
                   l2695 0B60                     l2679 1326                     l2687 14A2  
                   l2783 0858                     l2775 07D8                     l2767 075E  
                   l2759 06E2                     l2951 1986                     l2697 0B6C  
                   l2689 0B2C                     l2785 0864                     l2777 07EA  
                   l2769 076E                     l2793 08DE                     l2961 19CA  
                   l2953 199E                     l2699 0B7E                     l2787 0876  
                   l2779 07FA                     l2795 0918                     l2971 19E6  
                   l2963 19CE                     l2955 19AA                     l2797 0936  
                   l2789 0886                     l2973 19EA                     l2965 19D6  
                   l2981 1A34                     l2957 19BA                     l2799 093C  
                   l2975 19F2                     l2967 19DA                     l2959 19C2  
                   l2969 19E2                     l2979 19FA                     STR_1 068F  
                   STR_2 0643                     STR_3 0665                     STR_4 061C  
                   STR_5 066C                     STR_6 0631                     STR_7 0655  
                   STR_8 063A                     STR_9 065D                     u1010 2358  
                   u1011 2354                     u2000 183A                     u2001 1836  
                   u2100 1DC6                     u2020 1884                     u2101 1DC2  
                   u2021 1880                     u2110 1E00                     u2030 18A6  
                   u2014 1856                     u2111 1DFC                     u2031 18A2  
                   u2015 1850                     u1400 0F44                     u1320 0E54  
                   u1304 0E08                     u2120 1B1A                     u2040 214C  
                   u1401 0F40                     u1321 0E50                     u1305 0E04  
                   u2121 1B16                     u2041 2148                     u1410 0F5E  
                   u1330 0E6E                     u1314 0E28                     u2130 1B3C  
                   u2050 2168                     u1411 0F5A                     u1331 0E6A  
                   u1315 0E24                     u2131 1B38                     u2051 2164  
                   u1500 1032                     u2300 1C2E                     u2140 1B64  
                   u2060 1FD2                     u1501 102E                     u2301 1C2A  
                   u2141 1B60                     u2061 1FCE                     u1510 1044  
                   u2150 1C4A                     u2070 2344                     u1511 1040  
                   u2151 1C46                     u2071 2340                     u1440 0FBC  
                   u1424 0F70                     u1360 0ECC                     u1344 0E80  
                   u1280 0DE4                     u2160 1C6C                     u2080 21E8  
                   u1441 0FB8                     u1425 0F6C                     u1361 0EC8  
                   u1345 0E7C                     u1281 0DE0                     u2161 1C68  
                   u2081 21E4                     u1450 0FD6                     u1434 0F90  
                   u1370 0EE6                     u1354 0EA0                     u1290 0DF6  
                   u2170 1C8A                     u2250 12A6                     u2090 21FA  
                   u1451 0FD2                     u1435 0F8C                     u1371 0EE2  
                   u1355 0E9C                     u1291 0DF2                     u2171 1C86  
                   u2251 12A2                     u2091 21F6                     u1620 1192  
                   u1604 1142                     u1540 10A2                     u1524 1056  
                   u1700 162C                     u2260 0B52                     u1621 118E  
                   u1605 113E                     u1541 109E                     u1525 1052  
                   u1701 1628                     u2261 0B4E                     u1630 11A4  
                   u1614 1166                     u1550 10B4                     u1534 1076  
                   u2270 06AA                     u1631 11A0                     u1615 1162  
                   u1551 10B0                     u1535 1072                     u2271 06A6  
                   u1800 1EE2                     u2280 1BCC                     u1464 0FE8  
                   u1384 0EF8                     u1480 206C                     u1720 1670  
                   u1801 1EDE                     u1465 0FE4                     u1385 0EF4  
                   u1481 2068                     u1721 166C                     u1810 1EF6  
                   u2290 1C08                     u1490 21D4                     u1474 1008  
                   u1394 0F18                     u1714 163E                     u1811 1EF2  
                   u2291 1C04                     u1491 21D0                     u1475 1004  
                   u1395 0F14                     u1715 163A                     u1660 120A  
                   u1644 11BA                     u1580 111A                     u1564 10CA  
                   u1820 1F0C                     u1740 16B8                     u1900 1FEE  
                   u1661 1206                     u1645 11B6                     u1581 1116  
                   u1565 10C6                     u1821 1F08                     u2285 1BC2  
                   u1741 16B4                     u1901 1FEA                     u1670 121C  
                   u1654 11DE                     u1590 112C                     u1574 10EE  
                   u1830 1F22                     u1734 1686                     u1910 2006  
                   u1671 1218                     u1655 11DA                     u1591 1128  
                   u1575 10EA                     u1831 1F1E                     u1735 1682  
                   u1911 2002                     u1840 1D4E                     u1760 1700  
                   u1841 1D4A                     u1761 16FC                     u1850 1D6C  
                   u1754 16CE                     u1851 1D68                     u1755 16CA  
                   u1684 1232                     u1860 1D88                     u1780 1748  
                   u1685 122E                     u1861 1D84                     u1781 1744  
                   u1694 1256                     u1870 1E24                     u1774 1716  
                   u1695 1252                     u1871 1E20                     u1775 1712  
                   u1880 1E42                     u1960 17A6                     u1881 1E3E  
                   u1961 17A2                     u1890 1E58                     u1794 175E  
                   u1891 1E54                     u1795 175A                     u1980 17F6  
                   u1981 17F2                     u1974 17C6                     u1975 17C0  
                   u1994 180E                     u1995 1808                     _PIR1 000F9E  
                   _main 1986                     _keys 003C         ??_PulseClockData 0007  
                   start 0000          pushNibble@value 000C             ___param_bank 000000  
 __end_of_pulseEnablePin 20FC                    ?_main 0001          __end_of_adcInit 20BA  
        __end_of_adcRead 2024                    STR_10 0643                    STR_11 0681  
                  STR_12 0627                    STR_13 0688                    STR_14 0631  
                  STR_15 0673                    STR_16 063A                    STR_17 067A  
                  STR_18 064C          __end_of___lldiv 1B98                    _T0CON 000FD5  
        __end_of___llmod 1CBC                    _T2CON 000FCA          __end_of___lwdiv 1DA8  
        __end_of___lwmod 1E76                    _RCREG 000FAE                    _RCSTA 000FAB  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _SPBRG 000FAF  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _PORTE 000F84          __end_of_calcula 1C34  
        __end_of_charKey 061C                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
                  _TXREG 000FAD                    _TXSTA 000FAC          __end_of_lcdChar 22E6  
    ___lmul@multiplicand 0005          __end_of_lcdInit 1AF4          __end_of_pinMode 1264  
                  _valor 0601                    _multa 0036          __end_of_soWrite 2072  
                  tablat 000FF5          __end_of_ssdInit 1F7E                    status 000FD8  
           pushNibble@rs 000A     __end_of_digitalWrite 1016          __initialization 231E  
        ?_pulseEnablePin 0001             __end_of_main 1A40                   ??_main 002B  
          __activetblptr 000002     __size_of_digitalRead 016A                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0         ___llmod@dividend 001A  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _CCPR2L 000FBB  
                 _INTCON 000FF2                   _SPBRGH 000FB0     __size_of_lcdPosition 003A  
  levelocidade@valantigo 0023                   ___lmul 1DA8                ??_adcInit 0007  
              ??_adcRead 0003                ??___lldiv 0015            ?_levelocidade 0001  
              ??___llmod 0022                ??___lwdiv 0005                ??___lwmod 000C  
                 _kpInit 2174                   _kpRead 235A    __size_of_apagaDisplay 002A  
              ??_calcula 0015                   _limite 0032                   clear_0 2324  
                 _soInit 20FC                ??_lcdChar 000E                   isa$std 000001  
              ??_lcdInit 000F         __end_of_ssdDigit 1F28                ??_pinMode 0005  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_soWrite 0009                ??_ssdInit 0007  
       __end_of_pushByte 1ED0               __accesstop 0080  __end_of__initialization 232A  
          ___rparam_used 000001            pushByte@value 000D             _apagaDisplay 2256  
            pinMode@type 0003           __pcstackCOMRAM 0001           ??_levelocidade 0023  
          __end_of_valor 0612       __size_of_delayMili 0030       __size_of_leTeclado 029C  
     __size_of_lcdString 0056       __size_of_kpReadKey 0078    __size_of_digitalWrite 024E  
             _delayMicro 236C    __end_of_mostraDisplay 1986                  ?___lmul 0001  
             _lcdCommand 22E6                  ?_kpInit 0001                  ?_kpRead 0001  
                _CCP2CON 000FBA                  _BAUDCON 000FB8           ___lmul@product 0009  
                ?_soInit 0001               _kpDebounce 177A       __size_of_serialcom 0498  
     __size_of_timerInit 0008       __size_of_timerWait 0010       __size_of_ssdUpdate 016C  
           _digitalWrite 0DC8        __end_of_delayMili 21D6         ??_pulseEnablePin 0007  
      __end_of_leTeclado 0DC8                  __Hparam 0000                  __Lparam 0000  
              ?_ssdDigit 0001        __end_of_lcdString 1FD4          kpDebounce@tempo 0044  
      __end_of_kpReadKey 1D34                  _adcInit 2072                  _adcRead 1FD4  
        __size_of___lmul 006A                ?_pushByte 000A                  ___lldiv 1AF4  
                ___llmod 1C34                  ___lwdiv 1D34                  ___lwmod 1E12  
           __psmallconst 0600          __size_of_kpInit 0032          __size_of_kpRead 000A  
                _calcula 1B98                  _charKey 0612              ssdDigit@val 0002  
            ssdDigit@pos 0001                  __pcinit 231E           serialRead@resp 0001  
                _lcdChar 22C8                  __ramtop 0600          __size_of_soInit 003E  
                _lcdInit 1A40                  __ptext0 1986                  __ptext1 234A  
                __ptext2 22A6                  __ptext3 2364                  __ptext4 14A4  
                __ptext5 1F28                  __ptext6 0694                  __ptext7 2334  
                __ptext8 21D6                  __ptext9 2304                  _display 0043  
                _pinMode 1016              serialSend@c 0001               delayMili@a 0001  
             delayMili@i 0004                  _soWrite 2024                  _ssdInit 1F28  
                _started 0045     __end_of_levelocidade 14A4     end_of_initialization 232A  
          ?_PulseEnClock 0001            __Lmediumconst 0000        __end_of_serialcom 0B2C  
         digitalRead@pin 0001           leTeclado@tecla 001C              ?_delayMicro 0001  
      __end_of_timerInit 236C          ___lldiv@divisor 0011        __end_of_timerWait 235A  
      __end_of_ssdUpdate 1610          ___lldiv@counter 0019               _serialInit 2304  
             _serialRead 21D6           _serialcom$1385 0025               ??_ssdDigit 0002  
             _serialSend 2334              ?_lcdCommand 0001                  postinc0 000FEE  
             ??_pushByte 000C  __size_of_PulseClockData 002A            ??_digitalRead 0003  
             _timerReset 22A6              ?_kpDebounce 0001               _velocidade 002E  
             _pushNibble 2280               lcdString@i 0013            ??_lcdPosition 0013  
         ??_PulseEnClock 0007               kpReadKey@i 0004          mostraDisplay@v0 000D  
        mostraDisplay@v1 000F          mostraDisplay@v2 0011          mostraDisplay@v3 0013  
         __end_of___lmul 1E12           adcRead@ADvalor 0003           __end_of_kpInit 21A6  
         __end_of_kpRead 2364           __end_of_soInit 213A      __size_of_delayMicro 0002  
    start_initialization 231E      __end_of_digitalRead 177A      __size_of_lcdCommand 001E  
    __size_of_kpDebounce 0136          ___llmod@divisor 001E          ___llmod@counter 0022  
    __end_of_lcdPosition 2174           adcRead@channel 0001              ?_serialInit 0001  
            ?_serialRead 0001              ?_serialSend 0001        kpDebounce@oldRead 0038  
      kpDebounce@newRead 003A                 ??___lmul 0009                 ??_kpInit 0007  
               ??_kpRead 0003              ?_timerReset 0001                 ??_soInit 0007  
  __size_of_levelocidade 0240              __pbssCOMRAM 002E              ?_pushNibble 000A  
             pinMode@pin 0001        _levelocidade$1384 0027                _delayMili 21A6  
       ___lwdiv@dividend 0001                _leTeclado 0B2C                 ?_adcInit 0001  
               ?_adcRead 0001                 ?___lldiv 000D        __size_of_ssdDigit 0058  
               ?___llmod 001A           _PulseClockData 222C                 ?___lwdiv 0001  
               ?___lwmod 0008             _levelocidade 1264     __end_of_PulseEnClock 222C  
               ?_calcula 0001                _lcdString 1F7E              _digitalRead 1610  
               ?_lcdChar 0001        __size_of_pushByte 005A                 ?_lcdInit 0001  
              _kpReadKey 1CBC              __smallconst 0600                 ?_pinMode 0001  
               ?_soWrite 0007                 ?_ssdInit 0001      __size_of_serialInit 001A  
    __size_of_serialRead 002C      __size_of_serialSend 0016         ___lwdiv@quotient 0005  
 __size_of_mostraDisplay 00D6              _lcdPosition 213A      __size_of_timerReset 0022  
           ??_delayMicro 0003               ?_delayMili 0001                _serialcom 0694  
 __end_of_PulseClockData 2256               ?_leTeclado 0001      __size_of_pushNibble 0026  
           ??_lcdCommand 000E                _timerInit 2364                _timerWait 234A  
              _ssdUpdate 14A4               ?_lcdString 000F             ??_kpDebounce 000A  
             ?_kpReadKey 0001          lcdCommand@value 000E       __end_of_delayMicro 236E  
       timerReset@ciclos 0003        ___lmul@multiplier 0001       __end_of_lcdCommand 2304  
             pushByte@rs 000A             lcdChar@value 000E       __end_of_kpDebounce 18B0  
          ?_apagaDisplay 0001                 __Hrparam 0000                 __Lrparam 0000  
             ?_serialcom 0001          lcdPosition@line 000F          ?_PulseClockData 0001  
          _mostraDisplay 18B0               ?_timerInit 0001               ?_timerWait 0001  
             ?_ssdUpdate 0001         __size_of_adcInit 0048         __size_of_adcRead 0050  
__size_of_pulseEnablePin 0042         __size_of___lldiv 00A4         __size_of___llmod 0088  
       __size_of___lwdiv 0074         __size_of___lwmod 0064         __size_of_calcula 009C  
       __size_of_lcdChar 001E         __size_of_lcdInit 00B4         __size_of_pinMode 024E  
        ___lwdiv@divisor 0003          ___lwdiv@counter 0007                 __ptext10 1264  
               __ptext11 213A                 __ptext20 1610                 __ptext12 1FD4  
               __ptext21 1AF4                 __ptext13 1C34                 __ptext30 0DC8  
               __ptext22 1A40                 __ptext14 0B2C                 __ptext31 236C  
               __ptext23 2280                 __ptext15 1F7E                 __ptext40 1ED0  
               __ptext32 21A6                 __ptext24 22E6                 __ptext16 22C8  
               __ptext41 1DA8                 __ptext33 2174                 __ptext25 1E76  
               __ptext17 1CBC                 __ptext42 2072                 __ptext34 20FC  
               __ptext26 2024                 __ptext18 235A                 __ptext43 1016  
               __ptext35 1B98                 __ptext27 2202                 __ptext19 177A  
               __ptext36 18B0                 __ptext28 222C                 __ptext37 1E12  
               __ptext29 20BA                 __ptext38 1D34                 __ptext39 2256  
       __size_of_soWrite 004E         __size_of_ssdInit 0056            __size_of_main 00BA  
         ??_apagaDisplay 0003              ??_delayMili 0003             ??_serialInit 0001  
           ??_serialRead 0001    __size_of_PulseEnClock 002A             ??_serialSend 0001  
               _ssdDigit 1ED0              delayMicro@a 0001           ?_mostraDisplay 0001  
               isa$xinst 000000              ??_leTeclado 001A             soWrite@value 0007  
               _pushByte 1E76              ??_lcdString 0011             ??_timerReset 0003  
               main@slot 002D              ??_kpReadKey 0001          timerReset@tempo 0001  
           ??_pushNibble 000C           lcdPosition@col 0011            ?_digitalWrite 0001  
     __end_of_serialInit 231E       __end_of_serialRead 2202       __end_of_serialSend 234A  
           _PulseEnClock 2202        digitalWrite@value 0003         ___lwmod@dividend 0008  
       ___lldiv@dividend 000D       __end_of_timerReset 22C8                 soWrite@i 0009  
            ??_serialcom 0023              ??_timerInit 0001              ??_timerWait 0001  
            ??_ssdUpdate 000A       __end_of_pushNibble 22A6             ?_digitalRead 0001  
       ___lldiv@quotient 0015          ___lwmod@divisor 000A              kpDebounce@i 000D  
        ___lwmod@counter 000C           ??_digitalWrite 0005             ?_lcdPosition 000F  
        digitalWrite@pin 0001          ??_mostraDisplay 000D  
